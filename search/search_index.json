{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lyrion Music Server","text":"<p>Info</p> <p>This site is under heavy construction while content is being transferred from the old wiki. If you want to help out, please reach out on the forums.</p> <p>Lyrion Music Server (formerly Logitech Media Server) is a fully open source server software to power a wide range of audio players. With the help of many plugins, Lyrion can stream not only your local music collection, but content from many music services and internet radio stations to your players.</p>"},{"location":"#lms-ecosystem","title":"LMS Ecosystem","text":"<p>Although Squeezeboxes started in 2000 with hard- and software developed by Slim Devices, which became later Logitech, nowadays a wide array of hardware and software solutions exist which make up the LMS ecosystem.</p> <p>To get a functioning LMS system you need to have three components, namely (1) a server, (2) a controller and (3) one or more music players. These three components can also be supplied by one device, for instance a Raspberry Pi with a touch screen running piCorePlayer.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>There are many ways that you can contribute to the LMS project with contributions of your time and effort:</p> <ul> <li>Develop code to add new features or fix bugs</li> <li>Develop plugins or applets</li> <li>Write documentation</li> <li>Report bugs</li> <li>Adding translations</li> </ul>"},{"location":"contributing/adding-translations/","title":"Adding translations","text":"<p>With the help of more than 30 volunteers LMS has already been translated into more than 17 languages!</p> <p>If you would like to help us to make LMS even more globally accessible and have noticed a missing translation in your language, or would like to add a new language, you can help us by creating a pull request on Github for your changes in the file strings.txt. This file contains all translations of all text strings which are used in LMS and is pretty self-explanatory.</p> <pre><code>STRING_TOKEN\n\u2192 DE \u2192 Dies ist ein Text\n\u2192 EN \u2192 This is some text\n</code></pre> <p>Note</p> <p>The one important thing to keep in mind is to always single use tabs (<code>\u2192</code>) rather than spaces to indent the strings, and to separate tokens from the actual content.</p> <p>Every string must be available in English (<code>EN</code>), as that's what LMS would fall back to if a translation was missing.</p> <p>Tip</p> <p>If your translation would be identical to the English version, there's no need to redefine it for your language, as LMS would automatically fall back to English.</p>"},{"location":"contributing/reporting-a-bug/","title":"Reporting a bug","text":"<p>If you think you have discovered a bug, you can help us by submitting an issue in our public issue tracker.</p>"},{"location":"contributing/reporting-a-bug/#before-you-create-a-bug","title":"Before you create a bug","text":"<p>Please do the following things before creating an issue:</p>"},{"location":"contributing/reporting-a-bug/#update-to-latest-version","title":"Update to latest version","text":"<p>Chances are that the bug you discovered was already fixed in a subsequent version. Thus, before reporting an issue, ensure that you're running the latest version of LMS. Please follow the installation guide to install the lastest version.</p>"},{"location":"contributing/reporting-a-bug/#search-for-solutions","title":"Search for solutions","text":"<p>Please search the issue tracker and discussion board if someone else already submitted your bug. Also check if there is also a discussion going on the forums.</p>"},{"location":"contributing/reporting-a-bug/#submitting-an-issue","title":"Submitting an issue","text":"<p>If you did not find a previous report of your issue you can submit your report to the public issue tracker. Please include the following in your report:</p> <ul> <li>descriptive title</li> <li>context from Settings/Information in LMS: LMS version!, operating system, hardware used, Perl version</li> <li>description of the issue</li> <li>steps to reproduce the bug</li> <li>browser used (if relevant)</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Lyrion Music Server is a fully open source server software to power a wide range of audio players. With the help of many plugins, Lyrion Music Server can stream not only your local music collection, but content from many music services and internet radio stations to your players.</p>"},{"location":"getting-started/#download-logitech-media-server-v850","title":"Download Logitech Media Server v8.5.0","text":"Windows Debian /  Ubuntu Raspberry Pi OS: RedHat /  Fedora Apple macOS <p> Windows 32-bit (70 MB)  Windows 64-bit (16 MB)</p> <p> Debian /  Ubuntu x86_64 (24 MB)  Debian /  Ubuntu - ARM (31 MB)</p> <p> Raspberry Pi OS (31 MB)</p> <p> RedHat /  Fedora (86 MB)</p> <p> Apple macOS (43 MB)</p> <p>You can find more packages for more platforms on https://downloads.lyrion.org/. For the Docker image see below.</p> <p>Download the package for your preferred platform and follow the instructions in the next section.</p>"},{"location":"getting-started/#install","title":"Install","text":"<p>There are a couple of ways to get started with a server:</p> <ul> <li>Install on Linux</li> <li>Install (easily) on Raspberry Pi</li> <li>Install on Windows</li> <li>Install on MacOS</li> <li>Install using Docker</li> </ul>"},{"location":"getting-started/#install-on-linux","title":"Install on Linux","text":"<p>Install using your operating system's package manager:</p>  Debian /  Raspberry Pi OS /  Ubuntu RedHat /  Fedora <pre><code>sudo dpkg -i logitechmediaserver_x.y.z_*.deb\n</code></pre> <pre><code>sudo rpm -i logitechmediaserver-x.y.z-1.noarch.rpm\n</code></pre>"},{"location":"getting-started/#install-on-raspberry-pi","title":"Install on Raspberry Pi","text":"<p>If you want to have an easily installed LMS on a Raspberry Pi and don't want to go the full Linux route as outlined above, you can use piCorePlayer. While its name suggests it's a player, it can be used to build a full LMS server with only a few clicks. See eg. https://docs.picoreplayer.org/projects/build-simple-lms-server/.</p>"},{"location":"getting-started/#install-on-windows","title":"Install on Windows","text":"<p>Double click the downloaded package to launch the installation process in a familar installation assistant.</p>"},{"location":"getting-started/#install-on-macos","title":"Install on macOS","text":"<p>Double click the downloaded package to launch the installation process in the macOS installer.</p> <p>Note</p> <p>Sometimes macOS would refuse to open the installer, because the authenticity of the developer can't be confirmed. If that happens to you, open the installer using a right mouse click (or control-click), then \"Open\". You might have to do this twice, as first time you'd stil be rejected. But the second time around you should be able to launch it anyway.</p>"},{"location":"getting-started/#install-using-docker","title":"Install using Docker","text":"<p>See lmscommunity/logitechmediaserver on Docker hub.</p>"},{"location":"getting-started/#configure","title":"Configure","text":"<p>Now you should be able to browse to http://yourserver:9000 (replace \"yourserver\" with localhost if you are at the same system as your new installation or with the hostname or IP address of that system if using a different device) and begin configuring the Lyrion Music Server. Congrats, you're all finished!</p>"},{"location":"getting-started/beginners-guide-synology-docker/","title":"Beginner's Docker Guide on Synology","text":"<p>Note</p> <p>In case you have any difficulties following this guide or have found some errors, please leave a note on the forums. Thanks!</p> <p>If you have a Synology NAS which can run Docker containers, you are in luck! Look here to check if your Synology NAS is able to run Docker containers.</p> <p>This guide uses our \"official\" Docker image. Source and the dockerfile of the image can be found here.</p>"},{"location":"getting-started/beginners-guide-synology-docker/#assumptions","title":"Assumptions","text":"<p>In this guide the following assumptions apply:</p> <ul> <li>If you already have the Synology LMS packaged installed, uninstall it first. This will free up the LMS network ports so the container can use them.</li> <li>This docker container runs as your user. Note, you can also create a specific user for running the container, in that case replace the UID/PUID with the correct identifier.</li> <li>Your music is stored in the shared folder <code>music</code>.</li> <li>(Optional) you have a shared folder called playlist where LMS can store playlists.</li> <li>Your user has read-only or read-write access to the music folder. If you also have a playlist folder, your user needs read-write access to this folder.</li> <li>The state of the docker image is saved in the folder <code>/docker/logitechmediaserver</code>. The path can be anything, but it is advisable to restrict write access for other users to this folder.</li> </ul>"},{"location":"getting-started/beginners-guide-synology-docker/#find-out-the-uid-and-gid-of-your-user","title":"Find out the UID and GID of your user","text":"<p>The UID and GID values for the default user on Synlogy NAS are usually 1026 and 100. There is a very simple way to check the values as follows:</p> <ol> <li>Create a new Scheduled task as an User-defined script</li> <li>Name the script whatever you see fit</li> <li>Set it to be not repeating</li> <li>Set it to send run details to your email</li> <li> <p>Write the script:</p> <pre><code>id\n</code></pre> </li> <li> <p>Run it and soon enough, you will receive an email containing the UID and GID values.</p> </li> </ol>"},{"location":"getting-started/beginners-guide-synology-docker/#download-the-docker-image","title":"Download the Docker image","text":"<ol> <li>In the Synology GUI start up the app Container Manager.</li> <li>Go to Register.</li> <li>Search for <code>logitechmediaserver</code> and download the <code>lmscommunity/logitechmediaserver</code> image.</li> <li>Select the <code>latest</code> tag. The image will now download.</li> </ol>"},{"location":"getting-started/beginners-guide-synology-docker/#configure-the-docker-container","title":"Configure the Docker container","text":"<p>Now the correct image has been downloaded, it is time to start and configure the container.</p> <ol> <li>In the \"Container Manager\" app, go to \"Image\", select the <code>lmscommunity/logitechmediaserver</code> image and press \"Run\".</li> <li>Choose a suitable name, e.g. <code>logitechmediaserver</code>, and press \"Next\".</li> <li> <p>In the \"Port Settings\" section, add the following ports :</p> Local port Container port Protocol 9000 9000 tcp 9090 9090 tcp 3483 3483 tcp 3483 3483 udp </li> <li> <p>In the \"Volume Settings\" section, add the following volumes:</p> Local folder Container folder Mode /docker/logitechmediaserver /config rw /music /music ro /playlist /playlist rw </li> <li> <p>Add the UID and GID from the step above, and the appropriate TZ (timezone) to the \"Enviroment\" section:</p> Variable Value PUID for example <code>1026</code> (see the UID/GID step above) PGID for example <code>100</code> (see the UID/GID step above) TZ for example <code>Europe/Zurich</code> EXTRA_ARGS <code>\"--advertiseaddr=192.168.0.100\"</code> (your Synology's IP address) <p>Note</p> <p>Please note that the <code>EXTRA_ARGS</code> entry is only required if you use the default <code>bridge</code> networking mode. If you decide to expose all of the container's services to the local network using the <code>host</code> mode, then defining the <code>advertiseaddr</code> is not required.</p> </li> <li> <p>Select \"Next\" and \"Done\". The container will automatically start.</p> </li> </ol>"},{"location":"getting-started/beginners-guide-synology-docker/#configure-lms","title":"Configure LMS","text":"<ol> <li>Launch your web browser (eg. Edge, Firefox) and type: <code>http://[hostname or ip address of your nas]:9000</code>. Then, press Enter. The Lyrion Music Server web interface will open.</li> <li>Skip the MySqueezebox.com account credentials step (because the MySB.com service is shut down).</li> <li>Browse to your music folder location (<code>/music</code>), highlight the directory, and click \"Next\".</li> <li>(Optional) browse to your playlists folder location (<code>/playlist</code>), highlight the directory, and click \"Next\".</li> <li>You'll see the Summary page for your Lyrion Music Server install. Click \"Finish\" to complete the installation. Congrats, you're done!</li> </ol>"},{"location":"getting-started/beginners-guide-synology-docker/#updating-the-docker-image","title":"Updating the Docker image","text":"<p>It is always advisable to regularly update your software, and with Docker on Synology it is made very easy.</p> <ol> <li>In the \"Container Manager\" app, go to \"Image\", and check if the <code>lmscommunity/logitechmediaserver</code> image has any updates available.</li> <li>If there are updates, click \"Update available\" and press \"Update\" twice.</li> <li>Now the image is updated, refreshed and automatically restarted. If you followed the guide above all important data is saved and stored in Docker volumes, so this update will not overwrite anything in your configuration.</li> <li>Done, and enjoy all new features and fixes!</li> </ol> <p>Note</p> <p>If you use a different tag as <code>latest</code> then Synology does not automatically check for updates. To update go to \"Container\" and stop the LMS container. Then go to \"Registry\", search the <code>lmscommunity/logitechmediaserver</code> image and select the tag you are using. Once the updated image had been downloaded, go to \"Container\", select the LMS container and press \"Reset\". You get a warning that all data in the container will be lost, but that does not matter since all your configuration is in Docker volumes so you can press \"Yes\"! When that's done you can start the container again.</p>"},{"location":"getting-started/changelog-lms8/","title":"LMS 8 changelog","text":""},{"location":"getting-started/changelog-lms8/#version-851","title":"Version 8.5.1","text":"<ul> <li> <p>Upstream fixes from Logitech Media Server 8.4.1</p> </li> <li> <p>New Features:</p> </li> <li> <p>Server Changes:</p> <ul> <li>Add links to the settings of the AudioAddict based services.</li> <li>Add support for \"DELETE\" HTTP verb to SimpleAsyncHTTP.</li> </ul> </li> <li> <p>Platform Support:</p> </li> <li> <p>Bug Fixes:</p> <ul> <li>Fix definition of track-level favorites' artwork.</li> <li>Correctly prefix settings links from Plugins page with the web root.</li> <li>#1020 - Add icon to favorites in Default web UI et al. (thanks philippe44 &amp;&amp; darrell-k)</li> </ul> </li> <li> <p>Other:</p> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-850-2024-03-14-8762186a4","title":"Version 8.5.0 - 2024-03-14 (8762186a4)","text":"<ul> <li> <p>Upstream fixes from Logitech Media Server 8.4.x</p> </li> <li> <p>Server Changes:</p> <ul> <li>Remove all dependency on MySqueezebox.com.</li> <li>Remove warning about \"incompatible\" Radio firmware version 7.*.</li> <li>#1003 - Add alarm information to player \"status\" query.</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>#998 - Fix Sounds &amp; Effects playback when password protection is enabled.</li> <li>#1007 - Fix track favorite links in album listings (thanks darrell-k!).</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-841","title":"Version 8.4.1","text":"<ul> <li> <p>Server Changes:</p> <ul> <li>Improve Release Type readout in Ogg and WMA files.</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>Don't fail http caching due to extended characters in the URL.</li> <li>Playing all items from a genre might fail under certain circumstances.</li> <li>Use valid sorting arguments if sort order \"albums\" is requested when queuing up items.</li> <li>Fix Last.fm scrobbling issue with some streaming service tracks.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-840-2024-02-08-e225575dc","title":"Version 8.4.0 - 2024-02-08 (e225575dc)","text":"<ul> <li> <p>Upstream fixes from Logitech Media Server 8.3.x</p> </li> <li> <p>New Features:</p> <ul> <li>#879 - Add support for Release Types (see eg. on MusicBrainz).</li> <li>New \"Advanced Tag View\" plugin allows you to show more information in the Track Info menu, without the need to drill down to \"View Tags\"</li> <li>Allow editing of a favourite's icon.</li> <li>Add plugins for ClassicalRadio.com, DI.fm, JazzRadio.com, RadioTunes.com, RockRadio.com, ZenRadio.com.</li> <li>Add an optional artist albums view which groups albums by release type and contribution. (thanks darrell-k!)</li> <li>Add an option to import playlists from online music services.</li> <li>#987 - Add OggFlac support (thanks philippe44!)</li> </ul> </li> <li> <p>Server Changes:</p> <ul> <li>Improve integration of the external image resizing helper daemon.</li> <li>Improve built-in imageproxy: don't proxy image if original size is requested, re-direct instead; add support for custom headers when using external image proxy.</li> <li>Updated Dutch translation - thanks blackfiction!</li> <li>Updated French translation - thanks thanks Frank-Berry &amp; philippe317!</li> <li>Improve rendering of links in the web UI menus (comments, file download, etc.)</li> <li>Sort tracks in \"title\" sort order by artist and album, too, if they're part of the result set.</li> <li>Add option to check for updates every hour.</li> <li>Optionally don't remove online duplicates from library views.</li> <li>#846 - Improve display of multiline lyrics and comments in the web UI (thanks mw9!)</li> <li>Move persist.db out of the cache folder - it's music data which can't be restored from the music files.</li> <li>Log warning if the server's time seems to be off (only if MySqueezebox integration is enabled).</li> <li>Re-implement Sounds &amp; Effects plugin to not depend on MySqueezebox for the navigation and content selection.</li> <li>Report actual replay gain value for the currently playing track in \"status\" query.</li> <li>Add \"Q\" tag to songinfo, status queries etc. to return lossless flag for tracks (thanks AF-1!).</li> <li>#862 - Make lyrics on Default skin songinfo page collapsible (thanks AF-1!)</li> <li>#868 - Populate the release year ('year') attribute for remote tracks in the player queue (thanks SamInPgh!)</li> <li>#956 - Add raw AAC (ADTS) file support (thanks philippe44!)</li> <li>#964/ #985 - Handle case where user moves/adds/removes tracks in a playlist while the next track is already fully streamed (thanks philippe44!)</li> <li>#986 - Add a 'V' query that will return the maximum seek point in seconds within the current track duration for a 'live' radio stream (thanks expectingtofly &amp; philippe44!)</li> <li>Fix Napster playback on community firmware players</li> </ul> </li> <li> <p>Platform Support:</p> <ul> <li>Tweak Apple OS Architecture discovery: use the \"arm64\" string rather than the CPU's name (eg. \"Apple M1\")</li> <li>Add Perl 5.38 support for Linux x86_64.</li> <li>Add experimental support for Windows 64-bit - requires installation of Strawberry Perl 5.32!</li> <li>Update Windows installer to use latest InnoSetup 6 - dropping support for Windows XP, 2003 Server, and Windows Home Server.</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>#212 - Unicode sorting for Browse Music Folder broken (thanks kimmot!)</li> <li>#622 - __requestRE should only match words provided to Slim::Control::Request::subscribe. (thanks earlchew!)</li> <li>#799 - Update IO::String to latest, fixing some odd Perl version check.</li> <li>#829 - Don't override a content type set by a page handler.</li> <li>#905 - Browsing in to playlists is extremely slow.</li> <li>#911 - Don't shut down the server on \"restartserver\" when we actually can't restart it.</li> <li>#939 - Player can't be switched from MySqueezebox.com to LMS</li> <li>#962 - Fix album_contributor updates in New &amp; Changed scan (thanks darrell!)</li> <li>#979 - New and changed contributor scanning improvements (thanks darrell!)</li> <li>Respect a contributor's Musicbrainz ID to separate artists of the same name.</li> <li>#969 - Add utf-8 guess decoding on Ogg metadata - thanks philippe44!</li> <li>Try harder to avoid duplicate (but empty) album entries on singles.</li> <li>Clear the Various Artists ID when a scan has finished.</li> <li>Don't remove online libraries from library views unless there really is a local copy of the same album.</li> <li>Fix Deezer SmartRadio track duration calculation.</li> <li>Allow pausing Deezer Flow.</li> <li>Fix resizing with a defined background color.</li> </ul> </li> <li> <p>Other:</p> <ul> <li>Simplify plugin and server update repository handling.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-832","title":"Version 8.3.2","text":"<ul> <li> <p>Platform Support:</p> <ul> <li>#891 - Add Perl 5.36 support for Linux aarch64, armv7.</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>#874 - Fix shuffling when starting off with an empty playlist (thanks robho!)</li> <li>#918 - Fix browsing down to album favorites etc.</li> <li>Add CPAN/auto/5.14 to lib search path for Windows builds to include Font::FreeType.</li> <li>Fix another absolute path to a stylesheet in the Default skin.</li> <li>Fix an issue where registering a pre-cache resolution would cause a subsequent LMS start to fail.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-831-2023-02-17-026019bb7","title":"Version 8.3.1 - 2023-02-17 (026019bb7)","text":"<ul> <li> <p>Server Changes:</p> <ul> <li>Make log viewer template (log.html) skinnable by including skin.css.</li> </ul> </li> <li> <p>Platform Support:</p> <ul> <li>Update Audio::Scan to 1.06 for certain platforms (thanks ralphy, robho, slartibartfast!)</li> <li>#826 - Add Perl 5.36 support for Linux x86_64.</li> <li>Add Perl 5.34 support for Linux aarch64.</li> <li>Add signed version of our custom Perl build for macOS.</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>#827 - Fix installation of plugin updates - honour user's choice (thanks mw9!)</li> <li>Don't use our custom Perl build on macOS 10.x - these versions come with a still working Perl 5.18.</li> <li>#834 - Fix no-transcoding playback of m4a audio (thanks philippe44!)</li> <li>#835 - Improve Alarm reliability - prevent accidental/random alarm stops.</li> <li>#843 - HTTPSocks.pm - Binary OR used by mistake - Logical OR needed (thanks mw9!).</li> <li>Remove support for \"deflate\" encoding type in SimpleHTTP requests: it must have been broken for over a decade!</li> <li>#852 - No result return while using Chinese Keyword in Fulltext Search.</li> <li>#857 - Fix changing MySB credentials using the \"setsncredentials\" command.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-830-2022-11-04-4e15dbdff","title":"Version 8.3.0 - 2022-11-04 (4e15dbdff)","text":"<ul> <li> <p>Upstream fixes from Logitech Media Server 8.2.x</p> </li> <li> <p>New Features:</p> <ul> <li>Add support for macOS 13 Ventura</li> </ul> </li> <li> <p>Server Changes:</p> <ul> <li>Remove support for media types other than audio (video, pictures). Let's make \"M\" music again.</li> <li>#651 - Updated French translation - thanks Frank-Berry!</li> <li>Added British English translations - thanks expectingtofly!</li> <li>Updated Czech translation - thanks mipa87!</li> <li>Updated Dutch translation - thanks blackfiction!</li> <li>Add support for TIDAL replay gain.</li> <li>Dramatically improve Fulltext Search indexing for large playlists (thousands of tracks).</li> <li>Improve security of LMS &lt;-&gt; mysqueezebox.com communication: don't store credentials, but only a session token.</li> <li>Clean up legacy JavaScript support: update PrototypeJS and Scriptaculous to their latest builds, remove some legacy code.</li> <li>#678 - Fix up character encoding issues in Web UI Scanner progress reporting and Web UI log display (thanks mw9!)</li> <li>#708 - Update to MP3, FLAC, Ogg and WMA Formats to use BPM tags - thanks kwarklabs!</li> <li>#751 - Shuffle tracks added with \"playlist loadtracks\" for a given year (thanks philchillbill!)</li> <li>#758 - Allow selection of regional language (eg. ZH_CH or EN_GB) through JSONRPC (thanks expectingtofly!)</li> <li>#785 - Improve adding albums as favorites: don't rely on the album title alone, but use the artist to identify the album, too.</li> <li>#817 - Fix JavaScript integration in settings pages for Classic/Light (and thus Material) skins.</li> <li>Remove more legacy plugins: Amazon, MP3Tunes, Orange, YALP</li> </ul> </li> <li> <p>Platform Support:</p> <ul> <li>#673 - Add aarch64 Linux and 64-bit macOS binaries for Monkey's Audio (APE) files (thanks ralphy!)</li> <li>#684 - Updated Solaris Binaries for alac, flac, sox, faad, wvunpack, mac (thanks urknall!)</li> <li>#715 - Remove I18N::LangTags - it's outdated and has been part of core Perl since 5.12.</li> <li>Added native support for Apple Silicon</li> <li>Update Audio::Scan to 1.05 for certain platforms (thanks ralphy, slartibartfast!)</li> <li>#773 - Update flac to 1.3.4 (macOS, Linux i386, x86_64, armhf, aarch64)</li> <li>Added custom Perl 5.34 build for macOS 10.15+, in preparation for Apple's removal of Perl from macOS</li> <li>Remove support for the embedded MySQL server. We've been using SQLite for about a decade.</li> <li>Remove support for PowerPC and i386 on macOS.</li> <li>#810 - Remove the 'deprecate' pragma vom CGI::Util to improve compatibility with newer Perl versions.</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>Allow seeking in mp4 files with samplerates &gt; 65535 (32 bits) on some platforms (thanks philippe44 &amp; ralphy)</li> <li>Improve Deezer metadata lookup when adding albums/playlists through the CLI.</li> <li>(Audio::Scan) #9 - For some WavPack DSD file the song_length_ms is incorrect (thanks aeeq &amp; ralphy!)</li> <li>(Audio::Scan) #12 - ID3: Fix v2.4 extended header handling (thanks mw9 &amp; ralphy!)</li> <li>#406 - Crossfading fails with very short tracks</li> <li>#410 - Rescan button for individual music folders does not work in Classic (and hence Material) skin.</li> <li>#473 - Broken playback functionality in Album/More</li> <li>#535 - some CLI commands duplicate comment tag info</li> <li>#547 - duplicate albums after adding tracks while renaming album</li> <li>#668 - Podcasts: Pre-caching image and more-info data can bring the server to a crawl #668 (thanks mw9!)</li> <li>Fix image transformation if a cover requested using /current/cover is pointing to a local file.</li> <li>#699 - Improve resume behaviour (thanks philippe44, maniac103 &amp; mw9</li> <li>#700/ #718 - High CPU load during playback of certain radio streams (thanks philippe44!)</li> <li>#704 - changed artist names remain in database after quick rescan</li> <li>#705 - changing upper and lower case in file name results in double entries</li> <li>#746 - Windows 11: PreventStandby doesn't prevent standby any more</li> <li>#749 - fix mp4 streams where audio offset comes from STCO (thanks philippe44 &amp;&amp; bpa!)</li> <li>#754 - improve reliability of \"what's new\" podcast search (thanks philippe44!)</li> <li>#767 - fix compatibility with standards compliant cometd libraries (thanks lynniemagoo!)</li> <li>#95 - update faad helper binaries to fix a crash when the decoder call fails (thanks ralphy!)</li> <li>#777 - When syncing with disconnected player through CLI, random player is synced</li> <li>#802 - Log is flodded with callback warnings \"Can't call method \"display\" on an undefined value\"</li> <li>Prevent a server crash while re-building the fulltext search index with huge collections.</li> <li>Don't show online only artists when a virtual library view tells us to do so.</li> <li>Fix IO::Socket::SSL initialization in the scanner's sync http lookup code.</li> <li>#797 - Fix Power off/Power on behaviour - Player would resume playback of stale track when reconnecting, although nothing to be resumed.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-821","title":"Version 8.2.1","text":"<ul> <li> <p>Server Changes:</p> </li> <li> <p>Platform Support:</p> <ul> <li>Added Perl 5.34 modules for Linux x86_64</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>#646 - Fix streaming compatibility with SliMP3 (thanks philippe44!).</li> <li>#647 - Fix podcast \"Play from last position\" and skip back trackinfo item (thanks mw9 and philippe44!).</li> <li>#656 - Correct start time for streams with range offset (thanks philippe44!).</li> <li>Fix resizing images with a dash in the name.</li> <li>Define $::cachedir in the scanner, too, as many parts of the code rely on it.</li> <li>#760 - Fix various XSS possibilities in settings pages etc.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-820-2021-08-03-1ec16032b","title":"Version 8.2.0 - 2021-08-03 (1ec16032b)","text":"<ul> <li> <p>Upstream fixes from Logitech Media Server 8.1.x</p> </li> <li> <p>New Features:</p> <ul> <li>Try to group online artists with local artists by ignoring slightly different spelling (eg. \"The Beatles\" vs. \"Beatles\", \"Amy Macdonald\" vs. \"Amy MacDonald\").</li> <li>#510 - Add (optional) \"balanced\" track shuffling method, which is less random, but hopefully more pleasing to the listener.</li> <li>#537 - Add audio option to combine channels to build a mono signal (whether player is synchronized or not).</li> <li>#538 - Add Balance setting for players which support it (thanks philippe44!).</li> <li>#621 - Add Search feature to the Podcasts plugin (thanks philippe44!).</li> <li>#630 - Add parsing of remote OPML list.</li> <li>#627 - Allow explodePlaylist to return an OPML list, not just an array or urls.</li> <li>Enable basic track statistics (play count, last played, ratings) for online tracks imported into the library.</li> <li>#581, #591 - Create new player protocol to buffer http streams to disk or re-establish dropped connections to improve reliability (thanks philippe44!).</li> </ul> </li> <li> <p>Server Changes:</p> <ul> <li>When an online scan doesn't return any track, but previously had some, do not remove tracks from library. The empty new list is likely due to a scan failure.</li> <li>Try to improve backwards compatibility with eg. Erland's plugins, which sometimes struggle with the remote tracks.</li> <li>#411 - Transcoder conversion rules: Support resampling for Ogg/Flac streams (thanks bpa/mw9!)</li> <li>#598 - Shuffle tracks added with \"playlist loadtracks\" and certain search filters (thanks philchillbill!)</li> <li>Added hook for 3rd party plugins to tell DSTM not to kick in.</li> </ul> </li> <li> <p>Platform Support:</p> <ul> <li>#18 - Add a systemd service file for Debian based systems (thanks mw9 &amp; tomscytale).</li> <li>#22 - Add systemd service configuration for RPM based systems (thanks JohanSaaw!)</li> <li>#25 - Add weak dependency on perl IO::Socket:SSL in RPM (thanks JohanSaaw!)</li> <li>#526 - Add Perl 5.32 and 5.30 support for Linux aarch64 platform. (thanks clivem!)</li> <li>Remove Font::FreeType from Linux distributions. It's easy enough to install it using the system's package manager, and it would conflict on system where we don't provide the binary.</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>#554 - Long current playlist disappears from UI during wipe and rescan.</li> <li>#601 - \"icon\" for URL=\"file://...\" entries does not work in favorites.ompl.</li> <li>#629 - Set SO_KEEPALIVE for cli socket so they auto-close when peer disappears.</li> <li>#632 - Keep shall in foreground when startTime is required and bitrate is missing.</li> <li>#617 - Handle volatile redirected url, retry from original one if failed after resume.</li> <li>#612 - Ask PH if _currentHandler shall be rewritten (HTTP-&gt;HTTPS upgrade).</li> </ul> </li> <li> <p>Other:</p> <ul> <li>#528 - On Unix-like platforms, we now ensure that plugins are installed in such a way that none of their files are writable by users other than the user running LMS, even if they\u02bcre stored that way in the plugin ZIP file.</li> <li>No longer include the firmware images for ip3k based players (Classic, Boom, Receiver, Transporter) with the installation packages. Logitech Media Server can download them when needed. But after about a decade without updates it's unlikely anybody would still have to update anyway.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-812","title":"Version 8.1.2","text":"<ul> <li> <p>Server Changes:</p> <ul> <li>#522 - add new --advertiseaddr startup parameter to tell LMS what user facing IP address to use (in case of NATed setups, like with load balancers or Kubernetes etc.) - thanks fuero!</li> <li>Don't sync favorites from mysqueezebox.com when prefs syncing is disabled.</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>Don't poll the Deezer library if the user doesn't have a premium subscription.</li> <li>Open App Gallery item in new window/tab - fix some regexes where we'd only accept http instead of https.</li> <li>Make sure we get the mysqueezebox.com based app menu even for players which are not registered there.</li> <li>#508 - Don't include the port when using default ports in host header for http requests.</li> <li>#521 - Fix http redirection on HTTPS protocol handlers (thanks philippe44!)</li> <li>#523 - Fix http redirection when redirect URL is missing the protocol (thanks philippe44!)</li> <li>#531 - Player's library view setting and Random Mix preference conflict with each other.</li> <li>#536 - When an album list is filtered by contributor role, the contributor's name sometimes isn't shown with the album.</li> <li>#545 - Under certain circumstances 3rd party plugins could be hidden on non-Squeezeplay based players.</li> <li>#559 - Deleting favourite via CLI using URL deletes others (thanks CDrummond!)</li> <li>#585 - mp4 parser for trailing header must keep original request fields (thanks philippe44!)</li> <li>#593 - Handle redirect with processors (eg. mp4 =&gt; aac) (thanks philippe44!)</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-811-2021-01-14-dd356a423","title":"Version 8.1.1 - 2021-01-14 (dd356a423)","text":"<ul> <li> <p>Server Changes:</p> <ul> <li>#489 - Enable Deezer flac seeking for ip3k players.</li> <li>#490 - Enable \"Defeat Touch To Play\" for all players.</li> </ul> </li> <li> <p>Platform Support:</p> <ul> <li>Restore Perl 5.18 support in the x86_64 .deb file.</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>Fix Ogg Opus on Windows.</li> <li>Fix advanced genre replacement in Online Music Library Integration plugin.</li> <li>#485 - HTTP range request is last byte not size.</li> <li>#486 - When using internal transcoding only, the container format must be set.</li> <li>#488 - When resampling FLAC, add targeted $RESAMPLE$,not only the source sample rate.</li> <li>#501 - Fix logging in Deezer and TIDAL importers.</li> <li>#506 - Fix Napster streaming.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-810-2020-12-23-effae8494","title":"Version 8.1.0 - 2020-12-23 (effae8494)","text":"<ul> <li> <p>Upstream fixes from Logitech Media Server 8.0.x</p> </li> <li> <p>New Features:</p> <ul> <li>Deezer HiFI! Stream lossless music from Deezer if you have a Deezer HiFi subscription.</li> <li>Add support for lyrics stored in the UNSYNCEDLYRICS tag in FLAC files.</li> <li>Optionally allow installation of plugins which were targeted at Logitech Media Server 7.*.</li> </ul> </li> <li> <p>Server Changes:</p> <ul> <li>Improve transcoding framework to allow protocol handlers to force transcoding (eg. TIDAL)</li> <li>Increase the default maximum playlist length for systems with more memory.</li> </ul> </li> <li> <p>Platform Support:</p> <ul> <li>Improved compatibility with macOS 11 Big Sur and Apple Silicon (M1 CPU).</li> <li>Remove (buggy) support for Perl 5.8 - we broke compatibility already a while back.</li> <li>Remove support for ReadyNAS - we broke compatibility already a while back (using Perl 5.8).</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>#475 - Socket leaks when pipeline is used.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-801","title":"Version 8.0.1","text":"<ul> <li> <p>Bug Fixes:</p> <ul> <li>#437 - New Music doesn't respect the library_id parameter.</li> <li>#459 - Library items like artists (db:contributor.name=...) favorites don't return the URL in the CLI.</li> <li>#460 - Retrieving a genre by ID using the CLI is not possible.</li> <li>PR #474 - Ignore non-compliant CUE sheets (thanks oleg-kuh!)</li> <li>Make sure we only poll music services for changes in the library which we actually have configured.</li> <li>Fix album separation of multi disc sets from online services when grouping is disabled.</li> <li>Don't offer direct firmware download if players can't handle it lack of https support.</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms8/#version-800-2020-11-20-e0eee9c29","title":"Version 8.0.0 - 2020-11-20 (e0eee9c29)","text":"<ul> <li> <p>Upstream fixes from Logitech Media Server 7.9.3</p> </li> <li> <p>New Features:</p> <ul> <li>Online music library integration: list your collection of albums vetted in your favorite streaming service as part of your \"My Music\" collection.</li> <li>Improved support for Audio Books: automatically create library views and browse modes dealing with Audio Books and Authors.</li> <li>Paste TIDAL or Deezer weblinks in to the Tune In field to play albums/playlists/tracks (thanks mavit!)</li> <li>Keep track of recently played podcasts (thanks philippe44!)</li> </ul> </li> <li> <p>Server Changes:</p> <ul> <li>PR #367 - Improved parsing of HTTP header allows for new features (eg. AAC transcoding) and fixes some issues with streaming remote files. Thanks a lot philippe44!</li> <li>PR #305 - use ORIGINALYEAR in FLAC files to override YEAR (thanks jcbodnar!)</li> <li>PR #267 - HTTPS certificates are now validated when LMS acts as a client. HTTPS connections to plugin repositories are no-longer retried over HTTP when they fail. The old insecure behaviour can optionally be re-enabled, although, instead, we recommend working out why HTTPS is broken in your environment and fixing that if possible.</li> <li>PR #308 - Update faad binaries to fix several CVE-2017 security issues (thanks ralphy!)</li> <li>PR #324 - Implement documented, but non-functional search in \"favorites\" query.</li> <li>PR #346 - Update Audio::Scan on Windows to 1.02 (thanks ralphy!)</li> <li>PR #355 - Improved metadata handling in the xPL plugin (thanks keynet!)</li> <li>PR #429 - Hide library folders from scanning with a sentinel file (thanks sciurius!)</li> <li>PR #434 - Support for multiple FILE commands in CUE sheets (thanks oleg-kuh!)</li> <li>PR #448 - Add support for TIDAL over HTTPS and seeking (thanks philippe44!)</li> <li>Improved Dutch translation (thanks blackfiction!)</li> <li>Read Conductor tag from m4a etc. files.</li> <li>Persist some web browser side preferences like artwork mode, expanded menus etc. on the server. Safari would regularly \"forget\" them.</li> <li>Improve cache purging to reduce startup time and the risk of locking up other initialization tasks.</li> <li>Updated LWP module and dependencies to improve compatibility with newer Perl versions.</li> <li>Support import of DSD in WavPack files (requires additional DSDPlay 3rd party plugin).</li> <li>Add 'wav wav' rule which keeps headers.</li> <li>Add 'aif pcm' rule and change 'aif aif' rule to keep header except for \"legacy\" SB.</li> <li>Add 'H' tag in convert.conf to strip wav/aiff headers.</li> </ul> </li> <li> <p>Platform Support:</p> <ul> <li>Logitech Media Server now is available as a Docker image lmscommunity/logitechmediaserver (thanks snoopy86, terual, pascalberger!).</li> <li>Added Perl 5.32 modules for Linux x86_64</li> </ul> </li> <li> <p>Bug Fixes:</p> <ul> <li>#277 - add new flac binaries to fix seeking within remote flac streams in some locales (thanks ralphy!).</li> <li>#313 - Advanced Search for albums returns emtpy \"Song Info ()\" link.</li> <li>#327 - \"playlist loadalbum\" command is case sensitive and otherwise fragile.</li> <li>#366 - Fix gapless PCM Playback on Squeezebox1 (thanks michaldie!).</li> <li>#388 - Fix sorting of index bar in the web UI.</li> <li>Always strip BOM from M3U files, not only if the first line is a comment.</li> <li>Support wav/aif remote streams (direct and proxied).</li> <li>Check that destination (not source) codec is supported in direct streaming.</li> <li>Pass all seed tracks, using one API call, to MusicIP mix when used for \"Dont Stop The Music\".</li> <li>Re-build Fulltext Search Index for modified playlists after they've been saved.</li> </ul> </li> <li> <p>Other:</p> <ul> <li>Updated translations: Swedish (thanks Johan!)</li> </ul> </li> </ul>"},{"location":"getting-started/changelog-lms9/","title":"LMS 9 changelog","text":""},{"location":"getting-started/changelog-lms9/#introducing-lyrion-music-server-version-900","title":"Introducing... Lyrion Music Server Version 9.0.0!","text":"<ul> <li> <p>Upstream fixes from Logitech Media Server 8.5.x</p> </li> <li> <p>New Features:</p> </li> <li> <p>Server Changes:</p> </li> <li> <p>Platform Support:</p> </li> <li> <p>Bug Fixes:</p> <ul> <li>#999 -</li> </ul> </li> <li> <p>Other:</p> </li> </ul>"},{"location":"getting-started/import-favorites-from-mysb/","title":"This page is obsolete","text":""},{"location":"getting-started/import-favorites-from-mysb/#how-to-import-favorites-from-mysqueezeboxcom","title":"How to Import Favorites from MySqueezebox.com","text":"<p>You can import the existing list of Favorites from MySqueezebox.com into Logitech Media Server. In LMS versions before v8.5.0 the list was automatically linked to from the Favorites list. But it remained on the server. As this server it to go away, you should import the list and store it in Logitech Media Server. Luckily all you need to do this already is there.</p>"},{"location":"getting-started/import-favorites-from-mysb/#get-the-url-for-your-favorites","title":"Get the URL for your Favorites","text":"<p>Sign in to MySqueezebox.com and head over to your Favorites list. At the bottom you'll find a link to an OPML file with your Favorites. Right click the link top copy it.</p> <p></p>"},{"location":"getting-started/import-favorites-from-mysb/#import-the-list-of-favorites-in-logitech-media-server","title":"Import the list of Favorites in Logitech Media Server","text":"<p>I Logitech Media Server click the pencil button on the Favorites menu item. This will open the list of Favorites in edit mode.</p> <p></p> <p>At the bottom you'll see a few buttons. The right most of them is the \"Import\" button. Click it to get an input field.</p> <p></p> <p>Paste the previously copied URL in to that input field. Hit Import.</p> <p></p> <p>You should now have all the Favorites from MySqueezebox.com stored in your Logitech Media Server. This works with LMS v8.5.0 and later, too.</p>"},{"location":"getting-started/migrate-from-uesr-de/","title":"UE Smart Radio (UESR) nach Squeezebox umwandeln","text":"<p>Note</p> <p>Bitte beachten Sie, dass UE Smart Radios, die in eine Squeezebox umgewandelt wurden, zwingend Lyrion Music Server (LMS). Installieren Sie dieses Programm, bevor Sie mit der Migration fortfahren.</p> <p>Um den Prozess zu starten, schalten Sie das Ger\u00e4t ganz aus, und starten Sie dann neu.</p> <p>Nach dem Neustart des Radios sollte die neue Firmware heruntergeladen werden. Es folgt ein weiterer Neustart, um diese zu installieren und das Ger\u00e4t zur\u00fcckzusetzen.</p> <p> </p> <p>W\u00e4hlen Sie die bevorzugte Sprache, und folgen Sie den Anweisungen, um das Netzwerk gem\u00e4ss ihrer Umgebung zu konfigurieren.</p> <p></p> <p>Falls Sie gefragt werden, ob Sie ein Konto auf MySqueezebox.com erstellen wollen, so k\u00f6nnen Sie das \u00fcberspringen, indem Sie den \"Zur\u00fcck\" ( ) Knopf gedr\u00fcckt halten. Sie sollten dann im Hauptmen\u00fc die M\u00f6glichkeit haben, per \"Eigene Musik\" auf ihr LMS zuzugreifen.</p> <p>Falls Sie die Mitteilung \"Verbindungsproblem - Problem bei der Verbindung mit mysqueezebox.com\" erhalten, dann k\u00f6nnen nach \"Bibliothek umschalten\" runter scrollen und sich mit ihrem LMS verbinden.</p> <p></p> <p>--&gt;</p>"},{"location":"getting-started/migrate-from-uesr/","title":"Migrate from UE Smart Radio (UESR)","text":"<p>(Deutsche Version)</p> <p>Note</p> <p>Please note that Smart Radios transitioned to Squeezebox Radios will require Lyrion Music Server. Install it before you continue the migration.</p> <p>To initiate the transition, power down the Radio, and restart it.</p> <p>After a restart the Radio should start downloading the new firmware, followed by another reboot and a factory reset:</p> <p> </p> <p>Choose your preferred language. Then follow the network setup according to your environment.</p> <p></p> <p>When asked to create an account on MySqueezebox.com, skip that step and continue without account by pressing and holding the \"Back\" ( ) button on your Radio. You should then get the main menu where you can select \"My Music\" to connect to your LMS.</p> <p>If you get an error \"Problem Connecting - There is a problem connecting to mysqueezebox.com\", you should be able to scroll down to \"Switch Library\", from where you can connect to your LMS.</p> <p></p>"},{"location":"players-and-controllers/","title":"Overview","text":""},{"location":"players-and-controllers/#hardware-based","title":"Hardware based","text":"<p>Between 2001 and 2010 Logitech (and its predecessor Slim Devices) released a series of network music players. The lineup consisted of the Squeezebox Classic, an all-in-one Squeezebox Boom, the dual unit Squeezebox Duet, the audiophile grade Transporter, the small and optionally battery powered Squeezebox Radio, and the newest of the bunch, the Squeezebox Touch.</p> <p>Additionally, the Squeezebox Controller provides control of all your players via an attractive full color display. The Controller and Receiver were sold together as the Squeezebox Duet package.</p> <ul> <li>Hardware comparison</li> <li>Squeezebox Touch</li> <li>Squeezebox Radio</li> <li>Squeezebox Boom</li> <li>Squeezebox Duet<ul> <li>Squeezebox Controller</li> <li>Squeezebox Receiver</li> </ul> </li> <li>Transporter</li> <li>Squeezebox 3rd Generation</li> <li>Squeezebox2</li> <li>Squeezebox, SB1</li> <li>SLIMP3</li> </ul> <p>The Radio, Touch and Controller software (operating system and application) is available as source code and have been modified by \"the community\". Software from Logitech: Operating system - Application Community versions: Operating system  - Application</p> <p>After 2010 the LMS community developed DIY hardware offerings.</p> <ul> <li>Squeezelite-ESP32</li> <li>SqueezeAMP - which is an implementation of Sqeezelite-ESP32</li> </ul>"},{"location":"players-and-controllers/#software-based-players","title":"Software based players","text":"<ul> <li>Squeezelite</li> <li>SqueezePlay - Source   This is based on the player and user interface in Squeezebox Radio and Squeezebox Touch</li> <li>iPeng (iOS - paid) - in-app purchase to also be a player</li> <li>SlimLibrary (iOS - paid) Announcement</li> <li>SB Player (Android - paid)</li> <li>SqueezePlayer (Android - paid)</li> <li>Squeezelite via Termux (Android)</li> </ul>"},{"location":"players-and-controllers/#specialist-operating-system-with-player-server","title":"Specialist operating system with player / server","text":"<ul> <li>piCorePlayer (Raspberry Pi)</li> <li>Daphile (x86 architecture - PC)</li> </ul>"},{"location":"players-and-controllers/#software-based-controllers","title":"Software based controllers","text":"<ul> <li>iPeng (iOS - paid) - in-app purchase to also be a player</li> <li>Material Skin and Android App</li> <li>Squeezer (Android)</li> <li>OpenSqueeze (Android)</li> <li>Squeeze Ctrl (Android - paid)</li> <li>Orange Squeeze (Android - paid)</li> <li>SqueezePad (iOS - paid)</li> </ul>"},{"location":"players-and-controllers/SLIMP3/","title":"SLIMP3","text":"<p>The SLIMP3, released in 2001, is the first generation network media player, produced by Slim Devices.  It plays MP3, WMA, AAC, FLAC, WAV, OggVorbis, Shoutcast (and more using plugins), which are streamed  over a network from Slim Devices' custom software, Squeezebox Server.</p> <p></p> <p>Though getting harder to come by, these are beautiful units. If you come across one for sale on EBay,  then buy it quick before anyone else notices! Newer versions of this device came with an actual SLIMP3 remote, as opposed to the old-school Sony remote. Slimp3uk.com (the UK outlet that no longer exists) also sold extra remotes and an 'upside-down' under  shelf mounting perspex bezel which replaced the standard display and allows you to mount the unit under a shelf).</p> <p>The SLIMP3 was succeeded by the Squeezebox.</p>"},{"location":"players-and-controllers/hardware-comparison/","title":"Hardware Comparison","text":"SLIMP3 Squeezebox Squeezebox2 Squeezebox v3/Squeezebox Classic Transporter Squeezebox Receiver Squeezebox Controller Squeezebox Boom Squeezebox Radio Squeezebox Touch Nickname SLIMP3 SB1 SB2 SB3 TP or TR SBR SBC SBB or Boom SB Radio or Radio SB Touch or Touch Released August 2001 November 2003 April 2005 November 2005 July 2006 March 2008 March 2008 August 2008 September 2009 April 2010 MSRP at Launch $249 $299 $299 $249 $1999 $149 ($399 with Controller as Duet) $299 ($399 with receiver as Duet) $299 $199 $299 Dimensions 8.5\"W x 2.5\"H x 2\"D 8.5\"W x 1.9\"H x 4.5\"D (216mm x 48mm x 117mm) Same as Squeezebox 7.6\"W x 3.7\"H x 3.1\"D (192mm x 93mm x 80mm) including stand 17\"W x 3\"H x 12.25\"D (433mm x 72mm x 311mm), optional rack mount kit L: 156mm x W: 106mm (w/o connectors); 112.5mm (w/connectors) x H: 29.25mm L: 156.2mm x W: 50.8mm x H: 18.8mm L: 79mm x W: 330mm x H: 127mm L: 90mm X W: 220mm X H: 130mm L: 80mm X W: 150mm X H: 100mm including stand Display Noritake 40x2 character VFD Original SB1: Noritake 40x2 character VFD, later upgraded as SBG: 280x16 pixels VFD, bitmapped graphics, multiple fonts, animation and images brightness control 320x32 pixel VFD, greyscale, bitmapped graphics, multiple fonts, animation, and images Same as Squeezebox2, except color is aqua-blue rather than green. (The display itself is green, but while Squeezebox2 uses a gray lens, the Squeezebox v3 lens is slightly purple, resulting in an aqua color.) Dual 320x32 displays, aqua color None 2.4\" color LCD, 16bpp, 240x320 portrait 160x32 pixel VFD, greyscale, bitmapped graphics, multiple fonts, animation, and images 2.4\" color LCD, 16bpp, 240x320 landscape 4.3\" color LCD capacitive touchscreen, 24bpp, 480x272 landscape CPU Microchip PIC16F877 microcontroller Ubicom IP2K series, 120 MHz Ubicom IP3K series, 250 MHz Same as Squeezebox2 IP3K at 325 MHz Same as Squeezebox2 Samsung S3C2412 200 MHz ARM926EJ Same as Squeezebox2 Freescale i.MX25 400 MHz ARM926EJ Freescale i.MX35 533 MHz ARM11 Ethernet Crystal CS8900A 10Mbps embedded Ethernet chip 10Mbps ethernet interface, RJ-45 twisted pair. Connects to any 10Mbps, 10/100, or 10/100/1000 network. 10/100 switched ethernet is recommended for PCM streaming Auto-detection of full and half-duplex modes. Automatic receive polarity correction. Maximum cable length: 100 meters (328 feet) True 100Mbps throughput; Shielded CAT5 RJ-45 connector; Connects to any 100Mbps or 10Mbps network; Auto-detects full duplex and half duplex modes; Automatic receive polarity correction; Maximum cable length: 100 meters (328 feet) Same as Squeezebox2 Same as Squeezebox2 Same as Squeezebox2 + Auto Uplink (Auto MDIX) None Same as Squeezebox2 + Auto Uplink (Auto MDIX) Same as Squeezebox2 + Auto Uplink (Auto MDIX) Same as Squeezebox2 + Auto Uplink (Auto MDIX) Wireless none 802.11b, external antenna; supports Shared-key WEP only (no WPA) 802.11g; supports WPA Personal, WPA2-AES and 64/128-bit WEP encryption; high speed PCI interface to radio module; bridging capability allows Ethernet devices to connect to the network through Squeezebox Wireless; internal and external antennas Same as Squeezebox2, except dual internal antennas rather than internal and external Same as Squeezebox2, except large dual external antennas Same as Squeezebox v3 802.11g with internal antenna Same as Squeezebox v3 Same as Squeezebox v3 Same as Squeezebox v3 Decoder Micronas MAS3507D Micronas MAS3539 Software-based MP3, FLAC, Ogg Vorbis, WMA (except WMA Lossless), AIFF, WAV Same as Squeezebox2 Same as Squeezebox2 but with faster CPU Same as Squeezebox2 Software-based decoders Same as Squeezebox2 Software-based decoders Software-based decoders DAC Crystal CS4334, 16-bit 44Khz Micronas MAS3539, 44.1 &amp; 48k Burr-Brown PCM1748E, 44.1 &amp; 48k Same as Squeezebox2 AKM4396, 44.1k, 48k &amp; 96k Wolfson\u00ae 24-bit WM8501,44.1kHz &amp; 48kHz Wolfson\u00ae WM8750 Texas Instruments TAS3204 Texas Instruments TLV320AIC3104 AKM4420, 44.1k, 48k &amp; 96k Buffer RAM 1Mb (8 seconds at 128Kbps) 1.8Mb (approx. 14 seconds at 128Kbps) 25Mb (approx. 200 seconds at 128Kbps) compresessed, plus 28Mb (10 seconds at 44.1 samples/sec) uncompressed Same as Squeezebox2 Same as Squeezebox2 Same as Squeezebox2 64MB Mobile SDRAM Same as Squeezebox2 64MB 16-bit bus DDR2 128MB 32-bit bus DDR2 ROM Rewritable flash program memory, EEPROM configuration memory Same Same Same Same Same 64MB NAND flash Same as Squeezebox2 128MB NAND flash 128MB NAND flash IR Standard 40Khz IR receiver Same Same, plus [Same as Squeezebox2 Same as Squeezebox2, dedicated IR in/out jacks None Built-in IR LED Standard 40Khz IR receiver Standard 40Khz IR receiver Same as Squeezebox2](IRBlasterIR-blasting]] through [GeekHole]%28GeekHole.md%29.md) IR Remote originally shipped with Sony RM-V201 universal remote user-programmed to JVC DVD command set; later shipped with 30 button IR Remote ? ? 30 button IR Remote Included 31 button IR Remote Included None (Advanced WiFi Controller included with Duet) Advanced WiFi Controller Basic 10 button IR Remote Included Optional 10 button IR Remote IR Remote Included IO Ports <ul><li>L+R RCA line-level analog output</li><li>10 Base-T Ethernet port?</li></ul> ? ? ? ? ? <ul><li>10/100Base-T Ethernet port</li><li>Line-in via 3.5 mm stereo jack</li><li>Headphone/Subwoofer out via 3.5 mm connector</li></ul> <ul><li>10/100Base-T Ethernet port</li><li>Line-in via 3.5 mm stereo jack</li><li>3.5 mm stereo headphone jack (side mounted)</li></ul> ? Wake on LAN (WoL) No No Player can wake LMS Same as Squeezebox2 Same as Squeezebox2 N/A Yes Yes Yes Yes Power supply 5V DC, 1600mA power supply, player uses 700ma (max) 5V DC, regulated Center positive, sleeve ground Connector: 2.5mm ID, 5.5mm OD, 11mm long Min supply rating: 1000mA. Switching power supply included. Input voltage range and plug style specific to shipping destination. Same as Squeezebox Same as Squeezebox2 Built-in super-linear power supplies, auto ranging 100-240VAC 9V DC, regulated, center positive, sleeve ground. Connector: 1.05mm ID, 3.5mm OD, 7mm long. Min supply rating: 550mA 1250mA Li-Ion battery, 2A switching power supply, wired charging station 12V DC, 2500mA power supply 18V DC, 1A, optional battery pack available 5V DC, 3A Protocols DHCP, ARP, IP, ICMP, UDP, Support for subnets/gateways (see documentation section on WANs), UDP-based SlimProto Same, plus TCP-based SlimProto and audio streaming Same, plus direct HTTP audio streaming and direct connection to SqueezeNetwork. Will automatically reconnect to SlimServer/SqueezeCenter. Same as Squeezebox2 Same as Squeezebox2 Same as Squeezebox2 TCP, UDP, ARP, ICMP, HTTP, DNS, DHCP, Comet Same as Squeezebox2 TCP, UDP, ARP, ICMP, HTTP, DNS, DHCP, Comet TCP, UDP, ARP, ICMP, HTTP, DNS, DHCP, Comet Latest Firmware 2.3 40 137 137 87 77 SqueezeOS 7.7.0 (Build r9546) 57 SqueezeOS 7.7.0 (Build r9546) SqueezeOS 7.7.0 (Build r9550) Compatible Server Software Version All 5.0+ (text version), 5.3.0+ (graphic display version) 6.0+ 6.0+ 6.5.0+ 7.0+ 7.0+ 7.2+ 7.4+ 7.5+"},{"location":"players-and-controllers/picoreplayer/","title":"piCorePlayer (pCP)","text":"<p>piCorePlayer is a dedicated Linux distribution targeted for the Raspberry Pi hardware. By installing extra software packages and hardware additional features can be added.</p> <p>piCorePlayer is built on a very small linux distro which is only about 12 MB, known as piCore Linux. It boots very fast and it is running entirely in RAM, it doesn't write to the SD-card unless you want to save a new setting. Therefore, pCP is very robust and you can simply pull the power without any risk of corruption of your SD card.</p>"},{"location":"players-and-controllers/picoreplayer/#download","title":"Download","text":"<p>See here for the downloads.    </p>"},{"location":"players-and-controllers/squeezebox-boom/","title":"Squeezebox Boom","text":"<p>The Squeezebox Boom was released in August 2008. It is the first all-in-one Squeezebox.</p> <p>Based on the same architecture as the Squeezebox Classic, Squeezebox Boom includes front panel controls, auxiliary line-in, a 3.5mm jack output for subwoofer or headphones, front panel controls and a powerful DSP driving stereo bi-amplified two way speakers.</p> <p>Technical details about the careful and innovative acoustic design can be found in this white paper.</p> <p>The Squeezebox Boom was discontinued in 2012. </p>"},{"location":"players-and-controllers/squeezebox-boom/#service-and-repair","title":"Service and repair","text":"<p>To open the Squeezebox Boom, you need a Torx TX10 screwdriver. Start by removing the speaker grilles. Pry with long fingernails or something that won't scratch them, and they should come off relatively easy.</p> <p>There is no need to remove the deep set screws behind the speakers, unless you want service said speakers. For display, power or control related repairs, concentrate on the screws near the middle of the unit. </p>"},{"location":"players-and-controllers/squeezebox-boom/#display","title":"Display","text":"<p>After years of use, the vacuum fluorescent display (VFD) can turn dim or patchy on some units, or go completely dark. This is either due to normal wear, or it could be a certain power supply rail failing. Read more about how to prevent or fix these problems here:</p> <ul> <li>Forum thread: Boom display not lighting up at all </li> </ul>"},{"location":"players-and-controllers/squeezebox-boom/#power","title":"Power","text":"<p>The PSU is 12V 2.5A DC, center positive. Connector: 2.5mm ID, 5.5mm OD, 11mm long. A suitable replacement is the Meanwell GST40A12-P1J.</p> <ul> <li>Forum thread: Repairing/ replacing the Boom Power Supply</li> </ul> <p>Sometimes a flaky power connection can be fixed simply by cleaning the barrel jack and corresponding plug, and applying some contact cleaner. It is worth trying before you open the unit up and reflow the solder joints.</p>"},{"location":"players-and-controllers/squeezebox-boom/#speakers","title":"Speakers","text":"<p>When a Squeezebox Boom has been used at loud volume settings with bass heavy music, the woofers can fail. Read more here:</p> <ul> <li>Forum thread: Boom speaker repair</li> <li>Forum thread: Distorted Bass, Spilt Speaker, Exact Replacement Available </li> </ul>"},{"location":"players-and-controllers/squeezebox-classic/","title":"Squeezebox Classic","text":"<p>Released at the end of October 2005, this is the 3rd Generation Squeezebox or SB3. It originally had the simple product name of Squeezebox, but has now been rebranded as Squeezebox Classic.</p> <p>Functionally, it is the same as the Squeezebox2, however a new case designed by Fred Bould and crisper display make it a fine addition to one's home.</p> <p>Note</p> <p>The 3rd Generation Squeezebox is identified as Squeezebox2 in <code>Settings-&gt;Player Information-&gt;Player Model</code>.</p>"},{"location":"players-and-controllers/squeezebox-controller/","title":"Squeezebox Controller","text":"<p>The Squeezebox Controller (SBC) was announced along with the Squeezebox Receiver in January of 2008. Not to be confused with Logitech Squeezebox Controller App which is a free software solution for using an Android phone to remote control Squeezebox units.</p> <p>The Squeezebox Controller is a handheld remote controller that uses 802.11g wireless networking to communicate with SqueezeCenter and MySqueezebox.com to control any Squeezebox or Transporter network music player. The Squeezebox Controller uses the open source SqueezeOS and SqueezePlay software. It's fully hackable and you can install applets written by the community.</p>"},{"location":"players-and-controllers/squeezebox-controller/#specifications","title":"Specifications","text":"<ul> <li>2.4\" color TFT LCD, 240x320 pixels, 16bpp</li> <li>Mechanical scroll wheel</li> <li>10 backlit buttons (play, add, go, home, back, vol-/+, rew, pause, fwd)</li> <li>Samsung ARM9 CPU (S3C2412), 200 MHz</li> <li>64MB NAND flash</li> <li>64MB mobile SDRAM</li> <li>802.11b/g wireless</li> <li>Headphone jack</li> <li>Built-in speaker</li> <li>IR LED</li> <li>SD card slot</li> <li>1250 mAh Li-Ion battery</li> <li>3 axis accelerometer (for motion sensing)</li> <li>Charging stand</li> <li>Expansion connector that brings out: serial, USB (host or device), audio out, audio in, 3.3v out, 5v in </li> </ul>"},{"location":"players-and-controllers/squeezebox-radio/","title":"Squeezebox Radio","text":"<p>Squeezebox Radio, released in September 2009, is the now defunct Squeezebox Boom's little brother, and the first full color, Squeezeplay/Linux based Squeezebox. The Radio uses the same acoustic platform as the award winning Squeezebox Boom, and uses an updated version of SqueezeOS, the software from Squeezebox Controller.</p> <p>Squeezebox Radio includes front panel controls, auxiliary line-in, headphone outputs, and front panel controls. It's host processor is a 400 MHz ARM9E-JS, with 64MB of RAM and 128MB of flash memory.</p> <p>The Radio has a two-way, bi-amplified mono speaker (as opposed to a stereo speaker) -- this provides the best sound quality of any device it's size. Much of the acoustical treatment is the same as on the Squeezebox Boom, details of which can be in this white paper. Using Lyrion Music Server, two Squeezebox Radios can be synchronized to act as one stereo player.</p> <p>An accessory pack consisting of a battery and an infrared remote control is optional. </p>"},{"location":"players-and-controllers/squeezebox-radio/#ue-smart-radio","title":"UE Smart Radio","text":"<p>Some SB Radios have been \"upgraded\" to UE Smart Radio. Follow this guide if you want to revert to Squeezebox.</p>"},{"location":"players-and-controllers/squeezebox-receiver/","title":"Squeezebox Receiver","text":"<p>The Squeezebox Receiver (SBR), announced in January of 2008, is based on the Squeezebox2/v3 architecture, but lacks a display and headphone jack and is part of the Squeezebox Duet bundle, together with the Squeezebox Controller.</p>"},{"location":"players-and-controllers/squeezebox-receiver/#specifications","title":"Specifications","text":"<ul> <li>CPU: Ubicom IP3K series, 250 MHz</li> <li>Dimensions: L: 156mm x W: 106mm (w/o connectors); 112.5mm (w/connectors) x H: 29.25mm</li> <li>Ethernet: True 100Mbps throughput; Shielded CAT5 RJ-45 connector; Connects to any 100Mbps or 10Mbps network; Auto-detects full duplex and half duplex modes; Automatic receive polarity correction; Maximum cable length: 100 meters (328 feet) + Auto Uplink (Auto MDIX)</li> <li>Wireless: 802.11g; supports WPA Personal, WPA2-AES and 64/128-bit WEP encryption; high speed PCI interface to radio module; bridging capability allows Ethernet devices to connect to the network through Squeezebox Wireless; dual internal antennas.</li> <li>Decoder: Software-based MP3, FLAC, Ogg Vorbis, WMA (except WMA Lossless), AIFF, WAV</li> <li>DAC: Wolfson\u00ae 24-bit WM8501, 44.1kHz &amp; 48kHz</li> <li>Buffer RAM: 25Mb (approx. 200 seconds at 128Kbps) compresessed, plus 28Mb (10 seconds at 44.1 samples/sec) uncompressed</li> <li>ROM: Rewritable flash program memory, EEPROM configuration memory</li> <li>Power supply: 9V DC, regulated, center positive, sleeve ground. Connector: 1.05mm ID, 3.5mm OD, 7mm long. Min supply rating: 550mA</li> <li>Supported protocols: DHCP, ARP, IP, ICMP, UDP, Support for subnets/gateways (see documentation section on WANs), UDP-based SlimProto, TCP-based SlimProto and audio streaming, direct HTTP audio streaming, direct connection to MySqueezebox.com. Will automatically reconnect to LMS.</li> <li>Compatible with LMS/SBS version 7.0+. </li> </ul>"},{"location":"players-and-controllers/squeezebox-touch/","title":"Squeezebox Touch","text":"<p>The Squeezebox Touch, released in April 2010, is the most recent product in the Squeezebox product line. It can be controlled via an IR remote, the touch screen, or by any other controller interface, like the Lyrion Music Server Web UI or the Squeezebox Controller.</p> <p>It also has the capacity to run as a server, which means that you can connect an USB hard drive with music to the Squeezebox Touch, and do without a dedicated computer or NAS to run Squeezebox Server.</p> <p>The Squeezebox Touch has a 24-bit, 96 kHz capable DAC. </p>"},{"location":"players-and-controllers/squeezebox-touch/#see-also","title":"See also","text":"<ul> <li>Setting Up Squeezebox Touch Server</li> <li>Troubleshooting Squeezebox Touch Server</li> <li>Setting up Enhanced Digital Output</li> </ul>"},{"location":"players-and-controllers/squeezebox1/","title":"Squeezebox 1","text":"<p>The Squeezebox (also known as Squeezebox 1, abbreviated SB1), released in 2003, is the second generation network media player, produced by Slim Devices. It plays MP3, WMA, AAC, FLAC, WAV, OggVorbis, Shoutcast (and more using Plugins), which are streamed over a network from Slim Devices' custom software, Lyrion Music Server, just like the SLIMP3, but this version included 802.11b wireless as an option. However, this model is only capable of WEP encryption, making its addition to newer wireless networks with WPA or other encryption impossible. The Squeezebox2 does not have this limitation. </p>"},{"location":"players-and-controllers/squeezebox1/#hardware","title":"Hardware","text":""},{"location":"players-and-controllers/squeezebox1/#ethernet-interface","title":"Ethernet Interface","text":"<p>Available on both Wireless and Wired models 10Mbps ethernet interface, RJ-45 twisted pair Connects to any 10Mbps, 10/100, or 10/100/1000 network 10/100 switched ethernet is recommended for PCM streaming Auto-detection of full and half-duplex modes Automatic receive polarity correction Maximum cable length: 100 meters (328 feet)</p>"},{"location":"players-and-controllers/squeezebox1/#power-input","title":"Power input","text":"<p>5.0V DC, regulated Center positive, sleeve ground Connector: 2.5mm ID, 5.5mm OD, 11mm long Min supply rating: 1000mA</p>"},{"location":"players-and-controllers/squeezebox1/#power-supply","title":"Power supply","text":"<p>Switching power supply included Input voltage range and plug style specific to shipping destination Power supplies are small, efficient, and do not get hot One of four styles is included depending on country</p>"},{"location":"players-and-controllers/squeezebox1/#architecture","title":"Architecture","text":"<p>120[[MHz]] network processor Integrated audio DSP with high-quality DAC 2Mb high-speed buffer Low-power design, all solid-state, fanless</p>"},{"location":"players-and-controllers/squeezebox1/#physical-general","title":"Physical General","text":"<ul> <li>Dimensions: 8.5\"W x 1.9\"H x 4.5\"D (216mm x 48mm x 117mm) Finish: Soft-touch surface, black</li> <li>Display Large vacuum fluorescent display, 280x16 pixels Bitmapped graphics, multiple fonts, animation and images Brightness control</li> </ul>"},{"location":"players-and-controllers/squeezebox1/#audio-outputs-general","title":"Audio outputs (general)","text":"<ul> <li>Digital and analog outputs All RCA connectors are gold-plated Volume control is provided for all outputs Multiple outputs may be used at the same time</li> <li>Analog RCA outputs</li> <li>Standard line-level signals Max output level: 3Vpp Signal-to-noise ratio: 94dB(A) Mute level: -113dbV Total harmonic distortion: less than 0.01%, typ: 0.003%</li> <li>Digital S/PDIF outputs</li> <li>Optical and coax digital connections Standard IEC-958 (S/PDIF) encoding Optical connector: TOSLINK 660nm Coax connector: RCA, 500mVpp into 75 ohms Sample rates: 32[[KHz]], 44.1Khz, 48Khz Audio format: linear PCM, 16 or 20 bits per sample</li> <li>Headphone output</li> <li>Standard 1/8\" jack Minimum headphone impedance: 16ohms Total harmonic distortion: less than 0.05%, typ: 0.03% Left/right crosstalk attenuation: 80dB</li> </ul>"},{"location":"players-and-controllers/squeezebox2/","title":"Squeezebox 2","text":"<p>Squeezebox2, released in 2005, is the third generation network media player, produced by Slim Devices. The Squeezebox2 did not change physically from the original Squeezebox; all of the changes were under the hood. The Squeezebox2 added support for 802.11g and WPA Personal encryption as well as native FLAC support in addition to MP3, WMA, AAC, WAV, OggVorbis and Shoutcast.</p> <p>It supports Unicode fonts and Automatic Volume Adjustment. </p>"},{"location":"players-and-controllers/squeezelite/","title":"Squeezelite","text":"<p>Squeezelite is one of several software clients available for Lyrion Music Server. Squeezelite does not have any user interface of its own and must be controlled via Lyrion Music Server's web interface or another Lyrion Music Server client. </p>"},{"location":"players-and-controllers/squeezelite/#features","title":"Features","text":"<p>Squeezelite supports gapless playback, a wide range of sample rates (44.1 kHz / 48 kHz / 88.2 kHz / 96 kHz / 176.4 kHz / 192 kHz / 352.8 kHz / 384 kHz) and direct streaming for Lyrion Music Server plugins that require it such as Spotify. It is capable of utilizing Lyrion Music Server's client synchronization feature which allows grouping clients for simultaneous, synchronized music playback. Squeezelite uses ALSA for audio output on Linux and PortAudio for other platforms.</p>"},{"location":"players-and-controllers/squeezelite/#download","title":"Download","text":"<p>Binaries compiled from the source code can be found here.</p>"},{"location":"players-and-controllers/transporter/","title":"Transporter","text":"<p>The Transporter is an audiophile grade addition to the Squeezebox family, announced July 2006 and began shipping September 2006.</p> <p>Transporter has a serial port that provides access to the Squeezebox Server command-line interface. </p>"},{"location":"plugins/","title":"Plugins","text":"<p>Lyrion Music Server is customisable through add-on components called extras or plugins. LMS comes with a number of plugins already installed (see the \"Server Settings -&gt; Plugins\" page of the LMS web interface to see them), and you can also install your own through that plugins page. </p> <p>Many people have written their own plugins and made them available to the Squeezebox community to make use of. Join us in the 3rd Party Plugins forum for a lively discussion or get started writing your own plugin. </p> <p>On LMS-Community we host a couple of plugins and applets developed by Triode and were hosted originally on Google Code and found a home here after Google pulled the plug on Google Code in 2016:</p> <ul> <li>plugin-LocalPlayer, local playback from your server computer using the Squeezelite software emulator</li> <li>plugin-DSDPlayer, plugin to listen to DSD audio files (.dff or .dsf) on LMS.</li> <li>plugin-SigGen, Signal Generator plugin for LMS.</li> <li>applet-DisplayOff, replacement for Screen Off screensaver which disables screen processing when off.</li> <li>applet-BBCRadio, listen to BBC Radio live and listen again streams on your Squeezebox.</li> <li>applet-EnhancedDigitalOutput, Logitech Touch support for external USB Dacs and up to 192kHz sampling rates with the digital output.</li> <li>applet-SetupKernelUpdater, Logitech Touch applet to install trial kernel versions to test USB audio support.</li> </ul> <p>Also your plugins can have their home on LMS-Community. If you want to host your plugin repository here, please reach out on the forums.</p>"},{"location":"plugins/directory/","title":"Available Plugins","text":""},{"location":"plugins/directory/#music-services","title":"Music Services","text":"<ul> <li> <p> 1001 Albums you must hear before you die</p> <p>A book with 1001 albums chosen by a panel of music critics to be the most important and influential in popular music. This plugin will help you listen to them all. One album a day.</p> <p> Michael Herger    -  Details</p> </li> <li> <p> Band's Campout</p> <p>Browse and play artists and tracks from bandcamp.com.</p> <p> Michael Herger    -  Details</p> </li> <li> <p> Deezer local</p> <p>Deezer for local LMS use</p> <p>philippe_44, Michael Herger    -  Details</p> </li> <li> <p> Mixcloud</p> <p>Play music from Mixcloud</p> <p>Christian Mueller, Daniel Vijge, KwarkLabs    -  Details</p> </li> <li> <p> phish.in'</p> <p>phish.in' gives you access to Live Phish Audio Streams</p> <p> Michael Herger</p> </li> <li> <p> Podcast Extensions</p> <p>Add providers to podcast</p> <p> Philippe    -  Details</p> </li> <li> <p> Pyrrha</p> <p>Daughter of Pandora</p> <p>sspiff</p> </li> <li> <p> Qobuz</p> <p>Plugin to stream from qobuz.com (needs subscription)</p> <p> Pierre Beck / Michael Herger / darrell / SamY / sveninndh    -  Details</p> </li> <li> <p> Spotify for Squeezebox. Still Spotty.</p> <p>The next generation Spotify implementation for Squeezebox.</p> <p> Michael Herger</p> </li> <li> <p> TIDAL local</p> <p>TIDAL for local LMS use</p> <p>Michael Herger, philippe_44    -  Details</p> </li> <li> <p> YouTube</p> <p>Play YouTube video</p> <p> Philippe    -  Details</p> </li> </ul>"},{"location":"plugins/directory/#internet-radio","title":"Internet Radio","text":"<ul> <li> <p> Accuradio V1.*</p> <p>Accuradio - provides access to Accuradio streams</p> <p>bpa</p> </li> <li> <p> ARD Audiothek</p> <p>Browse and listen to content of the ARD Audiothek.</p> <p> Max Zimmermann    -  Details</p> </li> <li> <p> BBC Sounds</p> <p>Complete BBC Sounds implementation as an LMS Plugin.</p> <p> ExpectingToFly    -  Details</p> </li> <li> <p> CBC Radio-Canada Fran\u00e7ais</p> <p>CBC Radio-Canada Fran\u00e7ais programme and track information</p> <p>Paul Webster</p> </li> <li> <p> CPlus</p> <p>Play Canal+ video</p> <p> Philippe    -  Details</p> </li> <li> <p> FranceTV</p> <p>Play FranceTelevisions video</p> <p> Philippe    -  Details</p> </li> <li> <p> Global Player (UK)</p> <p>Global Radio's UK Stations (Classic FM, Capital, Heart, LBC, Radio X etc) Live Radio (with pause and rewind), Catch-up, Live Playlists, Podcasts.</p> <p> ExpectingToFly    -  Details</p> </li> <li> <p> iHeart Radio - v1.2</p> <p>Listen to iHeart Radio Live US,CA,AU,NZ and MX stations</p> <p> bpa</p> </li> <li> <p> LCI</p> <p>Play LCI/TF1 video</p> <p> Philippe    -  Details</p> </li> <li> <p> Live365 V1.*</p> <p>Live365 - provides access to Live365 directory of internet stations</p> <p>bpa</p> </li> <li> <p> Planet Radio</p> <p>Programme, track and podcast information for Planet Radio / Bauer Media</p> <p>Paul Webster    -  Details</p> </li> <li> <p> Radio Favourites</p> <p>Radio Favourites - Manage your favourite radios stations. Select your station according to the current live programme.</p> <p>ExpectingToFly    -  Details</p> </li> <li> <p> Radio France</p> <p>Radio France programme and track information plus on demand replay</p> <p>Paul Webster</p> </li> <li> <p> Radio Now Playing</p> <p>Programme and track information for a variety of radio stations</p> <p>Paul Webster</p> </li> <li> <p> Radio Paradise</p> <p>Radio Paradise in lossless FLAC streaming! Give access to Radio Paradise's HD stream pictures. Get better quality artwork (requires LMS 7.8 or more recent).</p> <p> Michael Herger    -  Details</p> </li> <li> <p> RadioFeeds UK and Ireland</p> <p>Access RadioFeeds UK and Ireland on your Squeezebox including AAC+ and HLS streams (requires PlayHLS). We are the internet's most up-to-date directory of live streams for UK and Irish radio stations. Please register for a username before using at http://www.radiofeeds.co.uk/squeeze</p> <p>The AlienBBC Team and Vincent Lo    -  Details</p> </li> <li> <p> RadioNet</p> <p>RadioNet - provides access to Radio.net internet radio directory</p> <p>bpa</p> </li> <li> <p> Times Radio</p> <p>Times Radio (UK) Live and 7 Day Catch Up with on air data and images.</p> <p> ExpectingToFly    -  Details</p> </li> <li> <p> Virgin Radio (UK)</p> <p>Virgin Radio (UK) Plugin.  Access to live Virgin Radio stations and 7 day catch up listening.</p> <p> ExpectingToFly    -  Details</p> </li> <li> <p> Wefunk Radio</p> <p>Browse and play shows from wefunkradio.com</p> <p> Christian Herzog    -  Details</p> </li> </ul>"},{"location":"plugins/directory/#hardware","title":"Hardware","text":"<ul> <li> <p> AirPlay bridge</p> <p>Use AirPlay devices in LMS</p> <p> Philippe    -  Details</p> </li> <li> <p> CDplayer</p> <p>A Plugin to enable an audio CD in the PC CD drive to be played through LogitechMediaServer. Requires CDDA2WAV to be installed.</p> <p> bpa    -  Details</p> </li> <li> <p> Chromecast bridge</p> <p>Use Chromecast devices in LMS</p> <p> Philippe    -  Details</p> </li> <li> <p> Denon AVP/AVR Control</p> <p>This plugin will control a network ready Denon/Marantz AVP/AVR from the Logitech Media Server or Squeezebox.  The plugin will turn the device on/off, adjust and synchronize the volume, and optionally set the audio modes.</p> <p> Chris Couper    -  Details</p> </li> <li> <p> DenonSerial</p> <p>For Squeezeboxes connected to Denon receivers with RS232 or Ethernet interfaces, use your Squeezebox Controller, Squeezebox IR remote control, Web interface, etc. to control your Denon volume. (Transporter, Classic, Receiver)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> DSDPlayer</p> <p>Playback of DSD files (.dsf and .dff) via your Squeezebox.  Supports conversion to PCM or playback as DSD-over-PCM (DoP) for DACs supporting DoP.</p> <p> Kimmo, Triode, Ralphy</p> </li> <li> <p> IR Blaster</p> <p>IR Blaster can control other equipment (i.e. your amp) via IR sent out by your SB Classic, Transporter or SB Touch on some events (i.e. power on/off and volume up/down).</p> <p> Felix Mueller    -  Details</p> </li> <li> <p> Local Player</p> <p>Local playback from your server computer using the Squeezelite software emulator.  This plugin uses Squeezelite to playback through the audio output of your server computer.  The player can be controlled from the server's web interface or other Squeezebox controller applications.  Note: the plugin will only support servers or NAS devices with Intel or ARM processors.</p> <p> Triode</p> </li> <li> <p> Musical Fidelity M6 Encore</p> <p>Support for Musical Fidelity M6 Encore</p> <p> Michael Herger</p> </li> <li> <p> piCorePlayer Support</p> <p>Access pCP Settings pages</p> <p> Michael Herger</p> </li> <li> <p> ShairTunes2 (fork)</p> <p>Airtunes for LMS (with Windows)</p> <p> Philippe    -  Details</p> </li> <li> <p> SharkPlay</p> <p>A Plugin to enable a Griffin RadioShark2 USB FM/AM tuner to be tuned and played through LogitechMediaServer</p> <p> bpa    -  Details</p> </li> <li> <p> SqueezeESP32</p> <p>SqueezeESP32 additional player id (100/101)</p> <p> Philippe    -  Details</p> </li> <li> <p> TVH</p> <p>TVHeadend Radio Plugin for Logitech Media Server</p> <p> Andrew Jackson, Luke Easter    -  Details</p> </li> <li> <p> UPnP/DLNA bridge</p> <p>Use UPnP/DLNA players in LMS</p> <p> Philippe    -  Details</p> </li> <li> <p> WaveInput</p> <p>A Plugin to enable Windows PC audio to be captured and played through LogitechMediaServer</p> <p> Joe Bryan updated by bpa    -  Details</p> </li> </ul>"},{"location":"plugins/directory/#skins","title":"Skins","text":"<ul> <li> <p> Dark Default Skin</p> <p>Dark-themed version of the LMS Default skin. Screenshots and more information on GitHub.</p> <p>AF    -  Details</p> </li> <li> <p> iPeng</p> <p>A Skin optimized for iPhone and iPod touch. Not intended to replace any main skin for PC/MAC. See manual at http://penguinlovesmusic.com</p> <p> Joerg Schwieder    -  Details</p> </li> <li> <p> Material Skin</p> <p>Material themed skin, suitable for mobile use.</p> <p>Craig Drummond</p> </li> </ul>"},{"location":"plugins/directory/#information-metadata","title":"Information, Metadata","text":"<ul> <li> <p> Alternative Play Count</p> <p>Provides alternative play counts and skip counts that aim to reflect your true listening history. You set a time after which a song counts as played. If you skip the song before, it counts as skipped, not played. Create (scheduled) backups, restore from backups. More information, screenshots and FAQ on the GitHub page.</p> <p>AF    -  Details</p> </li> <li> <p> Database Query</p> <p>Makes it possible to define and execute custom SQL statements towards SqueezeCenter database. The result can be displayed in the browser or exported as CSV or XML files. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Date and Spelled time</p> <p> Michael Herger    -  Details</p> </li> <li> <p> Files Viewer</p> <p>Provides capability to view text files on a SqueezeBox Classic player.</p> <p> Philip Meyer    -  Details</p> </li> <li> <p> Files Viewer</p> <p> Philip Meyer    -  Details</p> </li> <li> <p> Fileviewer</p> <p> Michael Herger    -  Details</p> </li> <li> <p> FuzzyTime</p> <p>Provides a \"date and time\" screensaver that can act like a clock set \"ahead\" of the real time, and allows other plugins to display such \"fast\" times and set timers based on such displayed time. (Boom, Transporter, Classic, Squeezebox1, Slimp3, SoftSqueeze)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> Information Screen</p> <p>Configurable support plugin for Information Screen screen saver that makes it possible to switch between different kind of information. (Controller, Radio, Touch, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Music and Artist Information</p> <p>Read album reviews, artist biographies, related artists, see artist pictures and much more.</p> <p> Michael Herger    -  Details</p> </li> <li> <p> Music Information Screen</p> <p>The Music Information Screen plugin allows customization of the player's Now Playing screen and other elements.</p> <p> Michael Herger    -  Details</p> </li> <li> <p> PlayLog</p> <p>This plugin allows you you to log the tracks you listen to, either automatically or by pressing a few remote control buttons. It provides a web interface for viewing its log, linking to the web for more information about what you've listened to, and downloading XML and M3U playlists of played songs. (Boom, Classic, Slimp3, SoftSqueeze, Squeezebox1, Transporter; limited support for Radio, Receiver, and Touch)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> Radio DRS Meta Information</p> <p>Swiss Radio DRS Stream Meta Information Parser</p> <p> Michael Herger    -  Details</p> </li> <li> <p> Rating Buttons</p> <p>Use remote buttons and the default web interace to rate songs on Squeezebox Classic, Boom and Transporter</p> <p>flipflip    -  Details</p> </li> <li> <p> Ratings Light</p> <p>Takes care of rating your tracks. Set track ratings (also with plugins/apps and IR remote). Import track ratings from file tags or playlists. Export track ratings to playlist files. Create (scheduled) backups, restore from backups. Create virtual libraries for (top) rated tracks. Browse (top) rated tracks by artist or genre (browse menus). Keep track of your recently rated songs with a dedicated playlist or log file. Show rated songs for artist, album, genre, year or playlist (context menu). Support for online library tracks where possible. Includes \"Don't Stop The Music\" mixes. More information, screenshots and FAQ on the GitHub page.</p> <p>AF    -  Details</p> </li> <li> <p> SaverSwitcher</p> <p>Configure multiple screensavers for the When Off, When Playing, and When Idle modes, either having SqueezeCenter cycle through a number of plugins or allowing you to change screensavers with a single button press. Easily change screensavers, or immediately jump to the When Playing screensaver, if used with ContextMenu. Can display \"conditional\" screensavers, as with KitchenTimer (set a screensaver to display onlly if it has something to report). (Boom, Transporter, Classic, Squeezebox1, Slimp3, SoftSqueeze)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> Song Info</p> <p>A plugin to make it possible to get various information about a song, can for example be used to get artist images from LastFM (Boom, Transporter, Classic, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Song Lyrics</p> <p>A plugin that shows lyrics from chartlyrics.com and musixmatch.com through the Song Info plugin. This plugin requires that the Song Info plugin also is installed. (Boom, Transporter, Classic, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> SuperDateTime</p> <p>Displays local time, date, weather, sports, and stock information.</p> <p>G Brown, D Grossman    -  Details</p> </li> <li> <p> Title Switcher</p> <p>Makes it possible to get text information on the player screen that switches between different kind of information, for example showing artist 5 seconds and album name 5 seconds. The plugin requires that the Music Information Screen(MusicInfoSCR) plugin is installed. (Boom, Transporter, Classic, SoftSqueeze)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> TrackStat</p> <p>Store statistics such as rating, last played time and play counts so it survives a rescan and allows to to browse your library based on the statistic information. You can set the ratings via the Squeezebox player, CLI, Squeezebox Controller or web interface, ratings and statistic data can also be imported/exported from/to iTunes, Amarok and MusicIP Mixer. It also supports Dynamic Playlist plugin by adding dynamic playlists for all its statistics. Please note that TrackStat needs a bit more resources than small plugins and might also slow down startup of SqueezeCenter a bit, so you might get problems if you are running SqueezeCenter on slow hardware. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Visual Statistics</p> <p>Have a look at your library statistics with charts. Screenshots and more information on the GitHub page.</p> <p>AF    -  Details</p> </li> <li> <p> What Was That Tune?</p> <p>Keep track of what was playing while you were too busy to check the display.</p> <p> Michael Herger    -  Details</p> </li> <li> <p> XSqueezeDisplay</p> <p>Display Kodi (XBMC) Now Playing info on a Squeezebox SB2/3/Classic display.</p> <p> bossanova808</p> </li> </ul>"},{"location":"plugins/directory/#playlists","title":"Playlists","text":"<ul> <li> <p> Custom Skip</p> <p>Makes it possible to skip tracks automatically in dynamic playlists. Makes it possible to skip tracks with low ratings, zapped tracks, short tracks and much more. (Boom, Transporter, Classic, Receiver, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Custom Skip 3</p> <p>Set player-specific rules for when the current track or upcoming tracks in your playlist should be skipped and removed from the playlist automatically. More information, screenshots and FAQ on the GitHub page.</p> <p>AF    -  Details</p> </li> <li> <p> Custom Start Stop Times</p> <p>Start and stop tracks at a specific playback/song time or to skip a specific part of the song (e.g. silence) by simply adding custom start, stop or skip times to a track's comments tag. More information and screenshots on the GitHub page.</p> <p>AF    -  Details</p> </li> <li> <p> Disable Shuffle</p> <p>Allows to disable shuffle, repeat and \"add to playlist\" mode for all clients. You can allow or disable each of these modes in the plugin settings.</p> <p> Martin Johnen    -  Details</p> </li> <li> <p> Dynamic Mix</p> <p>Extension for Dynamic Playlist, using MusicIP to produce mixes.</p> <p> Philip Meyer    -  Details</p> </li> <li> <p> Dynamic Playlist</p> <p>Make it easy to create dynamic playlists for your own plugin. You simply need to implement two methods in your own plugin which returns the playlists and the next tracks. Currently at least supported by SQL Playlist plugin, TrackStat plugin, SugarCube plugin, iTunes Party Shuffle plugins and builtin support for saved static playlists. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Dynamic Playlist Creator</p> <p>Helps you create custom smart playlists (dynamic playlists) for the Dynamic Playlists plugin using templates. More information, screenshots and FAQ on the GitHub page.</p> <p>AF    -  Details</p> </li> <li> <p> Dynamic Playlists 4</p> <p>Use smart playlists (dynamic playlists) to play continuous music mixes based on your selection criteria. Comes with a number of ready-to-use dynamic playlists. More information, screenshots and FAQ on the GitHub page.</p> <p>AF    -  Details</p> </li> <li> <p> LastMix - Don't Stop The Music support using Last.fm.</p> <p>LastMix allows you to create Last.fm based mixes for the \"Don't Stop The Music\" plugin.</p> <p> Michael Herger</p> </li> <li> <p> Playlist Generator</p> <p>Makes it possible to generate static playlists based on information in SqueezeCenter database, such as ratings and played tracks. This is useful when you like to have a playlist as a .m3u file which you can export to other tools. This plugin works by itself but if you also install Custom Scan you will be able to re-generate all playlists automatically when you perform a rescan in SqueezeCenter. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Playlist Manager</p> <p>Provides functionality to add songs or albums to any chosen playlist.</p> <p> Philip Meyer    -  Details</p> </li> <li> <p> Spicefly SugarCube</p> <p>Travel through your music Library using MusicIPs recommendations. Features Include Filter, Genre, Artist and Recipe Mixing, Trackstat Integration, Artist Blocking, Genre Blocking, Custom Track Weighting Routines, Coming Up Next Display, Sleep Mode, Volume Fade and lots more.  See www.spicefly.com for Details and Change Log.</p> <p> Charles Parker    -  Details</p> </li> <li> <p> SQL Playlist</p> <p>Creates smart playlists based on SQL queries, its possible to create playlists similar to iTunes smart playlists if used together with ratings set with the TrackStat plugin. It requires Dynamic Playlist plugin. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Switch Player (Groups compatible)</p> <p>Switch Playlist between players (Triode plugin compatible with Group Player plugin)</p> <p> Philippe    -  Details</p> </li> <li> <p> TrackStat Playlist</p> <p>Makes it possible to export the TrackStat statistics such as ratings and played tracks to static playlists. This is useful when you like to manually update ratings in for example J River Media Center based on a playlist that contains all 4 rated tracks. Please note that this plugin requires you to install both TrackStat and Custom Scan plugin. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> </ul>"},{"location":"plugins/directory/#scanning","title":"Scanning","text":"<ul> <li> <p> AutoRescan</p> <p>AutoRescan detects changes to your music folder and automatically triggers a rescan of that directory if any files have been added, removed or changed.</p> <p>James Marsh; Stuart Hickinbottom</p> </li> <li> <p> Custom Browse</p> <p>Makes it possible to customize the structure, contents and sorting of the browse menus on the Squeezebox. A new browse menu is configured as a xml file containing the structure and SQL-statements. Please note that Custom Browse needs a bit more resources than small plugins and might also slow down startup of SqueezeCenter a bit, so you might get problems if you are running SqueezeCenter on slow hardware. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Custom Scan</p> <p>Make it easier to develop modules that retreive additional information about artist, album, tracks from somehere. If used together with Custom Browse plugin, the included scanning modules for LastFM and custom tags makes it possible to browse music by LastFM tags or by a custom tag. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Custom Tag Importer</p> <p>Scans track information from custom tags in your music files (incl. rating tags). More information and screenshots on the GitHub page.</p> <p>AF    -  Details</p> </li> <li> <p> LazySearch2</p> <p>Lazy Search Music is a plugin that lets you search for music without having to multi-tap each letter in the search text you're after, and displays search results \"as you type\". This plugin works with Squeezeboxes and Transporters when using a remote control featuring number keys, and doesn't affect the operation of the Controller.</p> <p> Stuart Hickinbottom    -  Details</p> </li> <li> <p> Multi Library</p> <p>Makes it possible to divide your SqueezeCenter library into different sub libraries, requires Custom Browse plugin to be able to browse the sub libraries. Please note that Multi Library needs a bit more resources than small plugins and might also slow down startup of SqueezeCenter a bit, so you might get problems if you are running SqueezeCenter on slow hardware. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Phil's Libraries</p> <p>Creates new libraries for \"Not Rated\" and \"Rated High\", dependent on Erlands TrackStat plugin</p> <p> Philip Meyer</p> </li> <li> <p> Simple Library Views</p> <p>Plugin to easily generate library views.</p> <p> Andy Hawkins    -  Details</p> </li> <li> <p> Virtual Library Creator</p> <p>Create custom virtual libraries with optional LMS browse menus using a template in a browser or by adding files with customized SQLite statements. More information, screenshots and FAQ on the GitHub page.</p> <p>AF    -  Details</p> </li> </ul>"},{"location":"plugins/directory/#tools","title":"Tools","text":"<ul> <li> <p> Auto Dim Display</p> <p>Set automatic display dimming, as for making the display go dark at bedtime and become visible again in the morning. (modified version of code from Eric Koldinger, koldware.com). Will use FuzzyTime \"displayed time\" if FuzzyTime is installed (optional).</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> Auto Repositories</p> <p>Automatically makes all third party plugin repositories that are listed on the Logitech wiki site available through Extension Downloader. The plugin doesn't actually read the wiki page directly since that would open up a security hole, instead it reads the repositories from a list available on the lms-autorepo GitHub project. New repostories added to the wiki page will be added after they have been checked so they provide serious plugins and not spam urls. (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Bookmarks</p> <p>Bookmark Plugin - Adds the possibility to bookmark audio files. Useful for radio dramas and audio books. Please define the genres for which you want bookmarks in the settings, otherwise the plugin will create bookmarks also for music albums (which you probably don't want)</p> <p> Martin Johnen    -  Details</p> </li> <li> <p> C-3PO Transcoding Helper</p> <p>Automate transcoding and resampling</p> <p> marcoc1712</p> </li> <li> <p> Client Cleanup</p> <p>Remove orphaned client configurations</p> <p> Michael Herger    -  Details</p> </li> <li> <p> Create docsets for Dash</p> <p>Export your music library as a Docset to be used with Dash (http://kapeli.com/dash)..) This allows you to quickly search your library on your Mac computer without firing up the Logitech Media Server web UI.</p> <p> Michael Herger</p> </li> <li> <p> Custom Clock Helper</p> <p>This is a helper plugin for the Custom Clock screen saver applet, it makes it possible to create your own clock styles and modify the existing styles (Controller, Radio, Touch, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Enable/disable access to server settings</p> <p>This plugins allows you to disable access to the settings pages from the Squeezebox Server's web interface.</p> <p> Michael Herger</p> </li> <li> <p> Group Players</p> <p>on-the-fly group creation</p> <p> Philippe    -  Details</p> </li> <li> <p> Hide Menus</p> <p>Makes it possible to hide standard browse menus, typically used together with Custom Browse to replace them with a customized version (Boom, Transporter, Classic, Receiver, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> Ignore files and folders</p> <p>Set a regular expression to ignore files and folders when scanning or browsing folders.</p> <p> Michael Herger</p> </li> <li> <p> Image Proxy configuration helper</p> <p>Allows you to configure external image proxies to be used by LMS.</p> <p> Michael Herger</p> </li> <li> <p> KidsPlay</p> <p>Have SqueezeCenter execute specific sets of commands for certain buttons, so you can give a child a remote control with limited function, or redefine Boom or Radio 1-6 preset buttons or the button on a Squeezebox Receiver. (Boom, Classic, Radio, Receiver, Slimp3, Squeezebox1, Transporter)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> KitchenTimer</p> <p>This plugin allows you to set simple countdown timers. Timers can be given names and saved for later re-use. Timers can be shortened or extended if needed. Includes a countdown screensaver designed for use with SaverSwitcher (only displayed if there's an active timer). (Boom, Transporter, Classic, Squeezebox1, Slimp3, SoftSqueeze)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> Music Walk With Me</p> <p>Continue your listening on a different player - easily.</p> <p> Michael Herger</p> </li> <li> <p> PlayHLS</p> <p>PlayHLS - a minimal plugin that sets ups LMS conf file to play HLS URL using a media player application - ffmpeg by default</p> <p>bpa</p> </li> <li> <p> PlayWMA</p> <p>This plugin provides support on Linux and OSX for playing Windows Media (WMA, WMA lossless, WMA Pro)  streams and files using ffmpeg. It is mainly used for player which do not support WMA nativelysuch as SliMP3, SqueezeBox1, Softsqueeze, Squeezeslave and Squeezeplay</p> <p> bpa</p> </li> <li> <p> PowerCenter</p> <p>Control X-10 and Insteon modules with a Squeezebox Controller, Radio, Touch, old-style infrared remote, or Boom or Transporter buttons. Use Insteon or X-10 to have a device turn on and off when a specific player is turned on or off. Turn a coffee pot on when an alarm sounds. (Boom, Classic, Controller, Radio, Receiver, Slimp3, SoftSqueeze, Squeezebox1, Touch, Transporter)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> PowerSave</p> <p>Power off your squeezebox after a certain amount of time (idle or otherwise)</p> <p> Jason Holtzapple</p> </li> <li> <p> SettingsManager</p> <p>Provides a Web interface for copying settings from one player to another, permanently \"linking\" settings on multiple Squeezeboxes, setting defaults for newly connected Squeezeboxes or remote /stream.mp3 clients, and importing/exporting client settings, to make it easier to manage multiple Squeezebox players. (Boom, Classic, Receiver, Slimp3, SoftSqueeze, Squeezebox1, Transporter)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> Signal Generator</p> <p>Signal Generator plugin.  Now supports Squeezeplay as well as SB2/3/Transporter.</p> <p> Triode</p> </li> <li> <p> SqueezeboxEQ</p> <p>DSP and EQ for Squeezebox server based off InguzDSP</p> <p>Jonathan Fox</p> </li> <li> <p> SqueezeDSP</p> <p>DSP for Squeezebox server version 0.1.08d) - provides EQ and DSP. Fixes to custom-conv.conf </p> <p>Jonathan Fox</p> </li> <li> <p> SyncOptions</p> <p>Gives new settings for synchronizing players: \"wait for next track\" to avoid disruptions; \"unsync at power off\"; restore local playlist after leaving a sync group. (Boom, Classic, Radio, Receiver, Squeezebox1, Slimp3, SoftSqueeze, Touch, Transporter) </p> <p> Watkins, Peter    -  Details</p> </li> </ul>"},{"location":"plugins/directory/#miscellaneous","title":"Miscellaneous","text":"<ul> <li> <p> AllQuiet</p> <p>Silence all players simply by holding the Sleep button; all players will display the name of the player that asked for silence, in case you need help. Also provides a CLI command to silence/pause all players and display a custom message. (Boom, Transporter, Classic, Squeezebox1, Slimp3, SoftSqueeze)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> BlankSaver</p> <p>Screensaver that simply makes the screen go dark -- most useful with SaverSwitcher, providing an easy way to make the display go dark without having to cycle through all brightness options. (Boom, Classic, Squeezebox1, Slimp3, SoftSqueeze)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> Community Firmware</p> <p>Community Firmware for SqueezeBox Touch/Radio/Controller</p> <p> Michael Herger, Ralph Irving</p> </li> <li> <p> ContextMenu</p> <p>ContextMenu provides a mechanism for context menus much like the right-click context menus provided by computer operating system desktop environments. Provides a way to use any regular Squeezebox remote control button, even on the Boom. Other plugins that provide ContextMenu options include AllQuiet, KitchenTimer, PlayLog, and SaverSwitcher. (Boom, Transporter, Classic, Squeezebox1, Slimp3, SoftSqueeze)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> CPAN Modules (Windows)</p> <p>Some perl modules for Windows that are required by some of my plugins (Meteo, AlbumReview, Biography)</p> <p> Michael Herger</p> </li> <li> <p> DirectPlay</p> <p>Play albums, artists or songs directly by database ID</p> <p> Jason Holtzapple</p> </li> <li> <p> License Manager</p> <p>A plugin that's required for licensed plugins to work, it will give you an overview of licensed plugins available and their current licensing status and links to pay for them. (Boom, Transporter, Classic, Controller, Radio, Touch, SoftSqueeze, SqueezePlay)</p> <p> Erland Isaksson    -  Details</p> </li> <li> <p> QuickAccess</p> <p>QuickAccess provides similar functionality as Favorites plus the possibility to pass a playlist from player to player. Just press and hold a number button and the assigned playlist starts playing. You may select playlists from each player or your server's web interface. You will also need to place the custom.map file (http://jasonholtzapple.github.io/slimdevices/plugins/quickaccess/7.3/custom.map)) in your Squeezecenter/IR directory by hand.</p> <p> Jason Holtzapple</p> </li> <li> <p> Reliable HTTP</p> <p>Reliable HTTP connection for LMS</p> <p> Philippe    -  Details</p> </li> <li> <p> SleepFade</p> <p>Allows the \"sleep\" mode for any given player to fade the music out over the entire sleep period, rather than playing at a constant volume until the last minute. (Boom, Classic, Radio, Receiver, Slimp3, SoftSqueeze, Squeezebox1, Touch, Transporter)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> Spotty Helper Application for FreeBSD 13</p> <p>Spotty Helper Application for FreeBSD 13. This plugin requires the Spotty plugin.</p> <p> Richard Herman</p> </li> <li> <p> Spotty Helper Application for Raspberry Pi Zero/1st Generation</p> <p>These are the legacy Spotty Helper Application for ARMv6 based Raspberry Pi systems (0/1). Use these if your installation used to work pre Spotty 4.5.0, but stopped with the most recent helpers.</p> <p> Michael Herger</p> </li> <li> <p> Spotty Helper Application for Solaris/Illumos</p> <p>Spotty Helper Application for Solaris/Illumos. This plug-in requires the Spotty plugin.</p> <p> Reiner Paulus</p> </li> <li> <p> Spotty Legacy Helper Application for ARMv6/7 architecture</p> <p>These are the legacy Spotty Helper Application for ARMv6/7 based systems. Use these if your installation used to work pre Spotty 2.8.0, but stopped with the most recent helpers. Please note that these legacy versions come with certain limitations, eg. cannot stream OGG directly to your player.</p> <p> Michael Herger</p> </li> <li> <p> SqueezeCLI Handler</p> <p>Plugin to provide \"squeezecli:\" and \"squeezexec:\" protocol handlers so actions can be embedded in playlists.</p> <p> Watkins, Peter</p> </li> <li> <p> SqueezeCloud</p> <p>Browse, search and play urls from soundcloud</p> <p>Robert Siebert, Daniel Vijge, Robert Gibbon, David Blackman, KwarkLabs    -  Details</p> </li> <li> <p> SqueezeScrobbler</p> <p>LastFM radio playback and scrobbling of played music. Works for regions not covered by the SlimDevices included plugin</p> <p> SqueezeScrobbler Team    -  Details</p> </li> <li> <p> StatusFirst</p> <p>Allows you to configure each player so it will display the current setting when you use the Sleep, Shuffle, Repeat, or volume keys on its remote control once, and only change the setting on subsequent button presses. Volume key behavio change does not work on Radio or Touch. (Boom,  Classic, Radio, Slimp3, Squeezebox1, Touch, Transporter)</p> <p> Watkins, Peter    -  Details</p> </li> <li> <p> VolumeLock</p> <p>Allows you to lock the analog and digital output levels of any Squeezebox, Transporter, or SliMP3. Can either prevent any changes in volume, or simply set a maximum volume. (Boom, Classic, Radio, Receiver, Slimp3, SoftSqueeze, Squeezebox1, Touch, Transporter)</p> <p> Watkins, Peter    -  Details</p> </li> </ul>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/add-locales-to-docker/","title":"Add locales to the LMS Docker container","text":"<p>If you have problems running the LMS Docker because of missing locales, you can add the following init script to the Docker config folder. In this example the locale <code>de_DE</code> is added to the container.</p> <pre><code>#!/bin/sh\n\nif locale -a | grep ^de_DE ; then\n    echo \"Locale de_DE already installed...\"\nelse\n    apt-get update &amp;&amp; apt-get -y install locales &amp;&amp; sed -i '/de_DE.UTF-8/s/^# //g' /etc/locale.gen &amp;&amp; locale-gen\nfi\n</code></pre> <p>Save this as a script called <code>custom-init.sh</code> in the configuration folder and make sure that it has the execution flag set (<code>chmod +x custom-init.sh</code>).</p>"},{"location":"reference/adding-menus-squeezeplay/","title":"Adding Menus on SqueezePlay from LMS Plugins","text":"<p>The main menu hierarchy in SqueezePlay and Squeezebox Controller is now handled differently than deeper browse menus served by SqueezeCenter to SqueezePlay. This is to allow for an easier set of methods to manage what goes into these top level menus and where. Further discussion of the difference of these two types of SqueezeCenter-&gt;SqueezePlay \"deliverables\" can be FOUND HERE.</p> <p>Currently, the main menu hierarchy nodes look roughly like this (subject to change)</p> <ul> <li>Node: Home (id = 'home')<ul> <li>Node: Music Library (id = 'myMusic')<ul> <li>Node: Search (id = 'myMusicSearch')</li> <li>Node: Random Mix (id = 'randomplay'; added via Plugin)</li> </ul> </li> <li>Node: Settings (id = 'settings')<ul> <li>Node: Screen (id = 'screenSettings')</li> <li>Node: Advanced (id = 'advancedSettings')</li> </ul> </li> <li>Node: Extras (id = 'extras')<ul> <li>Node: Games (id = 'games')</li> </ul> </li> </ul> </li> </ul> <p>These are \"nodes\", i.e., menu items that serve as \"directories\" of other items also managed out of these methods. Non-nodes managed by these methods are called \"items\", and can take the form of either action items, choice items, text input items, or text area items.</p> <p>Further ramblings on where things should go can be found on the user interface hierarchy and ControllerSettings wiki pages.</p>"},{"location":"reference/adding-menus-squeezeplay/#adding-a-node-from-an-lms-plugin","title":"Adding a node from an LMS Plugin","text":"<p>If your plugin needs to create a node, this is done through the <code>Slim::Control::Jive::registerPluginNode()</code> method.</p> <p>Any item in the main menu structure needs to have a unique 'id', which allows it to be identified and managed as needed by the Controller itself. Further, any node needs to attach itself to a node as well. For example, if you wanted to add a node for your Foobar plugin, you would do this to register this item to SqueezePlay:</p> <pre><code>  my $node = {\n                      text           =&gt; 'Foobar',\n                      weight         =&gt; 100,\n                      id             =&gt; 'pluginFoobarMenu',\n                      node           =&gt; 'settings',\n                      homeMenuText   =&gt; 'Foobar Settings',\n                      window         =&gt; { titleStyle =&gt; 'settings' },\n  };\n  Slim::Control::Jive::registerPluginNode($node, $client);\n</code></pre> <p>This will add a node with the text 'Foobar', and this node is added to the Settings node (which is in itself attached to the 'home' node). <code>homeMenuText</code> is an optional key-val pair that can set a different text string when this item is added to the top level menu via the SBC's Settings-&gt;Home Menu applet.</p> <p><code>$client</code> is an optional argument which can be sent if the node to be sent is specific to a certain player. In most cases, this argument is not necessary.</p> <ul> <li>the weight key is for ordering within the menu. You will need to look at what the weights are set to for other members of the node (default is 5) to understand where yours will be placed. Items with the same weight are sub-sorted alphabetically</li> <li><code>window</code>: parameters for the window that is opened when descending into this node can be set in a hashref to the window key. In the example above, the \"titleStyle\" is set to 'settings'\u2013 this displays a mini-icon on the right side of the title bar that is demonstrative of a settings window.</li> <li>an optional item noCustom can be sent, which disallows SqueezePlay from allowing the user to add the item to the top level menu (through Settings-&gt;Home Menu)</li> </ul>"},{"location":"reference/adding-menus-squeezeplay/#adding-menu-items-from-an-lms-plugin","title":"Adding menu items from an LMS Plugin","text":"<p>The SqueezePlay main menu items from SC plugins are sent via Slim::Control::Jive::registerPluginMenu(). Arguments to registerPluginMenu are an array of menu items, (optionally) the node that you want to add them to, and (optionally) a $client object if the menu you are sending needs to be specific to a player (in most cases you do not need to do this). If you don't send a node as a second argument, you will need to add a node key to each item in the array. Node keys in items take precedence over the function argument.</p> <pre><code>my @menu = ({\n    # localize text where possible\n    text    =&gt;  Slim::Utils::Strings::string('SOME_STRING'),\n    id      =&gt; 'pluginFoobarTweakSomething',\n    weight  =&gt; 10,\n    actions =&gt; {\n        do =&gt; {\n            player =&gt; 0,\n            cmd    =&gt; [ 'someCustomPluginCommand', 'someArgument' ],\n            params =&gt; {\n                    state =&gt; 'tweaked',\n            },\n        }\n    },\n},{\n    # localize text where possible\n    text    =&gt; Slim::Utils::Strings::string('SOME_OTHER_STRING'),\n    id      =&gt; 'pluginFoobarActivateSomething',\n    weight  =&gt; 20,\n    actions =&gt; {\n        do =&gt; {\n            player =&gt; 0,\n            cmd    =&gt; [ 'someOtherCustomPluginCommand', 'someOtherArgument' ],\n            params =&gt; {\n                    activate =&gt; '1',\n            },\n        }\n    },\n});\nSlim::Control::Jive::registerPluginMenu(\\@menu, 'settings', $client);\n</code></pre> <p>See SlimBrowse Protocol for more information on the API for actions, menu items, etc.</p>"},{"location":"reference/adding-menus-squeezeplay/#refreshing-menus-on-squeezeplay","title":"Refreshing menus on SqueezePlay","text":"<p>It is possible that your plugin might have a dynamic nature to it, and after executing some code you need to tell SqueezePlay to update its main menu structure, or at least part of it.</p> <p>With the new architecture, this is possible. Examples:</p> <pre><code># refreshes any menu items driven by SC plugins\nSlim::Control::Jive::refreshPluginMenus($client);\n\n# $client is optional here-- if it's not used menu notification will update SqueezePlay no matter what player is selected\n# refreshes entire main menu item list from SC, all nodes all items\n# this part was added in svn r15471\nSlim::Control::Jive::mainMenu($client);\n\n# refreshes just SC items in settings node (and sub nodes of settings)\nSlim::Control::Jive::playerSettingsMenu($client);\n\n# refreshes *only* the player power menu item\nSlim::Control::Jive::playerPower($client);\n\n# refreshes the \"Music Library\" node (and sub nodes of this one, including the search node)\nSlim::Control::Jive::myMusicMenu($client);\n\n# refreshes just the search node\nSlim::Control::Jive::searchMenu($client);\n</code></pre> <p>Sending the <code>$client</code> object is required for all methods except <code>refreshPluginMenus()</code>.</p>"},{"location":"reference/curtrack/","title":"How to Use <code>#CURTRACK</code> for Playlists Guide","text":"<p>The <code>#CURTRACK</code> statement is a capability in Lyrion Music Server (LMS) for playlists. You can insert a <code>#CURTRACK 0</code> as the first statement in a playlist. This statement is only effective if \"Play now (\u25b6)\" is used to start the playlist. If the \"Append to queue (+)\", \"Play next\" or shuffle is turned on the <code>#CURTRACK</code> statement will be ignored.</p> <p>When <code>#CURTRACK</code> is active (meaning the playlist was started using the \"Play now (\u25b6)\") LMS will update the number in the <code>#CURTRACK</code> statement to the track number prior to the currently playing track number. In this way you can stop the playlist, clear the play queue, play something else and at a later time restart the playlist with a \"Play now (\u25b6)\" and the playlist will resume on the track that was playing when the playlist was stopped.</p> <p>You can edit the playlist and change the number in the <code>#CURTRACK</code> statement and it will be honored the next time the playlist is started using \"Play now (\u25b6)\". If the <code>#CURTRACK</code> statement is inserted in a playlist without a number it will be ignored by LMS regardless of how the playlist is started.</p> <p>There is no need to rescan your library when you insert or modify the <code>#CURTRACK</code> statement in a playlist.</p> <p>In any other music player <code>#CURTRACK</code> will be viewed as a comment and ignored.</p>"},{"location":"reference/custom-firmware/","title":"How to install Custom Firmware for SB Radio/Touch/Controller","text":"<p>It is possible to tell Lyrion Music Server to push a specific build of Squeezebox Radio/Touch/Controller firmware out to devices that connect to it by using specially named <code>custom.&lt;device&gt;.*</code> files.</p> <p>Danger</p> <p>Load custom firmware at your own risk. While an unlikely scenario, it is possible to \"brick\" your device by loading a corrupted or buggy-because-not-formally-qualified firmware. If you get in a situation where the custom firmware you've attempted to install won't load, you may be able to recover it by booting to the previous firmware. This is done by continually holding down the rew key during boot.</p>"},{"location":"reference/custom-firmware/#loading-custom-squeezebox-firmware","title":"Loading Custom Squeezebox Firmware","text":"<ul> <li> <p>Begin by obtaining a firmware for the device that you want to load. These are typically named in the form <code>baby_X.Y.Z_rXXXX</code>.bin, where \"baby\" is the device type (Radio - use \"fab4\" for the SB Touch, or \"jive\" for the SB Controller), X.Y.Z is the software branch, and rXXXX is the subversion revision. For example, <code>baby_7.6.0_r9155.bin</code>.</p> </li> <li> <p>Rename this file <code>custom.baby.bin</code>.</p> </li> <li> <p>This bin file is actually a zip file in disguise. Inside the zip are a few files</p> </li> </ul> <pre><code>-rw-r--r--  1 user user 2.8M 2010-10-07 01:48 zImage\n-rw-r--r--  1 user user  13M 2010-10-07 01:48 root.cramfs\n-rw-r--r--  1 user user   62 2010-10-07 01:48 jive.version\n-rw-r--r--  1 user user   72 2010-10-07 01:48 board.version\n-rw-r--r--  1 user user   87 2010-10-07 01:48 upgrade.md5\n</code></pre> <ul> <li>The important file for this exercise is jive.version. This file needs to be extracted from the archive and renamed <code>custom.baby.version</code>.</li> </ul> <p>Note</p> <p>While the file in the archive is called jive.version, it is important to name the extracted file <code>custom.&lt;device&gt;.version</code>, eg. <code>custom.baby.version</code></p> <ul> <li> <p>Depending on OS, there are a variety of ways to extract this file from the zip archive.</p> <ul> <li>In windows, a utility like WinZip can be used. Modern versions of Windows can do Zip archive inspection natively, though you will have to convince windows explorer that your .bin file is actually a .zip file.</li> <li>Mac and Linux are very simple from the command line (see also scripting instructions below). This command extracts the file jive.version from the archive custom.baby.bin and prints it to STDOUT. This output is redirected to the file custom.baby.version</li> </ul> </li> </ul> <pre><code>zip -p custom.baby.bin jive.version &gt; custom.baby.version\n</code></pre>"},{"location":"reference/custom-firmware/#install-firmware-using-sd-card-or-usb-stick-sb-controllertouch","title":"Install firmware using SD card or USB stick (SB Controller/Touch)","text":"<p>If you're the owner of a Squeezebox Touch or Controller, you're lucky! Those devices feature an SD card slot or USB port (Touch only).</p> <p>You can install the firmware by copying the files to the storage medium of your choice (and availability). Insert the medium to your device, restart it. You should now be able to install the firmware from the device's Settings/Advanced/Software Update menu.</p>"},{"location":"reference/custom-firmware/#have-firmware-served-by-your-lyrion-music-server","title":"Have firmware served by your Lyrion Music Server","text":"<p>The two files <code>custom.baby.bin</code> and <code>custom.baby.version</code> need to be placed in the Cache/Updates folder of the LMS installation. See Settings/Information in LMS to see where that folder is on your system.</p> <p>Once you restart your LMS and your device connects to it, it should offer you the new firmware for installation.</p>"},{"location":"reference/database-structure/","title":"Database structure","text":"<p>Lyrion Music Server stores its data in a SQLite databases, though it is possible to also use MySQL/MariaDB. </p> <p>Warning</p> <p>SQLite is what is being tested and used by probably 99.9...% of all users. If you decide to go with MySQL/MariaDB, you're on your own. And some features (eg. fulltext search) will not be available. Good luck! And let us know about your experience.</p>"},{"location":"reference/database-structure/#databases","title":"Databases","text":"<ul> <li>library.db - Database Library.</li> <li>persist.db - Persistant Database Library, ie holds data which will survives a full clear and database rescan.</li> <li>artwork.db, cached.db, imgproxy.db - Database files used to cache specific data. They're simple key/value stores.</li> </ul>"},{"location":"reference/database-structure/#main-tables-librarydb","title":"Main tables library.db","text":""},{"location":"reference/database-structure/#albums","title":"albums","text":"<p>The albums table contains all real albums. Besides this it also contains a \"No Album\" entry which represents tracks that don't belong to any album. The name of the \"No Album\" entry will differ depending on the selected language in LMS. The tracks that doesn't belong to any real albums will be related to the \"No Album\" entry.</p>"},{"location":"reference/database-structure/#contributors","title":"contributors","text":"<p>The contributors table contains all composers, conductors, artists, album artists, bands and track artists that have contributed to the music on any track in your library.</p> <p>The contributors table also contains a special entry named \"Various Artists\" that represents all the artists that exist on a compilation album. Note that all the individual artists on compilation albums also exist as separate entries in the contributors table. There is no relation in the database between the \"Various Artists\" entry and the tracks and albums tables.</p>"},{"location":"reference/database-structure/#tracks","title":"tracks","text":"<p>The tracks table contains all tracks in your music library. These have the \"audio\" column set to 1 and the \"remote\" column set to 0. The tracks table also contains an entry for all Internet radio stations you have listened to since the last rescan. The Internet radio station entries have the \"remote\" column set to 1.</p> <p>The tracks table also contains some entries that aren't really separate songs. There will be one entry for each directory in your library; these entries will have \"audio\" set to 0 and \"content_type\" set to \"dir\". There will be one entry for each playlist, which will also have \"audio\" set to 0 and content_type set to the type of playlist. Note that the current playlist is also represented this way even though it doesn't exist as a physical m3u file on the disk. The current playlist has \"content_type\" set to \"cpl\".</p> <ul> <li>Some interesting columns in tracks table (these are not all columns, just the most interesting ones)</li> <li>title - The track title</li> <li>titlesort - The version of the track title that's used for sorting</li> <li>url - The url to the track<ul> <li>Typically something like: file:///mnt/music/First%20Album/01%20First%20Song.flac</li> <li>Is url encoded, can be unencoded to a path with http://urldecode.org</li> </ul> </li> <li>audio - Indicates if the entry represents a music file<ul> <li>1 - music file</li> <li>null - not music file</li> </ul> </li> <li>content_type - The type of entry, see above, it typically either indicates file format or playlist format</li> <li>tracknum - The track number on an album</li> <li>timestamp - The last modification time of the music file</li> <li>filesize - The size of the file in bytes</li> <li>year - Relation to years table</li> <li>secs - The length of the track in number of seconds</li> <li>bitrate - The bit rate of the track, for example 457489 for a 457kbs track</li> <li>samplerate - The sample rate of the track, for example 44100</li> <li>samplesize - The sample size of the track, for example 16</li> <li>channels - Number of audio channels used by the track</li> <li>bpm - The bpm of the track, not filled unless you have tagged your music with BPM tags</li> <li>disc - The disc number this track is available on</li> <li>remote - 1 if this isn't a local track but a remote stream, for example an internet radio station</li> <li>lossless - 1 if this is a lossless compressed track, else 0</li> <li>lyrics - The lyrics of the track, not filled unless you have tagged your music with lyrics information</li> <li>album - Relation to albums table</li> </ul>"},{"location":"reference/database-structure/#tracks_persistent","title":"tracks_persistent","text":"<p>The tracks_persistent table contains additional statistics information about a track, such as play count, rating and last played time. This table will survive a full rescan as long as you have musicbrainz tags or haven't moved or renamed a music file. During scanning the entries in the tracks table will be re-connected to the saved entries in the tracks_persistent table.</p> <p>The tracks_persistent table was added in SqueezeCenter 7.1.</p>"},{"location":"reference/database-structure/#genres","title":"genres","text":"<p>The genres table contains all the genres in your music library.</p>"},{"location":"reference/database-structure/#years","title":"years","text":"<p>The years table contains an entry for each year specified in a track tag.</p>"},{"location":"reference/database-structure/#comments","title":"comments","text":"<p>The comments table contains all the comment tags in the tracks in your library. There will be one entry for each comment tag. If you have specified several comment tags in a single track, there will be a separate entry for each comment.</p>"},{"location":"reference/database-structure/#many-to-many-associations","title":"Many to many associations","text":""},{"location":"reference/database-structure/#contributor_track","title":"contributor_track","text":"<p>The contributor_track table contains the relation between a track and a contributor. Each entry also has a role attribute indicating the role the contributor had. Some examples of existing roles are:</p> <ul> <li>Artist -&gt; 1</li> <li>Composer -&gt; 2</li> <li>Conductor -&gt; 3</li> <li>Band -&gt; 4</li> <li>Album artist -&gt; 5</li> <li>Track artist -&gt; 6</li> </ul> <p>Contributors and tracks are joined with:</p> <p><code>contributor_track.contributor = contributors.id and contributor_track.track = tracks.id</code></p>"},{"location":"reference/database-structure/#contributor_album","title":"contributor_album","text":"<p>The contributor_album table contains the relation between an album and a contributor. Like the contributor_track table, the contributor_album table also contains a role attribute indicating the role the contributor had on one or several tracks on an album.</p> <p>The contributor_album table is just a shortcut table to get better performance when browsing from artists to albums. All the information already exists in the contributor_track table but is compiled together to a summary view in the contributor_album table.</p> <p>Contributors and albums are joined with:</p> <p><code>contributor_album.album = albums.id and   contributor_album.contributor = contributors.id</code></p>"},{"location":"reference/database-structure/#genre_track","title":"genre_track","text":"<p>The genre_track table contains the relation between genres and tracks. This is the table to use if you need to know which genres a track belongs to, or which tracks exist within a specific genre.</p> <p>Genres and tracks are joined with:</p> <p><code>genre_track.genre = genres.id and   genre_track.track = tracks.id</code></p>"},{"location":"reference/database-structure/#playlist_track","title":"playlist_track","text":"<p>The playlist_track table contains the relation between playlists and tracks. This table is used if you need to know the tracks in a specific playlist.</p> <p>Playlists and tracks these are joined with:</p> <p><code>playlist_track.playlist = tracks.id and   playlist_track.track = tracks.url</code></p>"},{"location":"reference/database-structure/#many-to-one-associations","title":"Many to one associations","text":""},{"location":"reference/database-structure/#relation-between-track-and-album","title":"Relation between track and album","text":"<p>There is no separate relation table for the relation between albums and tracks; instead this relation is represented with the \"album\" column in the tracks table.</p> <p>Albums and tracks are joined with:</p> <p><code>tracks.album = albums.id</code></p>"},{"location":"reference/database-structure/#relation-between-album-and-year","title":"Relation between album and year","text":"<p>There is no separate relation table for the relation between years and albums; instead this relation is represented with the \"year\" column in the albums table.</p> <p>Years and albums are joined with:</p> <p><code>albums.year = years.id</code></p>"},{"location":"reference/database-structure/#relation-between-track-and-year","title":"Relation between track and year","text":"<p>There is no separate relation table for the relation between years and tracks; instead this relation is represented with the \"year\" column in the tracks table.</p> <p>Years and tracks are joined with:</p> <p><code>tracks.year = years.id</code></p>"},{"location":"reference/database-structure/#relation-between-track-and-comment","title":"Relation between track and comment","text":"<p>There is no separate relation table for the relation between tracks and comments; instead this relation is represented with the \"track\" column in the comments table.</p> <p>Tracks and comments are joined with:</p> <p><code>comments.track = tracks.id</code></p>"},{"location":"reference/database-structure/#relation-between-album-and-main-artist","title":"Relation between album and main artist","text":"<p>There is a special relation between albums and main artists. Note that this relation can be a bit random on compilation albums.</p> <p>Albums and main artists are joined with:</p> <p><code>albums.contributor = contributors.id</code></p>"},{"location":"reference/database-structure/#extra-tables","title":"Extra tables","text":"<p>There are a number of extra table in the database that contain some different kinds of state information. These tables follow below and they do not contain any music library information; they are just needed to make LMS work.</p>"},{"location":"reference/database-structure/#metainformation","title":"metainformation","text":"<p>Contains some different meta information about the database, for example the last time a rescan was performed, and an indication whether scanning is currently in progress.</p>"},{"location":"reference/database-structure/#dbix_migration","title":"dbix_migration","text":"<p>Contains the current database structure version. This is used to determine whether the database structure needs to be updated when upgrading to a new LMS version.</p>"},{"location":"reference/database-structure/#progress","title":"progress","text":"<p>New in LMS 7.0 (i.e. SqueezeCenter). Contains the progress of the currently active scanning process. This is used for the progress bar during the scanning operation.</p>"},{"location":"reference/database-structure/#database-creation","title":"Database creation","text":"<p>The LMS database is created automatically at first LMS startup. The database is created with the schema_*_up.sql scripts in the SQL/SQLite or SQL/mysql directory below the LMS installation directory. The scripts will run in sequence, starting with the script with a number greater than the current database structure version.</p> <p>As an example: if the current database version is 3, the schema_4_up.sql and schema_5_up.sql scripts will be executed. If the database doesn't exist it will execute all the *_up.sql scripts.</p>"},{"location":"reference/database-structure/#sample-queries","title":"Sample queries","text":"<p>The following sections lists a number of different sample SQL statements that retrieve different kinds of information from the database. Please note that the corresponding statements used directly by LMS might be different than the statements shown below; these are just samples.</p>"},{"location":"reference/database-structure/#get-artists-in-the-database","title":"Get artists in the database","text":"<p>The simple way to retrieve all contributors independent of roles in the database is a query like this</p> <pre><code>select * from contributors\n     order by namesort\n</code></pre> <p>However, you should be aware of that if you have removed, re-tagged or renamed some track in your library and used the rescanning option \"New and changed files\", there could be artists in the result that no longer have any tracks in the LMS database. The above query will also return the special \"Various Artists\" entry that doesn't correspond to a single artist.</p> <p>A query like this will solve this problem:</p> <pre><code>select contributors.* from contributors, contributor_album\n     where\n         contributors.id = contributor_album.contributor\n     group by contributors.id\n     order by contributors.namesort\n</code></pre> <p>If you only wanted the contributors that have the role \"artist\", \"album artist\" or \"track artist\", you would instead use a query like:</p> <pre><code>select contributors.* from contributors, contributor_album\n     where\n         contributors.id = contributor_album.contributor and\n         contributor_album.role in (1, 5, 6)\n     group by contributors.id\n     order by contributors.namesort\n</code></pre> <p>In the same way you can get all the composers with a query like:</p> <pre><code>select contributors.* from contributors, contributor_album\n     where\n         contributors.id = contributor_album.contributor and\n         contributor_album.role = 2\n     group by contributors.id\n     order by contributors.namesort\n</code></pre> <p>If you want to ignore artists that only exist on compilation albums, you would use something like:</p> <pre><code>select contributors.* from contributors, contributor_album, albums\n     where\n         contributors.id = contributor_album.contributor and\n         contributor_album.role in (1,5,6) and\n         contributor_album.album = albums.id and\n         albums.compilation is null\n     group by contributors.id\n     order by contributors.namesort\n</code></pre> <p>If you only want to list only those artists that exist on compilation albums, you would use something like:</p> <pre><code>select contributors.* from contributors, contributor_album, albums\n     where\n         contributors.id = contributor_album.contributor and\n         contributor_album.role in (1,5,6) and\n         contributor_album.album = albums.id and\n         albums.compilation = 1\n     group by contributors.id\n     order by contributors.namesort\n</code></pre>"},{"location":"reference/database-structure/#get-albums-in-the-database","title":"Get albums in the database","text":"<p>The easiest way to get all albums in the database is with a query like this:</p> <pre><code>select * from albums\n     order by titlesort\n</code></pre> <p>However, you should be aware that if you have removed, re-tagged or renamed some track in your library and used the rescanning option \"New and changed files\", there could be albums in the result that no longer have any tracks in the LMS database. The query will also return the special \"No Artist\" entry that doesn't correspond to a single artist.</p> <p>The following query only returns the albums that really have tracks in the database:</p> <pre><code>select albums.* from albums, tracks\n     where\n         tracks.album = albums.id and\n         tracks.audio = 1\n     group by albums.id\n     order by albums.titlesort\n</code></pre> <p>If you want to ignore the compilation albums, you would instead use something like this:</p> <pre><code>select albums.* from albums, tracks\n     where\n         tracks.album = albums.id and\n         tracks.audio = 1 and\n         albums.compilation is null\n     group by albums.id\n     order by albums.titlesort\n</code></pre> <p>Or if you only want the compilation albums:</p> <pre><code>select albums.* from albums, tracks\n     where\n         tracks.album = albums.id and\n         tracks.audio = 1 and\n         albums.compilation = 1\n     group by albums.id\n     order by albums.titlesort\n</code></pre> <p>To retrieve all albums within the genres 'Pop' or 'Rock' you would use a query like this:</p> <pre><code>select albums.* from albums, tracks, genre_track, genres\n     where\n         tracks.album = albums.id and\n         tracks.id = genre_track.track and\n         genre_track.genre = genres.id and\n         genres.name in ('Pop','Rock') and\n         tracks.audio = 1\n     group by albums.id\n     order by albums.titlesort\n</code></pre> <p>To retrieve all albums from year 2000 and forward you would use a query like:</p> <pre><code>select * from albums\n     where\n         year &gt;= 2000\n     order by titlesort\n</code></pre>"},{"location":"reference/database-structure/#ordering-albums-retreived-from-the-database","title":"Ordering albums retreived from the database","text":"<p>For queries that return albums it also gets interesting to order the result in various ways.</p> <p>All albums ordered by the album title sort tag and then disc number:</p> <pre><code>select * from albums\n     order by titlesort, disc\n</code></pre> <p>All albums ordered by the year in descending order:</p> <pre><code>select * from albums\n     order by year desc, titlesort, disc\n</code></pre> <p>All albums ordered by main artist and then year in descending order:</p> <pre><code>select albums.* from albums\n     left join contributors on\n         albums.contributor = contributors.id\n     group by albums.id\n     order by contributors.namesort, albums.year desc, albums.disc\n</code></pre> <p>The reason we need to use the \"left join\" syntax in the above statement is that there can be albums without a main artist.</p>"},{"location":"reference/database-structure/#get-tracks-in-the-database","title":"Get tracks in the database","text":"<p>To get all locally stored tracks in the database you can use a query like this:</p> <pre><code>select * from tracks\n     where\n         audio = 1\n     order by titlesort\n</code></pre> <p>The above query returns the tracks ordered by the titlesort field; you would probably also want the tracks ordered by album. To accomplish this you would instead use something like:</p> <pre><code>select tracks.* from tracks, albums\n     where\n         tracks.album = albums.id and\n         tracks.audio = 1\n     group by tracks.id\n     order by albums.titlesort, tracks.disc, tracks.tracknum\n</code></pre> <p>Or maybe even order the albums by the main artist with something like:</p> <pre><code>select tracks.* from tracks\n     join albums on\n         tracks.album = albums.id\n     left join contributors on\n         albums.contributor = contributors.id\n     where\n         tracks.audio = 1\n     group by tracks.id\n     order by contributors.namesort, albums.titlesort, tracks.disc, tracks.tracknum\n</code></pre>"},{"location":"reference/enable-ssh/","title":"SSH Access to SB Radio/Touch/Controller and UE Smart Radio","text":"<p>SSH access is only available on devices running the SqueezeOS platform. This is not the case for Squeezebox Classic/Boom/Transporter/Receiver.</p> <p>Using SSH on *nix/macOS</p> <p>If you are using the original firmware on the SB Radio/Touch/Controller devices you will find that you will need some additional ssh parameters to connect to the device as the algorithms used by these elderly devices haven't aged well and are deprecated. These extra parameters are not needed if you are using the community firmware.</p> <pre><code>ssh -c aes128-cbc -oHostKeyAlgorithms=+ssh-rsa,ssh-dss -oKexAlgorithms=+diffie-hellman-group1-sha1 root@[IP address or hostname of your device]\n</code></pre> <p>Please note that some Linux distributions wouldn't even install support for the necessary algorithms any more. But these can be re-enabled. See eg. this document for Fedora.</p>"},{"location":"reference/enable-ssh/#squeezebox-radio-touch-controller","title":"Squeezebox Radio / Touch / Controller","text":"<p>On the Squeezeboxen SSH can be enabled in Settings/Advanced Settings/Remote Access. Follow the instructions on screen.</p>"},{"location":"reference/enable-ssh/#ue-smart-radio","title":"UE Smart Radio","text":"<p>On the UE Smart Radio enabling SSH is a little more complicated. Many of those useful developers features have been hidden in a Developers menu:</p> <ul> <li> <p>Go to the \"Settings\" menu</p> </li> <li> <p>Press both the \"Home\" and the \"&gt;&gt;\" (forward) button simultaneously.</p> </li> <li> <p>Now there should be an additional \"Developer\" menu at the bottom of the \"Settings\" menu.</p> </li> <li> <p>In the Developer menu, go to \"Remote Access\".</p> </li> <li> <p>Follow the instructions on screen.</p> </li> </ul>"},{"location":"reference/home-vs-slimbrowse/","title":"Home Menu Items versus SlimbrowseItems","text":""},{"location":"reference/home-vs-slimbrowse/#comparing-the-two-types-of-itemsmenus-delivered-from-squeezecenter-to-squeezeplay","title":"Comparing the two types of items/menus delivered from SqueezeCenter to SqueezePlay","text":"<p>There are two types of items delivered from SqueezeCenter to Jive/Controller/SqueezePlay (hereafter referred to as Squeezeplay):</p> <ul> <li>\"Home Menu\" items (delivered as individual items) Further discussion</li> <li>\"Slimbrowse\" items (delivered as full menus) Further discussion</li> </ul>"},{"location":"reference/home-vs-slimbrowse/#home-menu-items","title":"Home Menu Items","text":"<p>\"Home menu\" items are those items that are managed by Squeezeplay's jive.ui.HomeMenu class, and includes not only items in the top-level menu, but miscellaneous \"nodes\" below that level. Examples of \"Home menu\" items are Home-&gt;Music Library-&gt;Genres, Home-&gt;Settings-&gt;Screen-&gt;Wallpaper, and Home-&gt;Internet Radio.</p> <p>Each \"home menu\" items requires a unique ID that is used in the management of these items, as well as a 'node', which tells Squeezeplay where to place the item. Current examples of home menu nodes are 'home', 'settings', 'advanced', 'myMusic', and a special case 'hidden', which I'll talk about below.</p> <p>If you are adding items through a Plugin via Slim::Control::Jive::registerPluginMenu, these are \"home menu\" items. Further, all home menu items (except one special case: settings, which by design cannot be hidden from view) can be added to the top level via the CustomizeHomeMenu applet, available in the most current 7.1 firmware.</p>"},{"location":"reference/home-vs-slimbrowse/#slimbrowse-items","title":"Slimbrowse Items","text":"<p>\"Slimbrowse\" items are those menus delivered from SqueezeCenter to SqueezePlay via a specific cli command. Examples of this are Home-&gt;Music Library-&gt;Artists, Home-&gt;Music Library-&gt;Genres, and drilling down further Home-&gt;Music Library-&gt;Genres-&gt;Acid Jazz-&gt;etc.</p> <p>Slimbrowse items, unlike home menu items, are not available for customizing into the top level menu. So, if your plugin creates an item that calls a custom cli command to produce the submenu selections, the top item from your plugin can be added to the top level Squeezeplay menu, but not the submenu items that are returned from the cli command.</p> <p>The menus that are returned from Home-&gt;Internet Radio and Home-&gt;Music Services menus on Squeezeplay are actually Slimbrowse items, so in order to give the user the ability to add/remove individual items like Pandora, Rhapsody, Staff Picks, RadioTime, SHOUTcast, etc.-- this required some new code on the SqueezeCenter side. In order to make these items configurable for adding to the top level menu, but otherwise not displayed as individual home menu items, they are sent over as a member of a new 'hidden' node. node=hidden items by default are not displayed.</p>"},{"location":"reference/installing-applets/","title":"Installing SqueezePlay Applets","text":"<p>You may download and install these applets on your Squeezebox Controller to add extra capabilities or fun additions such as games. You can also read a guide to developing new applets.</p> <p>Currenty there are two ways to install an applet on your Squeezebox Controller:</p> <ul> <li>via applet installer (preferred)</li> <li>manual installation.</li> </ul> <p>For the applet installer to work, applet developers have to provide a repository-URL pointing to their applets. Many older applets unfortunately are not listed in a repository, that's why manual installation often is the only way to get an applet on the controller.</p>"},{"location":"reference/installing-applets/#applet-installer","title":"Applet Installer","text":"<p>Installing an applet is a two step process.</p> <ul> <li> <p>You need to have a 'repository-URL' which points to a repository XML file. See Repositories for some existing respositories you can use. You need to configure this on your Lyrion Music Server.</p> </li> <li> <p>On your SqueezeBox-Server (http://ServerName:9000) navigate to the settings-screen.</p> </li> <li>Select the 'Manage Plugins' tab</li> <li>In the text input area next to 'Additional Repositories', put the repository-URL of your applet(s) and click 'Apply'. If you have more than repository URL add the first and click apply, and then a new text input area will be shown. Continue adding respository urls as required.</li> </ul> <p></p> <p>You need to configure this on your Squeezebox-Controller or SqueezePlay!</p> <ul> <li>Navigate to Settings -&gt; Advanced -&gt; Applet Installer.</li> <li>In this menu you should see each of the applets which Squeezebox-Server has installed together with its version.</li> <li>Select which applets you wish to install on the remote and then select Install. This will cause the applets to be downloaded and installed. After they are installed the SqueezeBox Controller will restart (on the SqueezePlay you will need to shut it down and restart it manually).</li> <li> <p>Once restarted the new applets should be available, normally under the Extras menu (but it depends on the applet)</p> <p>If you can't see this menu you might have to activate it. Just go under 'Settings-&gt;Home Menu' where you will be able to activate the 'Extras'-menu</p> </li> </ul>"},{"location":"reference/installing-applets/#manual-installation","title":"Manual installation","text":"<p>If you want to install an applet manually you can do the following:</p> <ul> <li>Enable ssh access on the SBC. On the SqueezeBox Controller go to the Settings-&gt;Advanced-&gt;Remote Login and checking \"Enable SSH\". When you enable SSH you will be given a password (my default was 1234) and it will also give you the IP Address of the controller. Write both down.</li> </ul> <p>Note</p> <p>SSH is \"secure shell\" and it just a way of connecting remotely to computers and other devices.</p> <p>SCP is secure copy, which is a way of uploading/downloading files to computers and other devices.</p> <ul> <li>download WinSCP or some other SCP client - see this example of connecting to the SBC with WINSCP</li> <li>connect to the SCP and login as root with the password it gave you when you enabled ssh</li> <li>extract the zip file for the applet on your PC</li> <li>look in the extracted files and you will find another zip file</li> <li>extract that zip file</li> <li>use SCP to copy the folders from the second zip file into /usr/share/jive/applets on the SBC</li> <li>restart Squeezeplay</li> </ul> <p>Normally the applet will show up in the Extras menu but it can appear in the main menu as well. Source: http://forums.slimdevices.com/showthread.php?t=47798</p>"},{"location":"reference/lyrion-music-server/","title":"Lyrion Music Server","text":"<p>Lyrion Music Server is the server software that powers audio players from Logitech (formerly known as Slim Devices), including Squeezebox 3rd Generation, Squeezebox Boom, Squeezebox Receiver, Transporter, Squeezebox2, Squeezebox and SLIMP3.  The LMS server also powers various open-source clients using the same protocols.</p> <p>Before version 9.0 LMS was known as Logitech Media Server, and before 7.7 LMS was known as Squeezebox Server (version 7.4 to 7.6) and SlimServer (before 7.4). Version 7.7 was the last version released by Logitech, from version 7.8 and onwards LMS had been released by the LMS Community.</p> <p>Lyrion Music Server is Open Source Software and written in Perl. Lyrion Music Server runs on pretty much any platform that Perl runs on, including Linux, Mac OSX, Solaris and Windows.</p> <p>Sourcecode can be found on  Github: https://github.com/LMS-Community/slimserver.</p>"},{"location":"reference/lyrion-music-server/#version-history","title":"Version history","text":""},{"location":"reference/lyrion-music-server/#lms-85","title":"LMS 8.5","text":"<p>Current stable. Initially released on March 14, 2024.</p> <p>This is the last Logitech branded release. It's main change compared to the previous version is the removal of all MySqueezebox.com integration.</p> <p>Release notes</p>"},{"location":"reference/lyrion-music-server/#lms-84","title":"LMS 8.4","text":"<p>Initially released on Feb 8, 2024.</p> <ul> <li>Add support for Release Types (see eg. on MusicBrainz).</li> <li>Add plugins for ClassicalRadio.com, DI.fm, JazzRadio.com, RadioTunes.com, RockRadio.com, ZenRadio.com.</li> <li>\u200bAdd an optional artist albums view which groups albums by release type and contribution.</li> <li>New \"Advanced Tag View\" plugin allows you to show more information in the Track Info menu, without the need to drill down to \"View Tags\"</li> <li>\u200bAdd experimental support for Windows 64-bit\u200b</li> </ul> <p>Release notes, Announcement</p>"},{"location":"reference/lyrion-music-server/#lms-83","title":"LMS 8.3","text":"<p>Initially released on Nov 4, 2022.</p> <p>Logitech Media Server v8.3.0 is mostly a maintenance release without any major new features. Oh, hold on... unless you're a Mac user! Apple provided a good reason to get LMS v8.3.0 out: macOS 13 Ventura removed the Perl version we've relied on for about a decade. So, the new feature is:</p> <ul> <li>Support for macOS 13 (native Apple Silicon as well as Intel)</li> </ul> <p>But there are a ton of changes, smaller or bigger. A few noteworthy changes:</p> <ul> <li>Updated French, British English, Czech, and Dutch translations.</li> <li>Improved indexing performance for the Fulltext Search of large playlists (thousands of tracks).</li> <li>Improved security for the MySqueezebox.com integration.</li> <li>Improved JavaScript support for the Settings pages in the Classic/Light skin (and thus Material).</li> <li>More robust https streaming for some very long (but finite) streams and larger files (hires).</li> <li>Removal of video/picture support.</li> </ul> <p>Other important changes are the removal of PowerPC, Sparc, i386 (Mac), and really old Perl versions are no longer part of the builds.</p> <p>Release notes</p>"},{"location":"reference/lyrion-music-server/#lms-82","title":"LMS 8.2","text":"<p>Initially released on Aug 3, 2021. This release comes with a lot of improvements, not big new features. But many of them address long standing pain points. Some of the highlights are:</p> <ul> <li>Improved podcast support (search, more robust playback)</li> <li>Improved online music integration (smarter matching of artists, track stats support)</li> <li>Improved shuffling method to give more \"balanced\" results</li> <li>Add Balance setting for players which support it</li> <li>Improved robustness for online streams</li> <li>Add resampling for Ogg/Flac streams</li> </ul> <p>Release notes</p>"},{"location":"reference/lyrion-music-server/#lms-81","title":"LMS 8.1","text":"<p>Initially released on Dec 23, 2020, LMS 8.1 brings the following changes:</p> <ul> <li>Support for Deezer lossless (FLAC) streaming</li> <li>Improvements to the transcoding framework to allow protocol handlers to enforce transcoding (eg. TIDAL lossless)</li> <li>Support for macOS 11 Big Sur and Apple Silicon (M1 CPU - using Rosetta)</li> <li>Optionally allow installation of plugins which were targeted at Logitech Media Server 7.*</li> </ul> <p>Other important changes are the removal of the ReadyNAS NV/Duo/Pro devices, and Perl 5.8 in general. We actually broke Perl 5.8 compatibility somewhere around LMS 7.9.3. These platforms haven't been working correctly since then. Removing them thus doesn't really change anything. ReadyNAS users please note: this is really only about the old, legacy, generation 1/2 Raidiator v4 based devices. Any recent ReadyNAS unit, which was based on Debian, should still continue to work as before. Good or bad.</p> <p>Release notes</p>"},{"location":"reference/lyrion-music-server/#lms-80","title":"LMS 8.0","text":"<p>Initially released on Nov 22, 2020, LMS 8 adds a lot of improvements for users of online music. But there's more:</p> <ul> <li>Import your online music library to your music library. No matter whether your favorite album or artist is stored on your disk, or on some music service - it shows up right where you expect \"your music\" to be.</li> <li>https is the new http: most web sites nowadays are delivered over the secure https protocol. And so are more and more online music streams. Logitech Media Server 8 allows you to continue to listen to your favorite stations, as well as music services like TIDAL.</li> <li>Allow to paste TIDAL and Deezer web links to the Tune In field (or use the corresponding CLI command) to play those items.</li> <li>Plugins now can use SOCKS to access online sources.</li> <li>Helper applications (faad, flac) have been updated, as well as some of the Perl libraries, like Audio::Scan (not all supported platforms).</li> <li>Docker is everywhere. A Logitech Media Server image is now available on Docker Hub.</li> <li>Updated translations for Swedish and Dutch.</li> </ul> <p>Release notes</p>"},{"location":"reference/lyrion-music-server/#lms-79","title":"LMS 7.9","text":"<p>Initially released on Mar 8, 2017. LMS 7.9 comes with lots of improvements, both under the hood as well as in your preferred user interface:</p> <ul> <li>Fulltext search</li> <li>Native support of DSD</li> <li>Customizable browse modes</li> <li>Direct access to other source (LMS or UPnP)</li> <li>Playback of local tunes without adding them to the library</li> <li>Filtered views</li> </ul> <p>Release notes</p>"},{"location":"reference/lyrion-music-server/#lms-78","title":"LMS 7.8","text":"<p>Initially released on Mar 27, 2014, this is the first community supported version of LMS. Major improvements over the \"official\" 7.7.x version:</p> <ul> <li>Improved Podcast plugin to support all players</li> <li>Add new scanner step to discover new/changed/removed standalone artwork for album covers</li> <li>Improved Internet Radio integration to work independently from mysb.com if needed</li> <li>Support for Ogg FLAC in the server and Squeezeplay-based players</li> <li>Added support for setting alarm playlist shuffle mode (thanks hickinbottoms!)</li> <li>Volume adjustment for internet music services</li> <li>Add Triode's LocalFile 'loc' ProtocolHandler support for squeezelite.</li> </ul> <p>Release notes</p>"},{"location":"reference/music-service-plugin/","title":"Music Service Plugin Implementation Guide","text":"<p>This documen tries to outline how to implement an integration with a music service. It's base on the experience made with eg. Spotty or Qobuz. Check out one of those plugins if you want to get more ideas.</p>"},{"location":"reference/music-service-plugin/#filemodule-organization","title":"File/Module Organization","text":"<p>Here's a rough layout of a typical folder and file structure for a plugin:</p> <ul> <li><code>Plugins/MyMusicService</code><ul> <li><code>Plugin.pm</code>: this is the entry point to the plugin. It deals with setting up all dependencies and gives shared code a home. It initializes the settings, importer, protocol handler etc.</li> <li><code>API.pm</code>: this module implements the API interaction with the music service. In many cases we want to further split it up (see below) for async (server) and sync (scanner/importer) modes. In this case I put shared code in <code>API.pm</code>, eg. URLs, data manipulation routines etc. I usually provide one method per API call.<ul> <li><code>API/Async.pm</code>: these API call implementations use LMS' own <code>Slim::Networking::SimpleAsyncHTTP</code> class to run non-blocking requests. This is crucial to not interrupt playback, as LMS is single threaded.</li> <li><code>API/Sync.pm</code>: in order to run synchronous API calls you can use <code>LWP::UserAgent</code>. This is important for eg. the importer code, as the scanner doesn't provide the aforementioned support for async calls.</li> </ul> </li> <li><code>OPML.pm</code> (or <code>Browse.pm</code>): the <code>OPML</code> name is a bit outdated. What I put in there is the code which provides the browse modes, the navigation tree. All API calls done within this module must use async HTTP requests to not block the server. I try to separate out navigation tree nodes into their own subs. Typically such a sub would call the API to get back the raw data, then transform this data into navigation elements.</li> <li><code>ProtocolHandler.pm</code>: the protocol handler class deals with much of the playback (and deserves its own document...). LMS uses pseudo protocols like <code>spotty://</code> or <code>qobuz://</code> to deal with tracks and other aspects of these services.</li> <li><code>Settings.pm</code>: handle configuration tasks for the plugin. Sometimes there's more to it, eg. if special pages or handlers are required for authentication etc. In this case we can have additional modules in the <code>Settings</code> namespace.<ul> <li><code>Settings/Auth.pm</code>: another handler to deal with authentication</li> </ul> </li> <li><code>Importer.pm</code>: this module is used when a music service can be imported into the \"My Music\" collection. It would be called to import favorite artists, albums, etc. from the music service. All API calls done from the importer must use synchronous HTTP requests!<ul> <li><code>startScan()</code>: this is the entry point called from the scanner code. Everything called from here must not use any of the async stuff usually used in the server.</li> <li><code>needsUpdate()</code>: this method tells the Online Music Library Integration plugin whether any change in a user's music service account requires a rescan of the library. This method must use async calls, as it's run in the server. It should be a relatively cheap call or series of calls to get a fingerprint of the user's library with the service. If the fingerprint changes, OMLI should re-run a scan. Some services would have such a fingerprint or \"last changed\" timestamp in the user's profile. On others it can be helpful to see how many itemst there are (albums, playlists, artists), and/or the latest change to any of them happened etc. This avoids pulling in all the library just to figure out whether a rescan was even required.</li> </ul> </li> <li><code>HTML/EN/plugins/MyMusicService</code>: this folder provides the home for HTML templates, static content like stylesheets, JavaScript etc.<ul> <li><code>html</code>: this additional subfolder is the home of static content. It can be accessed without an additional page handler. Images belong here.</li> <li><code>settings</code>: if there's a need for more than the basic settings page I often put the templates in their own subfolder. That's absolutely optional.</li> </ul> </li> <li><code>Bin/*</code>: provide a home for platform specific binaries, if needed.</li> <li><code>lib</code>: put your additional CPAN modules in there.</li> <li><code>install.xml</code>: the plugin's manifest file.</li> <li><code>strings.txt</code>: a simple text file with string translations. See Adding Translations for details about the format.</li> </ul> </li> </ul>"},{"location":"reference/music-service-plugin/#important-notes","title":"Important Notes","text":"<ul> <li>Be kind to the music service. Try to avoid unnecessary requests by using caching etc. You don't want to run into request rate limitations.</li> <li>Don't cache too aggressively: users know when they changed something on the service. They want changes to show up in LMS immediately. Therefore I'd often cache user specific data like favorites for a minute or two, only.</li> <li>Read the API documentation.<ul> <li>Some APIs allow you to tell what data to return. Don't request data you don't need!</li> <li>Respect rate limitations. Many services return headers with information about available requests etc. Use them, don't run blindly until you're blocked. It could harm the plugin's reputation.</li> <li>Sometimes there are requests like profile information, which can tell us whether favorites have changed or not. This usually is more efficient than requesting that data whenever needed.</li> <li>Don't try to avoid paywalls! We want to be good citizens. Doing illegal activity could not only harm you, but all of the LMS community!</li> </ul> </li> <li>Start small, release often. Start with a basic plugin and add features as requests come up. This allows you to optimize your code along the way, before you've got too much code.</li> <li>Try to support multiple accounts. Your users sooner or later will ask for them. In order to do this you should make the API implementation instantiable. That way each client can carry a reference to their API instance.</li> <li>Don't hard code textual content. Always use localizable string tokens.</li> </ul>"},{"location":"reference/repository-dev/","title":"LMS Repositories Developers","text":"<p>LMS 7.3+ includes a plugin which enables extensions to be downloaded to LMS and Jive (for example Squeezebox Radio). 3rd party authors may host their own content for download and define a repository xml file which refers to it. The xml format is:</p> <pre><code> &lt;?xml version=\"1.0\"?&gt;\n &lt;extensions&gt;\n   &lt;details&gt;\n     &lt;title lang=\"EN\"&gt;The Repository's Title&lt;/title&gt;\n   &lt;/details&gt;\n   &lt;applets&gt;\n     &lt;applet name=\"AppletName\" version=\"1.0\" target=\"jive\" minTarget=\"7.3\" maxTarget=\"7.3\"&gt;\n       &lt;title lang=\"EN\"&gt;English Title&lt;/title&gt;\n       &lt;title lang=\"DE\"&gt;German Title&lt;/title&gt;\n       &lt;desc lang=\"EN\"&gt;English description&lt;/desc&gt;\n       &lt;desc lang=\"DE\"&gt;German description&lt;/desc&gt;\n       &lt;changes lang=\"EN\"&gt;English change log&lt;/changes&gt;\n       &lt;changes lang=\"DE\"&gt;German change log&lt;/changes&gt;\n       &lt;creator&gt;Name of Author&lt;/creator&gt;\n       &lt;email&gt;email of Author&lt;/email&gt;\n       &lt;url&gt;url for zip file&lt;/url&gt;\n       &lt;sha&gt;digest of zip&lt;/sha&gt;\n     &lt;/applet&gt;\n   &lt;/applets&gt;\n   &lt;plugins&gt;\n     &lt;plugin name=\"PluginName\" version=\"1.0\" target=\"windows\" minTarget=\"7.9\" maxTarget=\"*\"&gt;\n       &lt;title lang=\"EN\"&gt;English Title&lt;/title&gt;\n       &lt;title lang=\"DE\"&gt;German Title&lt;/title&gt;\n       &lt;desc lang=\"EN\"&gt;English description&lt;/desc&gt;\n       &lt;desc lang=\"DE\"&gt;German description&lt;/desc&gt;\n       &lt;category&gt;categorycode&lt;/category&gt;\n       &lt;changes lang=\"EN\"&gt;English change log&lt;/changes&gt;\n       &lt;changes lang=\"DE\"&gt;German change log&lt;/changes&gt;\n       &lt;creator&gt;Name of Author&lt;/creator&gt;\n       &lt;email&gt;email of Author&lt;/email&gt;\n       &lt;url&gt;url for zip file&lt;/url&gt;\n       &lt;sha&gt;digest of zip&lt;/sha&gt;\n     &lt;/plugin&gt;\n   &lt;/plugins&gt;\n   &lt;wallpapers&gt;\n     &lt;wallpaper name=\"WallpaperName\" url=\"url for wallpaper file\" /&gt;\n   &lt;/wallpapers&gt;\n   &lt;sounds&gt;\n     &lt;sound name=\"SoundName\"     url=\"url for sound file\"     /&gt;\n   &lt;/sounds&gt;\n &lt;/extensions&gt;\n</code></pre> <ul> <li><code>name</code> - the name of the applet/plugin - must match the file naming of the lua/perl packages</li> <li> <p><code>version</code> - the version of the applet/plugin (used to decide if a newer version should be installed)</p> <p>an example of a set of increasing versions ... 1.0, 1.1a, 1.1b, 1.1</p> </li> <li> <p><code>target</code> - string defining the target, you can specify multiple target by separating them by '|' (optional - all if not defined)</p> <p>For applets you can use 'jive' (=SB-Controller), 'fab4' (=SB-Touch) or 'baby' (=SB-Radio). Omit the target attribute if you want your applet to be available for all devices, otherwise set to one or more targets (split by |).</p> <p>For plugins if set this specfies the target architecture and may include multiple strings from \"windows|mac|unix\"</p> </li> <li> <p><code>minTarget</code> - min version of the target software</p> </li> <li><code>maxTarget</code> - max version of the target software or * for no limit</li> <li><code>title</code> - contains localisations for the title of the applet (optional - uses name if not defined)</li> <li><code>desc</code> - localised description of the applet or plugin (optional)</li> <li><code>category</code> - (plugin only) a single category from the list shown below (optional)</li> <li><code>changes</code> - localised change log of the applet or plugin (optional)</li> <li><code>link</code> - (plugin only) url for web page describing the plugin in more detail</li> <li><code>creator</code> - name of author(s) (optional)</li> <li><code>email</code> - email of authors(s) (optional)</li> <li><code>url</code> - url for the applet/plugin itself, this should be a zip file</li> <li> <p><code>sha</code> - (plugin and applet only) sha1 digest of the zip file which is verifed before the zip is extracted</p> </li> <li> <p><code>categorycode</code> - it is used when generating lists of plugins to make it easier for users to browse by topic - pick from one of the following (without quotation marks):</p> <p>'hardware', 'information', 'misc', 'musicservices', 'playlists', 'radio', 'scanning', 'skin', 'tools'</p> <p>If you are unsure which category to pick then do not provide one or use 'misc' for miscellaneous. If the plugin could be in more than one category then pick the one that you think end-users would be most likely to think of first when trying to find it. If you invent your own categorycode then it will be ignored and the plugin will appear in the 'misc' category.</p> </li> </ul> <p>Further details are available in the comments of the Slim::Plugins::Extensions::Plugin source file.</p> <p>Take a look at pre-existing repository definition files to see how other developers have used this. You can see an aggregation of these in the auto-generated extension list at LMS-Community/lms-plugin-repository</p>"},{"location":"reference/repository-dev/#lms-plugins","title":"LMS Plugins","text":"<p>Authors should create their plugins in the standard way with packages named as Plugins::name:: where 'name' is reused for the name of the plugin in the repository.</p> <p>A common starting point for new development is to look at a pre-existing plugin (probably a simple one) to see how it was put together.</p> <p>Plugins may be packaged into a zip file zipping the contents of the directory into a zip file. A sha1 checksum of the zip file should also be created. The zip file should then be hosted at a url which is defined in the url element of the plugin xml entry with the sha1 element containing its sha1 checksum.</p> <p>Note</p> <p>It's important to include the version number in the archive's filename, as LMS otherwise might be re-using cached data, failing the upgrade.</p>"},{"location":"reference/repository-dev/#hashing-files","title":"Hashing Files","text":"<p>If developing on Windows then a good small freeware utility to produce a sha1 hash can be found at Nirsoft - HashMyFiles.</p>"},{"location":"reference/slim-utils-os-custom/","title":"Customizing Lyrion Music Server using <code>Slim::Utils::OS::Custom</code>","text":"<p>If you've been working on porting SC to a new platform, a NAS or similar, you might have seen needs to patch Squeezebox Server to achieve your goal. Many of these changes were due to different file system layouts or other OS specifics. Some of them had been hardcoded into Slim::Utils::OSDetect or other modules for the officially supported platforms. As of Squeezebox Server (formerly known as SqueezeCenter) version 7.3 there's a new infrastructure to better encapuslate and simplify such changes. While we do provide modules for the supported platforms, you can easily add your own platform support using a Slim::Utils::OS::Custom module.</p>"},{"location":"reference/slim-utils-os-custom/#how-does-it-work","title":"How does it work?","text":"<p>When Squeezebox Server is started, it's loading the module Slim::Utils::OSDetect. This module tries to detect the operating system Squeezebox Server is running on, and initializes the OS dependant code. This code is organized in classes, which inherit Slim::Utils::OS. These classes provide methods to query OS specific file paths, scanners, proxy detection and more. If OSDetect finds Slim/Utils/OS/Custom.pm, it will try to load this before doing any of the other tests. This allows you to hook into Squeezebox Server by adding your own class. Only a few simple steps are needed:</p> <ul> <li>Create a new module Slim::Utils::OS::Custom which inherits from Slim::Utils::OS or one of its sub-classes. It's minimum might look like this:</li> </ul> <pre><code>package Slim::Utils::OS::Custom;\n\nuse strict;\nuse base qw(Slim::Utils::OS);\n\n1;\n</code></pre> <ul> <li>Overwrite some of the existing methods to add your own specifics:</li> </ul> <pre><code>package Slim::Utils::OS::Custom;\n\nuse strict;\nuse base qw(Slim::Utils::OS);\n\nsub initDetails {\n    my $class = shift;\n\n    $class-&gt;{osDetails} = $class-&gt;SUPER::initDetails();\n    $class-&gt;{osDetails}-&gt;{name} = \"My very own Unix based OS\";\n\n    return $class-&gt;{osDetails};\n}\n\nsub initPrefs {\n    my ($class, $prefs) = @_;\n\n    $prefs-&gt;{scannerPriority}   = 20;\n    $prefs-&gt;{resampleArtwork}   = 0;\n    $prefs-&gt;{disableStatistics} = 1;\n}\n\n1;\n</code></pre> <p>All this does is create a new name for your OS, and override some default preferences.</p>"},{"location":"reference/slim-utils-os-custom/#available-hooks","title":"Available Hooks","text":"<ul> <li><code>initDetails()</code> - initialize a hash of OS details, called during initialization of the module</li> </ul> <pre><code>sub initDetails {\n    my $class = shift;\n\n    $class-&gt;{osDetails}-&gt;{os}     = 'Linux';\n    $class-&gt;{osDetails}-&gt;{osName} = 'My Secret Linux';\n}\n</code></pre> <ul> <li><code>details()</code> - return a reference to the details hash</li> <li><code>initPrefs()</code> - called when preferences are initialized. Can be used to eg. define performance prefs for lower end hardware (see above example)</li> <li><code>initSearchPath()</code> - initialize the search path for helper binaries</li> <li><code>dirsFor()</code> - return paths for various items (strings, plugins, modules etc. - see Slim::Utils::OS for the complete list)</li> <li><code>ignoredItems()</code> - return a hash of items which should be ignored in scans or when browsing the filesystem</li> </ul> <pre><code>sub ignoredItems {\n    return (\n        'bin'       =&gt; '/',\n        'etc'       =&gt; '/',\n        'lib'       =&gt; '/',\n        'proc'      =&gt; '/',\n        'root'      =&gt; '/',\n        'sbin'      =&gt; '/',\n        'tmp'       =&gt; '/',\n        'usr'       =&gt; '/',\n        'var'       =&gt; '/',\n        'lost+found'=&gt; 1,\n    );\n}\n</code></pre> <ul> <li><code>scanner()</code> - return path to an alternative scanner or location</li> <li><code>getProxy()</code> - read proxy settings from underlying OS</li> <li><code>getPriority()</code>/<code>setPriority()</code> - get/set server priority</li> <li><code>dontSetUserAndGroup()</code> - return true if the server should not set the user and group (allowing to be run as root)</li> <li><code>logRotate()</code> - add some method to do poor men's log rotation if the system doesn't do this for you</li> <li><code>skipPlugins()</code> - return a list of plugins you don't want to be loaded on your system</li> <li><code>canAutoUpdate()</code>, initUpdate(), getUpdateParams(), installerExtension(), installerOS() - enable and configure automatic downloading</li> <li><code>directFirmwareDownload()</code> - Return true if you don't want Squeezebox Server to download and cache firmware upgrades for your players on your system. It will then tell the player to pull them directly from the source server.</li> <li><code>canRestartServer()</code> - can the system restart the server?</li> <li><code>restartServer()</code> - restart server</li> </ul> <p>More hooks can be added if needed.</p>"},{"location":"reference/slimbrowse/","title":"SlimBrowse Protocol (\"Squeezeplay Interface\")","text":"<p>Interface specifications for browsing using Jive. What this document lays out is how browse menus sent in request responses are coded on the LMS side that SqueezePlay can read and interpret correctly.</p> <p>Note</p> <p>This page does not layout how to manage \"home menu\" items, that is, those top-level menu items sent to SqueezePlay as part of a \"menu:menu\" cli command request from SqueezePlay.</p> <p>Home Menu items are managed differently.</p>"},{"location":"reference/slimbrowse/#introduction","title":"Introduction","text":"<p>SlimBrowser is designed to browse music from SqueezeCenter. It expects data in the following form to build its menus (using approximate Perl syntax, where <code>{}</code> denotes a hash and <code>[]</code> an array):</p> <pre><code>{\n    base = {\n        &lt;base_fields&gt;\n    },\n    count = &lt;count_value&gt;,\n    rescan = 1,\n    goNow = &lt;window push directive&gt;,\n    window = {\n        &lt;window_fields&gt;\n    },\n    item_loop = [\n        {\n            &lt;item_fields&gt;\n        },\n        {\n            &lt;item_fields&gt;\n        },\n        ...,\n    ],\n}\n</code></pre> <p>where (items in bold are mandatory):</p> <ul> <li><code>base</code><ul> <li>Contains are a number of fields applicable to the entire window/menu as defined in </li> </ul> </li> <li><code>count</code><ul> <li>Positive integer indicating how many items are available for the given query (which may be different than the number of items in the item_loop array; Jive requests shall support paging).</li> </ul> </li> <li><code>rescan</code><ul> <li>If present with value 1, indicates a rescan is in progress. Jive behavior TBD.</li> </ul> </li> <li><code>goNow</code><ul> <li>If present with a supported value, will immediately push the Squeezeplay UI to another pre-defined window. Supported values are \"home\", \"nowPlaying\", and \"playlist\", which will immediately push the Squeezeplay UI to the Home screen, the Now Playing screen, or the current playlist screen, respectively.</li> </ul> </li> <li><code>window</code><ul> <li>if a window block is sent at the top level with the response data, the current rendered window on Squeezeplay should be styled with the parameters laid out in . Note that a window block contained within the base block or within an item block in the item_loop array is not for the current window but for the window created when executing a menu item callback (i.e. the \"next\" window\"). <li><code>item_loop</code><ul> <li>Array containing the items, each containing a number of fields applicable to an individual menu item as defined in . A menu item can itself be a list, i.e. contain the fields described here to define the lower level. See hierarchical support below."},{"location":"reference/slimbrowse/#base_fields","title":"<code>&lt;base_fields&gt;</code>","text":"<p>These fields allow defining values applicable to the entire menu or window.</p> <pre><code>{\n    icon = \"...\"\n    jsonrpc = \"http://...\"\n    window = {\n        &lt;window_fields&gt;\n    }\n    actions = {\n        &lt;actions_fields&gt;\n    }\n    nextWindow = \"...\"\n    setSelectedIndex = \"...\"\n    onClick = \"...\"\n}\n</code></pre> <ul> <li><code>icon</code><ul> <li>Full or partial base URL for images.</li> </ul> </li> <li><code>window</code><ul> <li>Allows specifying the elements to use for a window opened from this menu. See <code>&lt;window_fields&gt;</code>.</li> </ul> </li> <li><code>actions</code><ul> <li>Allows specifying the command(s) to use for this menu. See <code>&lt;actions_fields&gt;</code>.</li> </ul> </li> <li><code>jsonrpc</code><ul> <li>Allows to override the JSONRPC URL used by Jive (defaults to the JSON RPC server of the LMS it's browsing from).</li> </ul> </li> <li><code>nextWindow</code><ul> <li>Specify a specific <code>nextWindow</code> for items in this window to jump to. See <code>&lt;item_fields&gt;</code> section for more detail.</li> </ul> </li> <li><code>setSelectedIndex</code><ul> <li>Sets the selected index for the menu (if one exists) for the window loaded as specified by the <code>nextWindow</code> param. If no <code>nextWindow</code> is provided but a <code>setSelectedIndex</code> is, Squeezeplay will assume <code>nextWindow = 'refresh'</code>,</li> </ul> </li> <li><code>onClick</code><ul> <li>specify a specific window for items to refresh with new data when the item is selected (this is really for use with radio/checkbox/choice items). <code>refreshMe</code>, <code>refreshOrigin</code>, and <code>refreshGrandparent</code> are valid values</li> </ul> </li> </ul>"},{"location":"reference/slimbrowse/#item_fields","title":"<code>&lt;item_fields&gt;</code>","text":"<p>These fields are parsed into a menu item. Some fields are designed to complement fields defined in the <code>&lt;base_fields&gt;</code>.</p> <pre><code>{\n    text = \"...\"\n    textkey = \".\"\n    icon-id = ...\n    icon = \"...\"\n    radio = val\n    checkbox = val\n    slider = val\n    selectedIndex = val\n    choiceStrings = [ array ]\n    nextWindow = val\n    setSelectedIndex = integer\n    onClick = val\n    input = {\n        &lt;input_fields&gt;\n    }\n    window = {\n        &lt;window_fields&gt;\n    }\n    actions = {\n        &lt;actions_fields&gt;\n    }\n}\n</code></pre> <p>Where (items in bold are mandatory):</p> <ul> <li><code>text</code><ul> <li>Menu item text. May contain <code>\\n</code>, in which case the item is displayed on multiple lines.</li> </ul> </li> <li><code>textkey</code><ul> <li>Single character indicating the sorted text key (index) of the item (introduced in 7.6).</li> </ul> </li> <li><code>icon-id</code><ul> <li>Artwork ID. Will be fetched using a separate http request to LMS using the well known URL. The size is defined by the style. <code>icon-id</code> has precedence over <code>icon</code> (defined below).</li> </ul> </li> <li><code>icon</code><ul> <li>Full or partial URL of some image to display.</li> </ul> </li> <li><code>radio</code><ul> <li>If present, indicates a radio button is to be created for this item. Radio buttons must also involve a do action, defined in <code>&lt;action_fields&gt;</code>.</li> </ul> </li> <li><code>checkbox</code><ul> <li>If present, indicates a checkbox is to be created for this item. Must be paired with on/off actions. See checkbox-specific items \"on\" and \"off\" under <code>&lt;action_fields&gt;</code>.</li> </ul> </li> <li><code>slider</code><ul> <li>If present (typically set to a value of '1'), this item is meant to be rendered alone in a window without a menu. Currently, sliders must be the only item delivered in a request response.</li> </ul> </li> <li><code>selectedIndex</code><ul> <li>If present, indicates a choice widget is to be created for this item. Must be paired with choiceStrings and a actions-&gt;do-&gt;choices array. See choice-specific item \"choices\" under <code>&lt;action_fields&gt;</code>.</li> </ul> </li> <li><code>choiceStrings</code><ul> <li>Must be paired with <code>selectedIndex</code> and actions-&gt;do-&gt;choices. An array of strings to use in coordination with the choices array.</li> </ul> </li> <li><code>onClick</code><ul> <li>specify a specific window for items to refresh with new data when the item is selected (this is really for use with radio/checkbox/choice items). <code>refreshMe</code>, <code>refreshOrigin</code>, and <code>refreshGrandparent</code> are valid values</li> </ul> </li> <li><code>nextWindow</code><ul> <li><code>nextWindow</code> is a special directive to tell Squeezeplay to load or refresh a particular window after executing the command.</li> <li><code>nextWindow</code> param at the item level takes precedence over a <code>nextWindow</code> directive at the base level, but a <code>nextWindow</code> param at the json command level (e.g., 'go' action) is highest precedence.</li> <li>Valid <code>nextWindow</code> directives are:<ul> <li><code>nowPlaying</code>: push to the Now Playing browse window</li> <li><code>playlist</code>: push to the current playlist window</li> <li><code>home</code>: push to the top level \"home\" window</li> <li><code>parent</code>: push back to the previous window in the stack and refresh that window with the json that created it</li> <li><code>parentNoRefresh</code>: same as parent but do not refresh the window</li> <li><code>grandparent</code>: push back two windows in the stack</li> <li><code>refresh</code>: stay on this window, but resend the cli command that was used to construct it and refresh the window with the freshly returned data</li> <li><code>refreshOrigin</code>: push to the previous window in the stack, but resend the cli command that was used to construct it and refresh the window with the freshly returned data</li> <li>(7.4+) Any other value of a window that is present on the window stack and has a <code>windowId</code> in it's window fields. Search the window stack backwards until a window with this <code>windowId</code> is found and pop all windows above it.</li> </ul> </li> </ul> </li> <li><code>setSelectedIndex</code><ul> <li>Sets the selected index for the menu (if one exists) for the window loaded as specified by the <code>nextWindow</code> param. If no <code>nextWindow</code> is provided but a <code>setSelectedIndex</code> is, Squeezeplay will assume <code>nextWindow = 'refresh'</code>.</li> </ul> </li> <li><code>input</code><ul> <li>If present, indicates user input is required before proceeding with the actions. See . <li><code>window</code><ul> <li>Allows specifying the elements to use for a window opened from this menu. See . <li><code>actions</code><ul> <li>Allows specifying the command(s) to use for this menu. See ."},{"location":"reference/slimbrowse/#input_fields","title":"<code>&lt;input_fields&gt;</code>","text":"<p>Used if input is required before proceeding with the action. Specifies length to input, allowed chars and help text or token.</p> <pre><code>{\n    len = ...\n    allowedChars = \"...\"\n    inputStyle = \"...\",\n    help = {\n        text = \"...\",\n        token = \"...\",\n    }\n    softbutton1 = \"...\",\n    softbutton2 = \"...\",\n}\n</code></pre> <p>Where (items in bold are mandatory):</p> <ul> <li><code>len</code><ul> <li>Min number of characters to request before proceeding.</li> </ul> </li> <li><code>allowedChars</code><ul> <li>Overrides the set of characters allowed for input. The default value is given by the localized <code>ALLOWEDCHARS_NOCAPS</code> string in share/jive/global_strings.txt. In EN, this is \" abcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()_+{}|:\\\\\"'&lt;&gt;?-=,./~`[];0123456789\"</li> </ul> </li> <li><code>inputStyle</code><ul> <li>Specifies the style of text input to be performed. Defaults to 'text'. Other values are 'time' and 'ip'.</li> </ul> </li> <li><code>initialText</code><ul> <li>String that contains what should be filled into the text input entry as a default.</li> </ul> </li> <li><code>help</code><ul> <li>A help text, if any. Can be specified either using the localized text or a token (localized by Jive).</li> </ul> </li> <li><code>softbutton1</code>, <code>softbutton2</code><ul> <li>Text for softbuttons, if any. If either of these are configured, the help text widget will change from 'help' to 'softHelp' to accomodate the layout of the buttons.</li> </ul> </li> </ul>"},{"location":"reference/slimbrowse/#window_fields","title":"<code>&lt;window_fields&gt;</code>","text":"<p>If selecting an item results in opening a new window (i.e. the \"go\" action), the window fields, if present, will be used instead of the item fields for the window title and style. Fields defined in an item override any field defined in <code>&lt;base_fields&gt;.&lt;window_fields&gt;</code>.</p> <pre><code>{\n    text = \"...\"\n    textarea = \"...\"\n    textareaToken = \"...\"\n    icon-id = ...\n    icon = \"...\"\n    titleStyle = \"...\"\n    menuStyle = \"...\"\n    help = {\n             text = \"...\"\n    }\n    windowId = \"...\"\n}\n</code></pre> <p>Where (items in bold are mandatory):</p> <ul> <li><code>text</code>, <code>icon-id</code>, and <code>icon</code><ul> <li>Same semantic as for items. Typically, these are different for each item and are defined in <code>&lt;item_fields&gt;.&lt;window_fields&gt;</code>.</li> </ul> </li> <li><code>textarea</code><ul> <li>Send block of text for display of a textarea in the opened window. For use when window will not have a menu to display, or when the menu to display is without any decorated widgets like radio buttons, checkboxes, or choice items.</li> </ul> </li> <li><code>textareaToken</code><ul> <li>Same as textarea, but send a string token that is translated on the client-side. Same caveats as textarea apply. <code>textareaToken</code> is used for a specific case and is unlikely to be useful for plugin development.</li> </ul> </li> <li><code>titleStyle</code> and <code>menuStyle</code><ul> <li>Style of the title (resp. menu) of the new window. Typically, this is the same for all items and is defined in <code>&lt;base_fields&gt;.&lt;window_fields&gt;</code>. The only supported value is \"album\" (for multiline with icon title/item).</li> </ul> </li> <li><code>help{text}</code><ul> <li>Displays help text at the bottom of a window.</li> </ul> </li> <li><code>windowId</code><ul> <li>Defines an id for a window. This <code>windowId</code> can be used with the \"<code>nextWindow</code>\" item directive to move backwards to this window on the window stack.</li> </ul> </li> </ul>"},{"location":"reference/slimbrowse/#actions_fields","title":"<code>&lt;actions_fields&gt;</code>","text":"<p>The action fields specify the command sent by Jive when the user performs an action on the item, for example presses a key. In many cases, the command to be performed is the same regardless of the item (f.e., play), only one parameter will change for each item (f.e., the item id). The syntax therefore allows actions to be defined in the [<code>#base_fields &lt;base_fields&gt;</code>] and being completed in the [<code>#item_fields &lt;item_fields&gt;</code>]. It is however possible to define completely a command at the item level.</p> <pre><code>{\n    &lt;action_name&gt; = \"&lt;url_command&gt;\"\n    &lt;action_name&gt; = {\n        &lt;json_command&gt;\n    }\n    &lt;action_name&gt; = null\n\n    &lt;json_params_id&gt; = {\n        &lt;params&gt;\n    }\n}\n</code></pre> <p>Actions are identified by their name, corresponding to the keys or other controls available on Jive. Actions can refer to a JSON command or a URL (this shall remain coherent between base and item level). Actions can be set as \"null\" to have no effect (to prevent a pre-defined or base-defined command to work on a particular menu or item).</p> <p><code>&lt;json_params_id&gt;</code> is only available in items, see json commands below.</p>"},{"location":"reference/slimbrowse/#action_name","title":"<code>&lt;action_name&gt;</code>","text":"<p>Actions are defined using a string composed of the key pressed and its holding state.</p> <ul> <li><code>keys</code><ul> <li>One of \"go\"/\"do\", \"back\", \"play\", \"add\", \"rew\", \"fwd\" or \"pause\".</li> </ul> </li> <li>holding state or \"-hold\" (not for \"go\"/\"do\" and \"back\")</li> </ul> <p>For example, field play-hold defines the command to send when the play key is held. It can be defined at the item level (applies to the item only), or at the base level. In this last case, it can be complemented by params defined at the item level.</p>"},{"location":"reference/slimbrowse/#url_command","title":"<code>&lt;url_command&gt;</code>","text":"<p>URLs are strings, enclosed in quotes. MULTI-LEVEL</p>"},{"location":"reference/slimbrowse/#json_command","title":"<code>&lt;json_command&gt;</code>","text":"<p>JSON RPC commands consist of a hash with the following keys:</p> <pre><code>{\n    player = 0\n    cmd = [\"...\", \"...\"]\n    params = {\n        &lt;param_name&gt; = ...,\n        ...\n    }\n    itemsParams = &lt;json_params_id&gt;\n    nextWindow = \"...\",\n}\n</code></pre> <ul> <li><code>player</code><ul> <li>Player if the command requires it. The actual value is replaced by Jive.</li> </ul> </li> <li><code>cmd</code><ul> <li>Array of command terms, f.e. <code>['playlist', 'jump']</code>.</li> </ul> </li> <li><code>params</code><ul> <li>Hash of parameters, f.e. <code>{sort = new}</code>. Passed to the server in the form \"key:value\", f.e. 'sort:new'.<ul> <li>The value <code>__INPUT__</code> is replaced by any user entered data.</li> <li>The value <code>__TAGGEDINPUT__</code> is replaced by user entered data in a \"key:value\" format. For example, the param foo = <code>__TAGGEDINPUT__</code> would be replaced by 'foo:' <li><code>itemParams</code><ul> <li>In base level commands, this defines the name of the field in the item [<code>#action_fields &lt;actions_fields&gt;</code>] that must be used to complete the command for a particular item. See the example below.</li> </ul> </li> <li><code>nextWindow</code><ul> <li>If a <code>nextWindow</code> param is given at the json command level, it takes precedence over a <code>nextWindow</code> param at the item level, which in turn takes precendence over a <code>nextWindow</code> param at the base level. See  section for more detail on this parameter. <li><code>setSelectedIndex</code><ul> <li>Sets the selected index for the menu (if one exists) for the window loaded as specified by the <code>nextWindow</code> param. If no <code>nextWindow</code> is provided but a setSelectedIndex is, squeezeplay will assume <code>nextWindow = 'refresh'</code>. The same precedence rules apply here as do for <code>nextWindow</code> described above.</li> </ul> </li>"},{"location":"reference/slimbrowse/#slider-actions","title":"Slider actions","text":"<p>Slider objects sent from SC are a special case in that they are not contained in a menu, therefore need to be sent as a single item request response. The item needs to look something like this:</p> <pre><code>{\n    slider      =&gt; 1,\n    min         =&gt; val,\n    max         =&gt; val,\n    adjust      =&gt; val,\n    initial     =&gt; val,\n    sliderIcons =&gt; '...',\n    text        =&gt; '...',\n    help        =&gt; '...',\n    actions =&gt; {\n        do =&gt; {\n            player =&gt; 0,\n            cmd    =&gt; [ ... ],\n            params =&gt; {\n                valtag =&gt; '...',\n            },\n        },\n    },\n}\n</code></pre> <p>Where (items in __bold_ are mandatory):</p> <ul> <li><code>slider</code><ul> <li>identifies item to be delivered as a slider object.</li> </ul> </li> <li><code>min</code><ul> <li>the minimum value of the range of values to be set</li> </ul> </li> <li><code>max</code><ul> <li>the maximum value of the range of values to be set</li> </ul> </li> <li><code>adjust</code><ul> <li>the slider object on SBC doesn't cope well with values &lt;=0, so this is an adjustment, for the purpose of Squeezeplay's slider rendering only, to the min/max values. This value typically (though not necessarily) when added to min is equal to 1. For example, if you had a min of -23 and a max of 23, the adjust value would be 24.</li> </ul> </li> <li><code>initial</code><ul> <li>the initial pre-adjust value to set the slider to. When absent, defaults to min.</li> </ul> </li> <li><code>sliderIcons</code><ul> <li>In the absence of this parameter, a - and + icon are added to either end of the slider widget. Possible values for sliderIcons are 'volume' and 'none'. 'volume' renders vol- and vol+ icons on either end of the slider object. 'none' shows no icons, only the slider.</li> </ul> </li> <li><code>text</code><ul> <li>when present, this renders text above the slider in a textArea widget.</li> </ul> </li> <li><code>help</code><ul> <li>when present, delivers help text in a helptext box on the window</li> </ul> </li> <li><code>actions</code>, <code>actions.do</code> and <code>actions.do.params.valtag</code><ul> <li>slider objects require a 'do' action, and that do action needs to have a cli command callback that identifies, via the valtag param, the tag to be used in the callback. For example, for a command that requires a format of</li> </ul> </li> </ul> <pre><code>  &lt;player_id&gt; testcommand foo:val\n</code></pre> <p>The actions portion of the slider item would be configured like so:</p> <pre><code>actions =&gt; {\n    do =&gt; {\n        player =&gt; 0,\n        cmd    =&gt; [ 'testcommand' ],\n        params =&gt; {\n            valtag =&gt; 'foo',\n        },\n    },\n},\n</code></pre> <p>The value the user scrolls to on the slider sets the value that is sent back with the tagged parameter 'foo' For further reference Slim::Control::Jive has several spots where sliders are configured and delivered.</p>"},{"location":"reference/slimbrowse/#go-do-on-and-off-actions","title":"Go Do, On and Off actions","text":"<p>\"go\" refers to a command that opens a new window (i.e. returns results to browse), while \"do\" refers to an action to perform that does not return browsable data. \"do\" takes precedence over \"go\".</p> <p>\"on\" and \"off\" are similar to \"do\", but are used in the specific case of a checkbox item (i.e., one \"do\" action for when the checkbox is checked, one for when it is unchecked).</p> <p>Paging parameters (json: _index and _qty, url: TBD) are added automatically by Jive for \"go\".</p>"},{"location":"reference/slimbrowse/#choices-array-in-do-action","title":"Choices array in Do action","text":"<p>If a \"choices\" array of commands is sent in the do actions hashref along with a selectedIndex var and choiceStrings array in the main body of the item, each of the choices array elements will be paired with the choiceStrings and the menu item will be delivered with a choice widget. Each element in the choices array will form the command callback when that choice is selected.</p>"},{"location":"reference/slimbrowse/#pre-defined-actions","title":"Pre-defined actions","text":"<p>Some actions have \"built in\" defaults: the presence of a new action overrides Jive's standard (built in) behavior.</p> <ul> <li>back<ul> <li>Goes up one level in the browsing, closing the current window. Override not supported.</li> </ul> </li> <li>rew<ul> <li>Does <code>playlist jump -1</code> or <code>playlist jump 0</code> depending on the repetition rate of the key</li> </ul> </li> <li>fwd<ul> <li>Does <code>playlist jump +1</code></li> </ul> </li> <li>pause<ul> <li>Does <code>pause 0</code> or <code>pause 1</code> depending on the player state</li> </ul> </li> <li>pause-hold<ul> <li>Does <code>stop</code></li> </ul> </li> <li>play, play-hold, add, add-hold, rew-hold, fwd-hold<ul> <li>These have no predefined command.</li> </ul> </li> </ul>"},{"location":"reference/slimbrowse/#showbriefly-communications","title":"showBriefly communications","text":"<p>The server provides a facility for sending messages to clients via the <code>$client-&gt;showBriefly()</code> method. The purpose of the <code>showBriefly</code> is (typically) to show a brief popup message on the display to convey something to the user. This method has been in use for many years, originally for the ip3k-based Squeezeboxes (slimp3, squeezebox 1/2/3, boom), but has also been adapted for Squeezeplay-based players (Controller, Radio, Touch). For Squeezeplay-based players, this is done via the jive block in a <code>showBriefly</code> message.</p> <p><code>showBriefly</code> messages are communicated to Squeezeplay devices via the displaystatus notification subscription and are handled by the jive.slim.Player class on the Lua side. <code>showBriefly</code> messages operate independently of SlimBrowser/SlimMenu communication, and (typically) produce transient popup windows that are not part of the browse stack (but are part of the Framework stack).</p>"},{"location":"reference/slimbrowse/#jive-block","title":"<code>jive</code> block","text":"<p>A typical <code>jive</code> block in a <code>showBriefly</code> might look like this</p> <pre><code>$client-&gt;showBriefly( {\n    'jive' =&gt; {\n        'text' =&gt; [\n            $client-&gt;string('FAVORITES_ADDING'),\n            $title,\n        ],\n    },\n} );\n</code></pre> <p><code>text</code> is an array block of text to be sent for display in the showBriefly. Other parameters that can be sent in the jive block:</p> <ul> <li><code>type</code><ul> <li>tells SP what style of popup to use. Valid types are 'popupplay', 'icon', 'song', 'mixed', and 'popupalbum'. In 7.6, 'alertWindow' has been added (see next section)</li> </ul> </li> <li><code>duration</code><ul> <li>duration in seconds to display the showBriefly popup. Defaults to 3 seconds. In 7.6, a duration of -1 will create a popup that doesn't go away until dismissed.</li> </ul> </li> <li><code>style</code><ul> <li>used for specific styles to be used in popup windows, e.g. adding a + badge when adding a favorite.</li> </ul> </li> </ul> <p>See jive/slim/Player.lua code in the _process_displaystatus() method for specifics on how SP handles the variations sent from the server for showBriefly messages.</p>"},{"location":"reference/slimbrowse/#alertwindow","title":"<code>alertWindow</code>","text":"<p>7.6 introduces the ability to send a <code>showBriefly</code> message that will push a full, non-transient window to the squeezeplay UI. This is done with an alertWindow specification within the jive block. <code>alertWindow</code> supports two params inside the block: title, which is text to display in the title bar of the window, and text, which is the text to display in the body of the window as a textarea widget. The alertWindow is meant for messages that should not leave the screen without the user dismissing it explicitly, and as a full window has the ability of passing much larger text messages than in a small popup.</p> <p>An <code>alertWindow</code> can be sent by sending a type of <code>alertWindow</code> in the jive block</p> <pre><code>$client-&gt;showBriefly( {\n    'jive' =&gt; {\n        type =&gt; 'alertWindow',\n        title =&gt; $client-&gt;string('PLAYER_ON_FIRE'),\n        'text' =&gt; [\n            $client-&gt;string('OH_NO'),\n            $client-&gt;string('YOUR_PLAYER_IS_ON_FIRE_DESCRIPTION'),\n        ],\n    },\n} );\n</code></pre>"},{"location":"reference/slimbrowse/#notes","title":"NOTES","text":"<ul> <li>There is a dependency between the style (in Jive) and the data returned.</li> <li>Settings are not supported by the above syntax.</li> <li>The business with checking for multiple params should not cause performance issues as it is done \"rarely\" (at each button press, but not while scrolling, building the menu, etc.)</li> </ul>"},{"location":"reference/slimbrowse/#lms-squeezecenter-command-implementation","title":"LMS (SqueezeCenter) command implementation","text":"<p>A new \"menu\" query is defined to handle the top level menu. Other existing queries are re-used, but a new parameter \"menu\" is added that allows:</p> <ul> <li>declaring usage in menu mode (the data returned conforms to the syntax above)</li> <li>indicate the next browse level</li> </ul> <p>For example, the hierarchy [genres, artist, album] is done using a top level menu with command \"genres menu:artist\", that generates items with commands \"artists menu:albums\", etc... This is done in order to re-use the code of these queries. Experience shows they are high maintenance.</p>"},{"location":"reference/slimp3-protocol/","title":"The SLIMP3 Client Protocol","text":""},{"location":"reference/slimp3-protocol/#overview","title":"Overview","text":"<p>This documents the SLIMP3 protocol, as implemented in LMS 5.0.1 and SLIMP3 v2.2 firmware. The protocol is UDP based. The SLIMP3 communicates using a custom UDP-based protocol. This protocol is designed to be extremely light-weight. It gives the server low-level access to the hardware and full control over the user interface, so as to mimize the amount of hardware and software required on the client side.</p> <p>All packets are preceded by an 18-byte header. The first byte in this header is a token which indicates the format of the rest of the header. Some kinds of packets may have also have variable amounts of data after the header. Variable length data is not delimited - the length is taken from the UDP header. All numbers are unsigned integers, in network order. The server listens on port 1069, and replies to the source port of the packets it receives from the client. The server identifies individual clients by MAC address. The last 6 bytes of any Client -&gt; Server message are the client's MAC address.</p>"},{"location":"reference/slimp3-protocol/#server-client","title":"Server -&gt; Client","text":""},{"location":"reference/slimp3-protocol/#d-discovery-response","title":"'D' - Discovery response","text":"Field Value/Description 0 'D' as in \"discovery\" 1 reserved 2..5 server's IP address, or 0.0.0.0 6..7 server's port 8..17 reserved <p>On receiving a (d)iscovery request broadcast (see below) from a supported client, the server replies with a unicast (D)iscovery response, containing the IP and port number that the client should contact. If the server's IP address is left blank (0.0.0.0), then the client will instead get the IP address and port from the IP/UDP packet headers. A server replying to a discovery request may redirect a client to another server (for load balancing) using this mechanism. If multiple discovery responses are received, the client will select the first one it receives.</p>"},{"location":"reference/slimp3-protocol/#h-say-hello","title":"'h' - Say hello","text":"<pre><code>Field   Value/Description0       'h' as in \"hello\"1..17   reserved\n</code></pre> <p>This is used by the server to determine if previous known clients are up, and to obtain the model and firmware revision of those clients. Clients reply with another (h)ello, see below.</p>"},{"location":"reference/slimp3-protocol/#l-send-data-to-the-lcdvfd-display","title":"'l' - Send data to the lcd/vfd display","text":"<pre><code>Field   Value/Description0       'l' as in \"lcd\"1..17   reserved (ignored)18...   variable length string of 16-bit codes\n</code></pre> <p>The Noritake vacuum fluorescent display used in the SLIMP3 implements the standard Hitachi LCD interface, plus additional codes for controlling brightness. The data sheet is in CVS under docs/datasheets. The SLIMP3 protocol allows both \"character data\" and \"commands\" to be sent directly to the display. It also allows you to insert a delay between characters. This is used to insert the required delay after the \"clear screen\" command, and can also be used to create animated sequences. The delay feature is not currently used by the server, and probably shouldn't be used in its current implementation, because the player has to spin for the specified time and can not be interrupted. Instead, delays should be implemented in an interruptible manner on the server side.</p> <p>The 16-bit codes are:</p> <pre><code>00XX, where XX specifies a delay in ms, up to 25502XX, where XX is a command03XX, where XX is one of the 256 characters supported by the display\n</code></pre>"},{"location":"reference/slimp3-protocol/#m-write-mpeg-data-into-the-players-buffer","title":"'m' - write MPEG data into the player's buffer","text":"<pre><code>Field   Value/Description0       'm' as in \"mpeg\"1       control signal2..5    reserved (used in earlier protocols)6..7    write pointer8..9    reserved10..11  sequence number12..17  reserved18..    variable length string of data (length must be even # of bytes)\n</code></pre> <p>This message feeds data into the client's buffer, and also controls whether the decoder is running. The control signal indicates what the decoder should be doing:</p> <pre><code>0       decoding1       stopped (but do not reset buffer)3       stopped, reset read pointer to 0\n</code></pre> <p>The write pointer gives the address in the buffer to which the data should be written. The sequence number is an identifier for the packet. The client must acknowledge each MPEG data packet received with an \"ack\" message.</p>"},{"location":"reference/slimp3-protocol/#2-readwrite-the-i2c-bus","title":"'2' - read/write the i2c bus","text":"<pre><code>Field    Value/Description0        '2' as in \"i2c\"1..17    reserved18..     string of i2c commands and data\n</code></pre> <p>The protocol allows the i2c bus to be manipulated down to the level of discrete start / stop / ack / nack / read / write operations. The data sent after the header is a string of these operations, specified as follows:</p> <pre><code>wX   write the byte X onto the busr    read a byte from the buss    startp    stopa    ackn    nack\n</code></pre> <p>The client acknowledges all i2c packets. See '2' under the \"Client-&gt;Server\" section.</p> <p>Please see the Philips web site for more information on i2c. At the bottom of that page, you'll find the i2c spec sheet in PDF format.</p>"},{"location":"reference/slimp3-protocol/#client-server","title":"Client -&gt; Server","text":""},{"location":"reference/slimp3-protocol/#d-discovery-request","title":"'d' - Discovery request","text":"<p>|Field|Value/Description| |0|'d' as in \"discovery\"| |1|reserved| |2|Device ID, '1' for SLIMP3| |3|Firmware rev, eg 0x11 for version 1.1| |4..11|reserved| |12..17|MAC address|</p> <p>This packet is sent to the broadcast address on port 1069. The client sends this during startup to discover the server's IP address, after the client has configured his own IP interface. The server replies with a unicast 'D' packet - see above. Firmware v2.2 identifies itself as 1.1.</p>"},{"location":"reference/slimp3-protocol/#h-say-hello_1","title":"'h' - Say hello","text":"<pre><code>Field   Value/Description0       'h' as in \"hello\"1       Device ID, '1' for SLIMP32       Firmware rev, eg 0x11 for version 1.13..11   reserved12..17  MAC address\n</code></pre> <p>The SLIMP3 sends a hello packet to the server when it first starts up, and whenever it receives a hello from the server. This is for the server to learn that a new client is ready, or for the server to query a client to see if here's still there.</p> <p>NB whilst this may be what the client sends, the server is only interested in the MAC address, and ignores the device id and firmware completely.</p>"},{"location":"reference/slimp3-protocol/#i-ir-code","title":"'i' - IR code","text":"<pre><code>Field   Value/Description0       'i' as in \"IR\"1       0x002..5    player's time since startup in ticks @625 KHz6       0xFF (will eventually be an identifier for different IR code sets)7       number of meaningful bits - always 16 (0x10) for JVC8..11   the 32-bit IR code12..17  MAC address\n</code></pre>"},{"location":"reference/slimp3-protocol/#2-i2c-response","title":"'2' - i2c response","text":"<pre><code>Field    Value/Description0        '2' as in \"i2c\"1..17    reserved18...    string of bytes in response to the requested i2c         read operations, if any\n</code></pre>"},{"location":"reference/slimp3-protocol/#a-ack-response","title":"'a' - ack response","text":"<pre><code>Field    Value/Description0        'a' as in ack1..5     reserved6..7     write pointer8..9     read pointer10..11   sequence number12..17   MAC address\n</code></pre> <p>This packet is sent in response to an mpeg data packet. Write pointer is ignored by the server (this makes sense, because the client no longer maintains the write pointer). The read pointer is the position in the buffer that the decoder is reading from. The sequence number is the sequence number from the packet being acknowledged. Streaming and Buffering</p> <p>The SLIMP3's buffer chip is a 128K x 8 (1Mbit) SRAM. It is presented to the server as a 64K x 16 circular buffer. The server sends packets to the client, with the address in the buffer where they are to be stored, and with a sequence identifier. The client acks each packet as it receives it. The server ensures that each packet has been acknowledged by the client, and will resend any packets that are not acknowledged promptly. Once the server has filled the client's buffer it will send zero length data packets, and will monitor the read pointer returned in the client's acknowledgement, sending further packets as necessary to keep the buffer full.</p> <p>The read pointer is maintained by the client, and is the position from which the decoder is currently reading. The server can order this read pointer to be reset to the beginning of the buffer by sending a control code of \"3\" to the client in a data packet. These control codes also control whether the decoder is running or not (see 'm' write MPEG data).</p> <p>At the start of each track, the server will send a number of packets with the control set to \"3\", in order to allow the client to build up a small buffer before starting decoding. The control with then switch to \"0\". \"1\" is used to pause the player.</p> <p>The SLIMP3's buffer chip is a 128K x 8 (1Mbit) SRAM. It is presented to the server as a 64K x 16 circular buffer. The SLIMP3 maintains two pointers, called rptr and wptr, which track the position at which the DMA controller is reading (out to the decoder) and writing (in from the network). When a new stream is started, the SLIMP3 begins by initializing an empty buffer, with rptr == wptr == 0. It then begins requesting data from the server, starting from 0. The server replies with some data, which the SLIMP3 writes into the buffer. Once the buffer reaches 50% capacity, the decoder is started, and the rptr begins to increment. The SLIMP3 continues requesting data until the buffer is 90% full. Once the buffer reaches this \"almost full\" state, the SLIMP3 continually checks buffer usage, requesting more data only when the buffer usage drops below the \"almost full\" level.</p> <p>Timeouts due to a lost packet are handled by the client. It the SLIMP3 does not receive a response from the server after 100ms, then it sends the request again.</p>"},{"location":"reference/slimp3-protocol/#other-protocols-supported-by-the-player","title":"Other protocols supported by the player","text":"<ul> <li>ICMP</li> </ul> <p>ICMP echo (ping): The SLIMP3 will send an ICMP response and display a message indicating where the ping came from.</p> <p>ICMP unreachable: This indicates that the server machine is up, but the server process is not running. The SLIMP3 will display a message to the effect of \"10.0.0.1: service unreachable - are you sure the SLIMP3 server is running?\"</p> <p>Other ICMP messages are displayed on the screen in a similar manner, but they are otherwise ignored (eg ICMP redirect does nothing, but the player will still tell you, so you know to fix your gateway setting).</p> <ul> <li>UDP echo</li> </ul> <p>The player will echo any packet sent to it on UDP port 7. This could be used to obtain an RTT estimate. Unlike ping, it does not cause anything to be displayed on the screen.</p> <ul> <li>DHCP</li> </ul> <p>As of firmware version 1.1, the SLIMP3 can use DHCP to discover its own IP address.</p>"},{"location":"reference/slimproto-protocol/","title":"SlimProto Protocol","text":"<p>Note</p> <p>Always check the Perl source code, this documentation is not in sync with actual byte length in multiple places</p> <p>The SlimProto protocol is the new protocol developed for the squeezebox and replaces the SLIMP3 one. It is designed to allow the players to communicate effectively over WANs as well as LANs.</p> <p>This document describes the SlimProto for Squeezebox firmware versions 20 and above. The current version of the firmware shipped with SqueezeCenter 7.2.1 is 113. This document describes both version imperfectly.</p> <p>The server listens on TCP port 3483 for connections by players. To register a player with the server, they exchange \"helo\"s and then any of the commands below are valid.</p> <p>The client also listens on UDP port 3483 for SlimProto commands from the server it has already established a TCP connection with. It also seems to respond to data sent back in the TCP connection (you send frames back this way).</p> <p>The byte order is critical for several of the fields. The best way to check this out is to look at the server source code.</p>"},{"location":"reference/slimproto-protocol/#client-server-communications","title":"Client -&gt; Server Communications","text":"<p>For an authoritative answer on the format of the packets see the file Slim/Networking/Slimproto.pm. Different versions of the firmware send different formatted packets.</p> <p>A command to the server consists of three parts:</p> <ol> <li> <p>The 1st 4 bytes specify the operation. The following operations are supported:</p> <ul> <li>HELO</li> <li>BYE!</li> <li>STAT  heartbeat and play-event notification</li> <li>RESP  HTTP headers (from data stream)</li> <li>BODY  HTTP body (from data stream)</li> <li>META  metadata from stream</li> <li>DSCO  data stream disconnected</li> <li>DBUG  reports firmware revision</li> <li>IR    (note the two spaces after IR)</li> <li>RAWI  raw infra-red</li> <li>ANIC  animation complete</li> <li>BUTN  hardware button (transporter)</li> <li>KNOB  hardware knob (transporter)</li> <li>SETD  update preferences</li> <li>UREQ  firmware update request</li> </ul> </li> <li> <p>The 2nd part (of four bytes) is simply the length of the data packet (in network order).</p> </li> <li> <p>The 3rd part is the data itself.</p> </li> </ol> <p>Most of the operations above are detailed below:</p>"},{"location":"reference/slimproto-protocol/#helo","title":"HELO","text":"<p>This alerts the server to a clients presence and is the first thing normally transmitted by a client powering up.</p> <p>Data Length: 10, 20, or 36 bytes, depending upon deviceID and firmware revision.</p> <p>Format:</p> Field Length Notes DeviceID 1 byte The Device ID of the player. '2' is squeezebox. '3' is softsqueeze, '4' is squeezebox2,. '5' is transporter, '6' is softsqueeze3, '7' is receiver, '8' is squeezeslave, '9' is controller, '10' is boom, '11' is softboom, '12' is squeezeplay Revision 1 byte A number specifying the firmware revision MAC 0-5 6 bytes The player's MAC address UUID 0-15 16 bytes Unique identifier of device (only in newer firmware)(not sent by softsqueeze) WLanChannelList 2 bytes A list of 802.11 channels that are enabled on a given device as a bitfield 0x07ff means that channels 0 through 11 are enabled which means it's configured for the US. Bytes received 8 bytes Number of data-stream bytes received (not sent by softsqueeze) Language 2 bytes Country code (not sent by softsqueeze)"},{"location":"reference/slimproto-protocol/#capabilities","title":"Capabilities","text":"<p>This is an extension implemented in LMS 7.4 or later.</p> <p>The basic HELO packet above can be augmented by a list of capabilities, in which case the packet will be longer than 36 bytes. Capabilities form a comma-separated list. By convention CODEC capabilities are three or four letters all lower case and other capabilities start with an upper-case letter.</p> <p>Unrecognized capabilities will probably be ignored.</p> <p>CODECs should be stated in order of preference. The following are recognized at the time of writing:</p> <ul> <li>wma</li> <li>wmap - WMAPro</li> <li>wmal - WMA Lossless</li> <li>ogg</li> <li>flc</li> <li>pcm</li> <li>aif</li> <li>mp3</li> <li>alc - Apple Lossless</li> <li>aac - AAC &amp; HE-AAC, with or without MP4 wrapper</li> </ul> <p>The following could be anticipated:</p> <ul> <li>rtsp</li> <li>aud</li> </ul> <p>The following other capabilities are supported (case sensitive):</p> <ul> <li>MaxSampleRate=96000 - frames/s, should be multiples of 11025 or 12000</li> <li>Model=controller</li> <li>ModelName=Controller</li> <li>Rhap - supports Rhapsody</li> <li>AccuratePlayPoints - indicates that playpoints are precise and can be used in synchronization calculations without further filtering.</li> <li>SyncgroupID=nnnnnnnnnn - the sync-group which the player wants to join; used when a group of players is moved from one server to another.</li> <li>HasDigitalOut - somewhat of a misnomer. Currently, its only use is to enable the setting (via the SqueezeboxServer WebUI or CLI) of a preference to tie output volume at 100%.</li> <li>HasPreAmp - does the player have a separate analogue volume control.</li> <li>HasDisableDac - can the player's DAC be disabled.</li> </ul>"},{"location":"reference/slimproto-protocol/#ir-note-padded-with-two-spaces-to-make-it-up-to-4-characters","title":"\"IR \" (Note: padded with two spaces to make it up to 4 characters.)","text":"<p>One of these packets is received for each IR code received by the player.</p> <p>Data Length: Fixed at 10 bytes.</p> <p>Format:</p> <pre><code> Time   4 bytes Time since player startup in ticks (@1kHz)\n Format 1 byte  Code Format (ignored by the server for now.\n                Code represents type of IR code - NEC, JVC or Sony)\n NoBits 1 byte  Length of IR Code.\n                (ignored by the server for now\n                16 bits for JVC, 32 bits for NEC?)\n IRCode 4 bytes the IR Code itself (upto 32 bits)\n</code></pre>"},{"location":"reference/slimproto-protocol/#resp","title":"RESP","text":""},{"location":"reference/slimproto-protocol/#body","title":"BODY","text":"<p>HTTP (or MMS) response headers or message body from the data stream. These can be parsed for metadata (title, format, bitrate, etc.), or (in the case of a body) for a playlist.</p>"},{"location":"reference/slimproto-protocol/#meta","title":"META","text":"<p>Embedded metadata from the data stream from which useful information may be extracted,</p>"},{"location":"reference/slimproto-protocol/#stat","title":"STAT","text":"<p>These are sent by the player in response to commands and periodically when there are no commands as a sort of keep-alive. They inform the server of the status of various player internals.</p> <p>Format:</p> Size Notes u32 Event Code (a 4 byte string) u8 Number of consecutive CRLF recieved while parsing headers u8 MAS Initalized - 'm' or 'p' u8 MAS Mode - serdes mode? u32 buffer size - in bytes, of the player's (network/stream) buffer u32 fullness - data bytes in the player's (network/stream) buffer u64 Bytes Recieved u16 Wireless Signal Strength (0-100 - Larger values mean hardwired) u32 jiffies - a timestamp from the player (@1kHz) u32 output buffer size - the decoded audio data buffer size u32 output buffer fullness - bytes in the decoded audio data buffer u32 elapsed seconds - of the current stream u16 voltage u32 elapsed milliseconds - of the current stream u32 server timestamp - reflected from an strm-t command u16 error code - used with STMn <p>The Bytes Received field is how many data bytes the player has recieved (since it started playing?).</p> <p>Output buffer size/fullness, elapsed time, voltage, elapsed milliseconds, server timestamp &amp; error code, along with the STMo were added with more-recent firmware revisions.</p> <p>Earlier firmware revisions report the read and write pointers for the player's decoder input buffer, rather than the buffer size and fullness. The bytes received and the read/write pointers are used in this case to update the elapsed time count.</p> <p>Event code may be one of the following:</p> EventCode Description Notes vfdc vfd received Not observed, presumably an ack to a VFD (display) message i2cc i2c confirmation STMa Autostart Track started. Probably Squeezebox v1 only. STMc Connect srtm-s command received. Guaranteed to be the first response to an strm-s. STMd Decoder ready Instruct server that we are ready for the next track (if any). Sometimes (unfortunately) this will also indicate an error. STMe Stream connection Established STMf Connection flushed Streaming track flushed (in response to strm-f) or playback stopped (in response to strm-q). The number of STMf responses which  may be received in various circumstances is not well defined. STMh HTTP headers received from the streaming connection. STMl Buffer threshold reached When strm-s autostart=0/2. STMn Not Supported Decoder does not support file format or a decoding error has occurred. May include format-specific error code. STMo Output Underrun No more decoded (uncompressed) data to play; triggers rebuffering. STMp Pause Confirmation of Pause. STMr Resume Confirmation of resume. (Not used during playout) STMs Track Started Playback of a new track has started. STMt Timer A simple hearbeat, can be periodic or a response to strm-t STMu Underrun Normal end of playback. <p>The event code is a method of triggering events in the server. For example, STMd which occurs on decoder buffer underrun causes the server to switch to the next track.</p> <p>The error codes are internal and codec-specific. Not all decoders make use of error codes. The current ones are:</p> Code Name 0 N/A 100 OGG_ERROR_TOO_MANY_CHANNELS 101 OGG_ERROR_HIGH_MEMORY 102 OGG_ERROR_INVALID_SAMPLE_RATE 103 OGG_ERROR_NOTVORBIS 104 OGG_ERROR_BADHEADER 200 WMA_ERROR_SPEECH_SUPERFRAMES 201 WMA_ERROR_LOSSLESS"},{"location":"reference/slimproto-protocol/#anic","title":"ANIC","text":"<p>The display animation is complete. This seems to be undocumented. in the squeezecenter code Slim\\Display\\Display.pm there a brief description of the client capabilities.</p>"},{"location":"reference/slimproto-protocol/#bye","title":"BYE!","text":"<p>The player is disconnecting.</p> <p>If the first data byte to this command is 0x01 then the player is going out for an upgrade...</p>"},{"location":"reference/slimproto-protocol/#server-client-communication","title":"Server -&gt; Client Communication","text":"<p>Data from the server to the player consists of 2 bytes of length data (in network order), a 4 byte command header, then the command data itself. The length sent is the size of the data plus the 4 byte command header; it does not include the 2 byte length field itself.</p>"},{"location":"reference/slimproto-protocol/#command-strm","title":"Command: \"strm\"","text":"<p>This takes 24 bytes data of the form:</p> Field Length Notes $command 1 byte 's' start, 'p' pause, 'u' unpause, 'q' stop, 't' status, 'f' flush, 'a' skip-ahead $autostart 1 byte '0' = don't auto-start, '1' = auto-start, '2' = direct streaming, '3' = direct+auto $formatbyte 1 byte 'p' = PCM, 'm' = MP3, 'f' = FLAC, 'w' = WMA, 'o' = Ogg., 'a' = AAC (&amp; HE-AAC), 'l' = ALAC $pcmsamplesize 1 byte '0' = 8, '1' = 16, '2' = 20, '3' = 32;   usually '1', '?' for self-describing formats. $pcmsamplerate 1 byte '0'=11kHz, '1'=22kHz, '2'=32kHz, '3'=44.1kHz, '4'=48kHz, '5'=8kHz, '6'=12kHz, '7'=16kHz, '8'=24kHz, '9'=96kHz; usually 3, '?' for self-describing formats. $pcmchannels 1 byte '1'=mono, '2'=stereo; usually '2', '?' for self-describing formats. $pcmendian 1 byte '0' = big, '1' = little; '1' for WAV, '0' for AIFF, '?' for self-describing formats. $threshold 1 byte KB of input buffer data before autostart or notify $spdif_enable 1 byte '0'=auto, '1'=on, '2'=off; usually 0 $trans_period 1 byte transition duration in seconds $trans_type 1 byte '0' = none, '1' = crossfade,'2' = fade in, '3' = fade out, '4' = fade in &amp; fade out $flags 1 byte 0x80 - loop infinitely, 0x40 - stream without restarting decoder, 0x01 - polarity inversion left, 0x02 - polarity inversion right $output_threshold. 1 byte amount of output buffer data before playback starts, in tenths of second RESERVED 1 byte reserved $replay_gain 4 bytes replay gain in 16.16 fixed point, 0 = none (for the 's' command - see below for further discussion). $server_port 2 bytes Server Port to use (9000 is the default) $server_ip 4 bytes 0 means use IP of control server <p>This is followed by an HTTP header itself. This is used to obtain the stream data eg:</p> <pre><code> GET /stream.mp3?player=$client-id HTTP/1.0\n (Authorization: Basic $password)\n (blank line)\n</code></pre> <p>The Auth line is only sent if authorization is in use. $client-id is the usually the MAC address of the player and $password is a password generated by the server.</p> <p>Other headers to be included in the HTTP request may also be supplied.</p>"},{"location":"reference/slimproto-protocol/#u-p-a-t-commands-and-replay_gain-field","title":"u, p, a &amp; t commands and replay_gain field","text":"<p>The u, p, a &amp; t commands all make special use of the replay_gain field, as follows:</p> <p>u - if non-zero, the player-specific internal timestamp (ms) at which to unpause (this is used by the server to coordinate the start of multiple synchronized players).</p> <p>p - if non-zero, an interval (ms) to pause for and then automatically resume - no STMp &amp; STMr status messages are sent in this case.</p> <p>a - if non-zero, an interval (ms) to skip over (not play).</p> <p>t - a timestamp field from the server to be returned in the corresponding STMt status message (used to measure round-trip latency).</p>"},{"location":"reference/slimproto-protocol/#flac-specific-notes","title":"FLAC-specific notes","text":"<p>For FLAC, some of the fields are reused, as follows:</p> <p>pcmsamplesize - container type: '?' (flac), 'o' (ogg/flac)</p>"},{"location":"reference/slimproto-protocol/#wma-specific-notes","title":"WMA-specific notes","text":"<p>For WMA, some of the fields are reused, as follows:</p> <p>pcmsamplesize - response will include HTTP/MMS chunking;</p> <p>pcmsamplerate - the audio stream number to play;</p> <p>pcmchannels - the metadata stream number, if any.</p>"},{"location":"reference/slimproto-protocol/#aac-specific-notes","title":"AAC-specific notes","text":"<p>For AAC, some of the fields are reused, as follows:</p> <p>pcmsamplesize - container type and bitstream format: '1' (adif), '2' (adts), '3' (latm within loas), '4' (rawpkts), '5' (mp4ff), '6' (latm within rawpkts);</p>"},{"location":"reference/slimproto-protocol/#command-aude","title":"Command: \"aude\"","text":"<p>Tell the client to enable/disable the audio outputs.</p> <p>2 bytes</p> <pre><code> $spdif_enable   1 byte  0x0 = disable SPDIF, 0x1 = enable SPDIF\n $dac_enable     1 byte  0x0 = disable DAC, 0x1 = enable DAC output\n</code></pre>"},{"location":"reference/slimproto-protocol/#command-audg","title":"Command: \"audg\"","text":"<p>Tell the client to adjust the audio gain (volume level)</p> <p>10 bytes (all ints are network byte order)</p> <pre><code> $old_left      4 bytes unsigned int\n $old_right     4 bytes unsigned int\n $dvc           1 byte  Digital volume control 0/1\n $preamp        1 byte  Preamp (byte 255-0)\n $new_left      4 bytes 16.16 fixed point\n $new_right     4 bytes 16.16 fixed point\n $sequence      4 bytes unsigned int, optional\n</code></pre> <p>total: 18-22 bytes (+ 4 bytes command header \"audg\")</p> <pre><code>old_left/old_right should range from 0..128 new_left/new_right are 16.16 fixed point\n</code></pre> <pre><code>Firmware v22+ on the SB2 use the new style; older use the old-style.\n</code></pre>"},{"location":"reference/slimproto-protocol/#command-grfb","title":"Command: \"grfb\"","text":"<p>Tells the client to adjust the brightness of the display.</p> <p>Send a short int (2 bytes, network byte order) with a brightness level from 0-4 (on Squeezebox2). On newer firmwares (squeezecenter 7.3), it seems to range from -1 up to and including 5. -1 means totally off, 5 is the brightest.</p>"},{"location":"reference/slimproto-protocol/#command-grfe","title":"Command: \"grfe\"","text":"<p>Sends a bitmap to the client for display. It starts with a header of 4 bytes, followed by 1280 bytes of data. The header is: <pre><code> $offset        2 bytes short int\n $transition    1 byte ('L','R','U' or 'D')\n $param         1 byte\n</code></pre></p> <p>On Squeezebox3, the data is 1280 bytes; each one is a bitfield (0=off 1=on for that bit). Bits are layed out from top to bottom in column 1 of the display, then top to bottom in column 2, etc. The Squeezebox3 has a 320x32 display, so each column is 4 bytes.</p> <p>if $transition is a capital, the frame is bounced a few pixels, a lowercase value results in a full scroll. the parameter determines how many pixels are part of the animation (from bottom to top). More information on the transition can be found in pushBumpAnimate() of slim\\display\\Squeezebox2.pm in the squeezecenter source code.</p> <p>For instance, the 4-byte sequence (in binary):</p> <pre><code> 1000 0000\n 0000 0000\n 0000 0000\n 0000 0011\n</code></pre> <p>would light up the top pixel and the two bottom pixels on the row; send a grfe with that sequence 320 times and you get a thin line across the top of the display and a thicker line across the bottom.</p> <p>It is also possible to send compressed graphics. the highest byte of 'g' in the 'grfe' command should be set. The frame is then assumed to be compressed using LZF. The length in the header is the length of the compressed data (+4 for the command code).</p>"},{"location":"reference/slimproto-protocol/#command-i2cc","title":"Command: \"i2cc\"","text":"<p>Squeezebox1 only, sends an i2c command to the client.</p> <p>The data is the i2c command to send in the same format as for the SLIMP3 protocol.</p> <p>This is used to control the setup of the mas chip. Volume commands are embedded in this.</p>"},{"location":"reference/slimproto-protocol/#command-serv","title":"Command: \"serv\"","text":"<p>Tells the client to switch to another server.</p> <pre><code> $ip_address   4 bytes in network order; 0x1 means switch to squeezenetwork\n $syncgroupid  (optional) 10 ASCII digits;\n               this should be reflected in the HELO command\n               (**SyncgroupID** capability) when the player connects\n               to the new server so that it may re-join its sync-group.\n</code></pre>"},{"location":"reference/slimproto-protocol/#command-stat","title":"Command \"stat\"","text":"<p>Request a STAT update from the player</p>"},{"location":"reference/slimproto-protocol/#command-vfdc","title":"Command: \"vfdc\"","text":"<p>Sends VFD data to the client.</p> <p>The data is the vfd data to send in the same format as for the SLIMP3 protocol.</p>"},{"location":"reference/slimproto-protocol/#command-vers","title":"Command: \"vers\"","text":"<p>Sends server version string to the client.</p> <p>The data is the human readable version information for the server (a simple string)</p>"},{"location":"reference/slimproto-protocol/#command-visu","title":"Command \"visu\"","text":"<p>Tells the server to activate/deactivate visualizer for the music.</p> <pre><code> $which      1 byte    Which visualizer to use\n $count      1 byte    How many parameters there are\n $param_1    4 bytes   first parameter...\n $param_N    4 bytes   last parameter\n</code></pre> <p>Values for $which:</p> <pre><code> 0    Blank\n 1    Vumeter\n 2    Spectrum\n 3    Waveform\n</code></pre> <pre><code> $channels    0=stereo 1=mono\n $style       0=digital 1=analog\n $position    left/right position in pixels (0=left side)\n $width       width in pixels\n $r_position  left/right position of the right channel (stereo only)\n $r_width     width in pixels of the right channel (stereo only)2    Spectrum analyzer\n $channels   as for vumeter\n $bandwidth   0=0..22050Hz, 1=0..11025Hz\n $Preemphasis in dB per KHz\n $position    left/right position in pixels (0=left side)\n $width       width in pixels   $orientation 0=left to right  1=right to left\n $bar_width   Bar width in pixels   $bar_space   Bar spacing in pixels\n $clipping    0 = show all subbands  1= clip higher bands\n $intensity   Bar intensity (greyscale) 1-3\n $cap         Bar cap intensity (greyscale) 1-3For stereo, repeat the channel-specific\n $r_position  Right side position   ...\n $r_cap       Right side bar cap intensity\n</code></pre>"},{"location":"reference/slimproto-protocol/#undocumented-commands-brief-rundown","title":"Undocumented commands, brief rundown","text":""},{"location":"reference/slimproto-protocol/#command-audc","title":"Command \"audc\"","text":"<p>Transporter only, update clock source</p>"},{"location":"reference/slimproto-protocol/#command-audp","title":"Command \"audp\"","text":"<p>Transporter only, update audio source</p>"},{"location":"reference/slimproto-protocol/#command-body","title":"Command \"body\"","text":"<p>Request part of the body of a file from the player (to get remotely downloaded playlists, find bit rates of mp3, etc)</p>"},{"location":"reference/slimproto-protocol/#command-cont","title":"Command \"cont\"","text":"<p>Content-type related, related to playing remote songs</p>"},{"location":"reference/slimproto-protocol/#command-grfd","title":"Command \"grfd\"","text":"<p>SqueezeboxG only, draw graphics</p>"},{"location":"reference/slimproto-protocol/#command-irtm","title":"Command \"irtm\"","text":"<p>Send timing info to client about when IR messages are processed</p>"},{"location":"reference/slimproto-protocol/#command-knoa","title":"Command \"knoa\"","text":"<p>Knob on a remote control?</p>"},{"location":"reference/slimproto-protocol/#command-knob","title":"Command \"knob\"","text":"<p>Transporter only, knob-related</p>"},{"location":"reference/slimproto-protocol/#command-rhap","title":"Command \"rhap\"","text":"<p>Rhapsody-specific</p>"},{"location":"reference/slimproto-protocol/#command-rsps","title":"Command \"rsps\"","text":"<p>Transporter only, adjust RS232 baud rate</p>"},{"location":"reference/slimproto-protocol/#command-rstx","title":"Command \"rstx\"","text":"<p>Transporter only, send RS232 TX</p>"},{"location":"reference/slimproto-protocol/#command-setd","title":"Command \"setd\"","text":"<p>Get/set player firmware settings</p>"},{"location":"reference/slimproto-protocol/#command-upda","title":"Command \"upda\"","text":""},{"location":"reference/slimproto-protocol/#command-updn","title":"Command \"updn\"","text":""},{"location":"reference/slimproto-protocol/#command-ureq","title":"Command \"ureq\"","text":"<p>The last 3 are firmware update related commands</p>"},{"location":"reference/special-ir-keys-reset/","title":"Special IR Keys on Reboot for Factory Reset and Last FW","text":"<p>Some system operations that require you to point your remote control on the Squeezebox while starting the Squeezebox. To be sure you're doing it right, pull the power from the unit, press and hold the appropriate button on the remote while keeping it pointed at the unit, and give the unit power again, while all the time keeping the remote button pressed and the remote pointed at the unit.</p>"},{"location":"reference/special-ir-keys-reset/#ip3k-based-players","title":"ip3k-based Players","text":"<p>These codes apply to the ip3k-based players: Squeezebox1 (G), Squeezebox2, Squeezebox3, Boom.</p> <ul> <li>ADD - Factory reset</li> <li>1 - Program Xilinx</li> <li>2 - Factory test mode</li> <li>3 - Audio sine test</li> </ul>"},{"location":"reference/special-ir-keys-reset/#squeezeos-based-players","title":"SqueezeOS-based players","text":"<p>These tips are applicable to SqueezePlay-based players only: Controller, Touch, and Radio.</p> <ul> <li> <p>Revert to previous FW - hold down Volume UP (with a non-Boom remote), or REW (on device, where available), and power up the device. Keep the button held down until you see the \"Free Your Music\" screen.</p> </li> <li> <p>Factory Reset - hold down Add (\"+\") (with a non-Boom remote) and press the fab4 rear power button. Keep button held down until you see the \"Free Your Music\" screen.</p> </li> </ul>"},{"location":"reference/special-ir-keys-reset/#taking-screenshots","title":"Taking screenshots","text":""},{"location":"reference/special-ir-keys-reset/#on-the-radio-or-using-remote-control","title":"On the Radio or using remote control","text":"<p>Press and hold <code>pause</code> and <code>rew</code> until you get an audible signal and a popup telling you the screenshot's file name.</p>"},{"location":"reference/special-ir-keys-reset/#on-the-squeezebox-touch","title":"On the Squeezebox Touch","text":"<p>You'll need to plug in a keyboard to the USB port. Then press uppercase \"<code>S</code>\" or <code>shift prntscrn</code>.</p>"},{"location":"reference/special-ir-keys-reset/#getting-the-screenshots-off-of-your-device","title":"Getting the screenshots off of your device","text":"<p>Screenshots are stored as <code>squeezeplay9999.bmp</code> in <code>/etc/squeezeplay/userpath</code>. The <code>9999</code> is an increment for each image. Enable SSH and use <code>scp</code> to copy the file to your host system.</p> <p>Warning</p> <p>On more recent clients (eg. macOS Ventura and later) <code>scp</code> might fail with a message like <code>sh: /usr/libexec/sftp-server: not found</code>. In that case use <code>scp -O ...</code> to fall back to \"outdated\" protocols.</p> <p>If you've inserted an SD card or USB stick to the SB Touch or Controller, the screenshots will be stored in <code>/media/sda1</code> (USB) or <code>/media/mmcblk0p1</code> (SD card).</p>"},{"location":"reference/squeezeplay-applet/","title":"SqueezePlay Applet Developing Guide","text":""},{"location":"reference/squeezeplay-applet/#introduction","title":"Introduction","text":"<p>This document serves as a starting point for those wanting to develop Lua applets for SqueezePlay (and, by extention, the SqueezeboxController).</p> <p>It is not intended as a Lua programming guide, which can be found online here.</p> <p>First things first, check yourself out a copy of SqueezePlay. Once you have a working desktop version of SqueezePlay, beginning development will be much easier.</p> <p>Please also not that the sourcecode provided here was written for the 7.3 firmware. 7.4 changes some variables names when creating menus or popup-windows. Please study the 'Test'-applet provided with SqueezePlay so you can adapt the needed changes.</p>"},{"location":"reference/squeezeplay-applet/#applet-files","title":"Applet Files","text":"<p>The two main files in any SqueezePlay applet are the Meta and Applet files. The naming convention is AppletNameMeta.lua and AppletNameApplet.lua, respectively. You can also have any number of helper files, notably a strings.txt file to translate string tokens into other languages, and a settings.lua file that contains saved configuration information that your applet might need to store.</p>"},{"location":"reference/squeezeplay-applet/#meta-file","title":"Meta file","text":"<p>The Meta file registers your applet to SqueezePlay for use. It is required for your applet to load correctly. Typically, a registerApplet function lets SqueezePlay add a menu item(s) for your applet, and an applet function to run when drilling into that menu item.</p>"},{"location":"reference/squeezeplay-applet/#example-doomsdaymetalua","title":"Example: DoomsdayMeta.lua","text":"<pre><code> local oo            = require(\"loop.simple\")\n local AppletMeta    = require(\"jive.AppletMeta\")\n local appletManager = appletManager\n local jiveMain      = jiveMain\n\n module(...)\n oo.class(_M, AppletMeta)\n\n function jiveVersion(meta)\n       return 1, 1\n end\n\n function defaultSettings(meta)\n       return {\n               currentSetting = 0,\n       }\n end\n\n function registerApplet(meta)\n       jiveMain:addItem(meta:menuItem('doomsdayApplet', 'home', \"DOOMSDAY\", function(applet, ...) applet:menu(...) end, 20))\n end\n ```\n\n#### Dissecting DoomsdayMeta.lua\n\nVariable Declaration:\n\n```lua\n local oo            = require(\"loop.simple\")\n local AppletMeta    = require(\"jive.AppletMeta\")\n local appletManager = appletManager\n local jiveMain      = jiveMain\n</code></pre> <p>In SqueezePlay it is necessary to explicitly define all functions and classes you wish to use in your applet. This is done through require() statements, and in some cases, the pulling in of global variables into local space. Note: this also needs to be done for Lua internal functions like tostring, setmetatable, etc.</p> <p>So, in this example, we are defining four things: <code>oo</code>, <code>AppletMeta</code>, <code>appletManager</code>, and <code>jiveMain</code>.</p>"},{"location":"reference/squeezeplay-applet/#module-and-class-declaration","title":"Module and Class Declaration","text":"<p>Next we define the type of file we are constructing:</p> <pre><code> module(...)\n oo.class(_M, AppletMeta)\n</code></pre> <p>In essence what these two lines say are \"this is a meta file, and we're going to define all variables to be used locally\" or \"new class (AppleNameMeta) inheriting from AppetMeta\". Note we had to define AppletMeta above by requiring our superclass jive.AppletMeta.</p>"},{"location":"reference/squeezeplay-applet/#meta-file-functions","title":"Meta File Functions","text":"<p>Now on to the meta functions:</p> <pre><code> function jiveVersion(meta)\n       return 1, 1\n end\n</code></pre> <p>sets the valid versions (min and max) that this applet will run under. In this example, min and max are set to 1, which means that the jiveVersion has to be set to 1 for this applet to load. Note: this number does not correspond to the external SqueezePlay version number, e.g., 7.0.1</p> <p>Default settings are important to define if a settings.lua file is going to be used:</p> <pre><code> function defaultSettings(meta)\n       return {\n               currentSetting = 0,\n       }\n end\n</code></pre> <p>settings.lua files are created dynamically by an applet, so it doesn't exist when first using the applet. This is where you define default settings so SqueezePlay doesn't balk when trying to getSettings()</p> <p>Finally we register our applet:</p> <pre><code> function registerApplet(meta)\n       jiveMain:addItem(meta:menuItem('doomsdayApplet', 'home', \"DOOMSDAY\", function(applet, ...) applet:menu(...) end, 20))\n end\n</code></pre> <p>This line is a bit complicated with arguments. What we are doing here is adding a menu item to the \"homeMenu\" area of Squeezeplay, which are those top-level menus that are managed by jive/ui/HomeMenu.lua. The menuItem() function general form is</p> <pre><code> menuItem(id, node, token, callback, [weight])\n</code></pre> <ul> <li>id =&gt; unique key that HomeMenu uses to reference this item</li> <li>node =&gt; HomeMenu node to add this item to. 'home' places the item in the top-most menu. Other options include 'myMusic', 'extras', 'settings', and 'advancedSettings'.</li> <li>token =&gt; string token to be used for displaying the menu item</li> <li>callback =&gt; function to callback when this menu item is drilled into. Typically in a meta file you reference the corresponding applet file function to execute.</li> <li>weight =&gt; an optional parameter given to place the item higher or lower in the list. Default weight of unweighted items is 5, and by convention items sent from SqueezeCenter (e.g., Music Library) have weights between 10 and 100.</li> </ul>"},{"location":"reference/squeezeplay-applet/#the-fruits-of-our-labor","title":"The Fruits of Our Labor","text":"<p>The Meta file has now provided a HomeMenu item for the applet:</p> <p></p>"},{"location":"reference/squeezeplay-applet/#applet-file","title":"Applet file","text":"<p>The Applet file is the main part of your applet. It typically does the majority of the \"heavy lifting\" for whatever it is you want to do.</p>"},{"location":"reference/squeezeplay-applet/#example-doomsdayappletlua","title":"Example: DoomsdayApplet.lua","text":"<pre><code> --[[\n =head1 NAME\n\n applets.Doomsday.DoomsdayApplet - Doomsday Applet\n\n =head1 DESCRIPTION\n\n This applet was created solely for the purpose of a demonstration\n\n =head1 FUNCTIONS\n\n Applet related methods are described in L&lt;jive.Applet&gt;.\n\n =cut\n --]]\n\n\n -- stuff we use\n local tostring = tostring\n local oo                     = require(\"loop.simple\")\n local string                 = require(\"string\")\n\n local Applet                 = require(\"jive.Applet\")\n local RadioButton            = require(\"jive.ui.RadioButton\")\n local RadioGroup             = require(\"jive.ui.RadioGroup\")\n local Window                 = require(\"jive.ui.Window\")\n local Popup                  = require(\"jive.ui.Popup\")\n local Textarea               = require('jive.ui.Textarea')\n local SimpleMenu             = require(\"jive.ui.SimpleMenu\")\n\n module(...)\n oo.class(_M, Applet)\n\n function menu(self, menuItem)\n\n       log:info(\"menu\")\n       local group = RadioGroup()\n       local currentSetting = self:getSettings().currentSetting\n\n       -- create a SimpleMenu object with selections to be created\n       local menu = SimpleMenu(\"menu\", {\n               -- first menu item\n               {\n                       -- text for the menu item\n                       text = self:string(\"DOOMSDAY_OPTION1\"),\n                       -- add a radiobutton with a callback function to be used when selected\n                       icon = RadioButton(\n                               -- skin style of radio button (defined in DefaultSkin)\n                               \"radio\",\n                               -- group to attach button\n                               group,\n                               -- callback function\n                               function()\n                                       log:info(\"radio button 1 selected\")\n                                       -- show the warning\n                                       self:warnMasses('DOOMSDAY_MESSAGE1')\n                                       -- store the setting to settings.lua\n                                       self:getSettings()['currentSetting'] = 1\n                                       self:storeSettings()\n                               end,\n                               -- fill the radio button if this is the currentSetting\n                               (currentSetting == 1)\n                       ),\n               },\n               {\n                       text = self:string(\"DOOMSDAY_OPTION2\"),\n                       icon = RadioButton(\n                               \"radio\",\n                               group,\n                               function()\n                                       log:info(\"radio button 2 selected\")\n                                       self:warnMasses('DOOMSDAY_MESSAGE2')\n                                       self:getSettings()['currentSetting'] = 2\n                                       self:storeSettings()\n                               end,\n                               (currentSetting == 2)\n                       ),\n               },\n               {\n                       text = self:string(\"DOOMSDAY_OPTION3\"),\n                       icon = RadioButton(\n                               \"radio\",\n                               group,\n                               function()\n                                       log:info(\"radio button 3 selected\")\n                                       self:warnMasses('DOOMSDAY_MESSAGE3')\n                                       self:getSettings()['currentSetting'] = 3\n                                       self:storeSettings()\n                               end,\n                               (currentSetting == 3)\n                       ),\n               },\n               {\n                       text = self:string(\"DOOMSDAY_OPTION4\"),\n                       icon = RadioButton(\n                               \"radio\",\n                               group,\n                               function()\n                                       log:info(\"radio button 4 selected\")\n                                       self:warnMasses('DOOMSDAY_MESSAGE4')\n                                       self:getSettings()['currentSetting'] = 4\n                                       self:storeSettings()\n                               end,\n                               (currentSetting == 4)\n                       ),\n               },\n       })\n\n       -- create a window object\n       local window = Window(\"window\", self:string(\"DOOMSDAY\"))\n\n       -- add the SimpleMenu to the window\n       window:addWidget(menu)\n\n       -- show the window\n       window:show()\n end\n\n function warnMasses(self, warning)\n       log:info(self:string(warning))\n\n       -- create a Popup object, using already established 'toast_popup_text' skin style\n       local doomsday = Popup('toast_popup_text')\n\n       -- add message to popup\n       local doomsdayMessage = Group(\"group\", {\n                       text = Textarea('toast_popup_textarea',self:string(warning)),\n             })\n       doomsday:addWidget(doomsdayMessage)\n\n       -- display the message for 3 seconds\n       doomsday:showBriefly(3000, nil, Window.transitionPushPopupUp, Window.transitionPushPopupDown)\n end\n</code></pre>"},{"location":"reference/squeezeplay-applet/#dissecting-doomsdayappletlua","title":"Dissecting DoomsdayApplet.lua","text":"<p>Embedded documentation</p> <pre><code> --[[\n =head1 NAME\n\n applets.Doomsday.DoomsdayApplet - Doomsday Applet\n\n =head1 DESCRIPTION\n\n This applet was created solely for the purpose of a demonstration\n\n =head1 FUNCTIONS\n\n Applet related methods are described in L&lt;jive.Applet&gt;.\n\n =cut\n --]]\n</code></pre> <p>The section at the top of the file here that's within a Lua comment section <code>--[[ comments... ]]---</code> is in standard POD format for documentation, which Wikipedia has a nice write-up on.</p> <p>Variable Declaration</p> <p>As we did in the meta file, it is necessary to declare everything external that's going to be used in the file.</p> <pre><code> -- stuff we use\n local tostring = tostring\n local oo                     = require(\"loop.simple\")\n local string                 = require(\"string\")\n\n local Applet                 = require(\"jive.Applet\")\n local RadioButton            = require(\"jive.ui.RadioButton\")\n local RadioGroup             = require(\"jive.ui.RadioGroup\")\n local Window                 = require(\"jive.ui.Window\")\n local Popup                  = require(\"jive.ui.Popup\")\n local Textarea               = require('jive.ui.Textarea')\n local SimpleMenu             = require(\"jive.ui.SimpleMenu\")\n local Group                  = require(\"jive.ui.Group\")\n</code></pre> <p>In the case of the applet, we are going to be accessing a bunch of ui widgets (<code>RadioButton</code>, <code>RadioGroup</code>, <code>Window</code>, <code>Popup</code>, <code>Textarea</code>, <code>SimpleMenu</code>, <code>RadioGroup</code>).</p> <p>Module and Class Declaration</p> <pre><code> module(...)\n oo.class(_M, Applet)\n</code></pre> <p>This is no different from the Meta file, other than declaring that this is an Applet class, not Meta. By using these required lines, you are stating that all variables, including Lua internal functions, need to be declared explicitly above these lines (e.g., see previous section).</p> <p>Applet Functions</p> <p>There are two functions here, <code>menu()</code> and <code>warnMasses()</code>. <code>menu()</code> as you may recall is the function defined in the Meta file as the one to be called when the \"Doomsday\" menu item is selected. This function creates a menu via the <code>jive.ui.SimpleMenu</code> widget, and creates four items that can be selected for a special Doomsday popup warning, which is driven by the <code>radioButton</code> callback to <code>warnMasses()</code>.</p> <p>(Screenshots below)</p> <p>Additionally, when a radio button is selected that setting is stored in settings.lua and subsequent returns to this menu will fill in the last selected item in the menu.</p> <p>Note the first row in the menu function</p> <pre><code> log:info(\"menu\")\n</code></pre> <p>This uses a \"log\" variable that hasn't been declared in the declaration section. The reason this works is because SqueezePlay automatically declares a \"log\" variable for all registered applets. It's declared with the identity \"applet.Doomsday\" where \"Doomsday\" is the name of the applet. You can enable different log levels through the SqueezePlay menu Settings/Advanced/Logging.</p> <p>The functions are commented for clarity within the code:</p> <pre><code> function menu(self, menuItem)\n\n       log:info(\"menu\")\n       local group = RadioGroup()\n       local currentSetting = self:getSettings().currentSetting\n\n       -- create a SimpleMenu object with selections to be created\n       local menu = SimpleMenu(\"menu\", {\n               -- first menu item\n               {\n                       -- text for the menu item\n                       text = self:string(\"DOOMSDAY_OPTION1\"),\n                       -- add a radiobutton with a callback function to be used when selected\n                       icon = RadioButton(\n                               -- skin style of radio button (defined in DefaultSkin)\n                               \"radio\",\n                               -- group to attach button\n                               group,\n                               -- callback function\n                               function()\n                                       log:info(\"radio button 1 selected\")\n                                       -- show the warning\n                                       self:warnMasses('DOOMSDAY_MESSAGE1')\n                                       -- store the setting to settings.lua\n                                       self:getSettings()['currentSetting'] = 1\n                                       self:storeSettings()\n                               end,\n                               -- fill the radio button if this is the currentSetting\n                               (currentSetting == 1)\n                       ),\n               },\n               {\n                       text = self:string(\"DOOMSDAY_OPTION2\"),\n                       icon = RadioButton(\n                               \"radio\",\n                               group,\n                               function()\n                                       log:info(\"radio button 2 selected\")\n                                       self:warnMasses('DOOMSDAY_MESSAGE2')\n                                       self:getSettings()['currentSetting'] = 2\n                                       self:storeSettings()\n                               end,\n                               (currentSetting == 2)\n                       ),\n               },\n               {\n                       text = self:string(\"DOOMSDAY_OPTION3\"),\n                       icon = RadioButton(\n                               \"radio\",\n                               group,\n                               function()\n                                       log:info(\"radio button 3 selected\")\n                                       self:warnMasses('DOOMSDAY_MESSAGE3')\n                                       self:getSettings()['currentSetting'] = 3\n                                       self:storeSettings()\n                               end,\n                               (currentSetting == 3)\n                       ),\n               },\n               {\n                       text = self:string(\"DOOMSDAY_OPTION4\"),\n                       icon = RadioButton(\n                               \"radio\",\n                               group,\n                               function()\n                                       log:info(\"radio button 4 selected\")\n                                       self:warnMasses('DOOMSDAY_MESSAGE4')\n                                       self:getSettings()['currentSetting'] = 4\n                                       self:storeSettings()\n                               end,\n                               (currentSetting == 4)\n                       ),\n               },\n       })\n\n       -- create a window object\n       local window = Window(\"window\", self:string(\"DOOMSDAY\"))\n\n       -- add the SimpleMenu to the window\n       window:addWidget(menu)\n\n       -- show the window\n       window:show()\n end\n\n function warnMasses(self, warning)\n       log:info(self:string(warning))\n\n       -- create a Popup object, using already established 'toast_popup_text' skin style\n       local doomsday = Popup('toast_popup_text')\n\n       -- add message to popup\n       local doomsdayMessage = Group(\"group\", {\n                       text = Textarea('toast_popup_textarea',self:string(warning)),\n             })\n       doomsday:addWidget(doomsdayMessage)\n\n       -- display the message for 3 seconds\n       doomsday:showBriefly(3000, nil, Window.transitionPushPopupUp, Window.transitionPushPopupDown)\n end\n</code></pre> <p>The Fruits of Our Labor</p> <p>A Simple Menu with 4 Radio Button selections:</p> <p></p> <p>After a button is selected, a popup \"toast\" slides up and appears for 3 seconds before sliding back down:</p> <p></p>"},{"location":"reference/squeezeplay-applet/#settingslua","title":"settings.lua","text":"<p>Applets can write to a settings.lua through the <code>getSettings()</code> method, and allows your applet to load in stored setting information from a previous run of the applet. The contents of a settings.lua file are a Lua table that can be read in by the Applet file through the same <code>getSettings()</code> method.</p> <p>an example settings.lua file written after selecting the 4th radio button in the example applet:</p> <pre><code> settings = {};\n settings[\"currentSetting\"] = 4;\n</code></pre>"},{"location":"reference/squeezeplay-applet/#stringstxt","title":"strings.txt","text":"<p>Applets may have strings that need translation to other languages. The strings.txt file stores these tokens for use in the Meta and Applet files. The standard format for strings.txt files is listed below (note: whitespace is delimited with tabs not spaces). After defining a strings.txt file, you can add language support simply by adding the associated translations to these strings (DE given as an example in first string)</p> <p>Note, if you copy the contents below into a text file you have to replace the spaces before/after language code with a tab character</p> <pre><code> #\n # The two letter codes are defined by ISO 639-1\n # http://en.wikipedia.org/wiki/List_of_ISO_639_codes\n\n DOOMSDAY\n       EN      Doomsday Machine\n       DE      Doomstag Arbeitsmashine\n\n DOOMSDAY_OPTION1\n       EN      Dire Warning 1\n\n DOOMSDAY_OPTION2\n       EN      Dire Warning 2\n\n DOOMSDAY_OPTION3\n       EN      Dire Warning 3\n\n DOOMSDAY_OPTION4\n       EN      Dire Warning 4\n\n DOOMSDAY_MESSAGE0\n       EN      Fear is in the air!\n\n DOOMSDAY_MESSAGE1\n       EN      The End is Nigh!\n\n DOOMSDAY_MESSAGE2\n       EN      Run for the hills!\n\n DOOMSDAY_MESSAGE3\n       EN      Get your affairs in order!\n\n DOOMSDAY_MESSAGE4\n       EN      DUCK!\n</code></pre>"},{"location":"reference/squeezeplay-applet/#additional-resources","title":"Additional Resources","text":"<p>What I've laid out above is an applet that does next-to-nothing. Chances are you want your applet to do a little more than that. Here's some pointers to additonal resources to make your SqueezePlay development easier.</p>"},{"location":"reference/squeezeplay-applet/#embedded-documentation","title":"Embedded documentation","text":"<p>Much of SqueezePlay files, including the various ui widgets, are documented in POD format. From a command-line you can use <code>perldoc</code> to display the documentation for a particular file. For example, the DoomsdayApplet example above has POD documentation embedded in it.</p> <pre><code> squeezeplay/src/squeezeplay/share/applets/Doomsday: perldoc DoomsdayApplet.lua\n DOOMSDAYAPPLET.LUA(1) User Contributed Perl DocumentationDOOMSDAYAPPLET.LUA(1)\n\n NAME\n      applets.Doomsday.DoomsdayApplet - Doomsday Applet\n\n DESCRIPTION\n      This applet was created solely for the purpose of a demonstration\n\n FUNCTIONS\n      Applet related methods are described in jive.Applet.\n\n\n perl v5.8.8                       2008-04-25             DOOMSDAYAPPLET.LUA(1)\n</code></pre> <p>The POD documentation for the ui widgets are particularly helpful in understanding what methods are available. Browse to src/squeezeplay/src/share/jive and explore this area with perldoc.</p> <p>See this url http://search.cpan.org/dist/Pod-Perldoc/lib/perldoc.pod for a description of PerlDoc</p> <p>PerlDoc should normally be included in a default instance of perl.</p>"},{"location":"reference/squeezeplay-applet/#milking-the-testapplet-for-fun-and-profit","title":"Milking the TestApplet for Fun and Profit","text":"<p>Thankfully, there is a nice applet in the squeezeplay_test directory that can help you learn-by-example. It covers things like fullscreen popup windows, text input entry (text, IP address, time), checkboxes, radio buttons, textareas, etc.</p> <p>From your subversion checkout, the TestApplet can be found at src/squeezeplay_test/share/applets/TestApplet</p>"},{"location":"reference/squeezeplay-applet/#getting-your-applet-on-a-squeezeboxcontroller","title":"Getting your applet on a SqueezeboxController","text":"<p>In order to make your applet available via the applet installer, put all your files (Applet.lua, Meta.lua, strings.txt, ...) in a simple zip-file which is named like your applet. Please be aware, that the zip MUST NOT contain any subfolders ! Then create a repository-file like described here.</p> <p>Both file must be uploaded to a web-server, so that squeezebox-server can easily download the files.</p> <p>This page should guide you through the process of getting your applet on to your controller via Squeezbox-Server</p>"},{"location":"reference/squeezeplay-applet/#development-best-practices","title":"Development best practices","text":"<p>As long as possible you should try to develop and test using a desktop build of SqueezePlay. This gives you the most rapid development success. Most but not all applets are not dependent on the target hardware.</p>"},{"location":"reference/squeezeplay-applet/#bens-tips-and-tricks-on-the-desktop","title":"Ben's Tips and tricks on the desktop","text":"<p>I do a lot of development in OS X in a terminal, and it's very useful to make heavy use of the bash shell's alias function and ability to customize your terminal environment. With a couple path changes in the first few lines, these can be of general use on either an OS X or Linux development environment.</p> <pre><code>export MYHOME='/Users/bklaas'\nexport SQUEEZEPLAY='$MYHOME/svk/squeezeplay'\nexport SPAPPLETS='squeezeplay/src/squeezeplay/share'\nexport SC74='$MYHOME/svk/slim/7.4/trunk/server'\nexport SC75='$MYHOME/svk/slim/7.5/trunk/server'\n\n# alias to quickly jump to the OS X directory where squeezeplay settings files are kept\nalias settings='cd $MYHOME/Library/Preferences/SqueezePlay/userpath/settings'\n\n# 7.4 trunk branch\nexport    SP74PATH=\"$SQUEEZEPLAY/7.4/trunk/squeezeplay\"\nalias   make74jive=\"cd $SP74PATH/src &amp;&amp; make -f Makefile.osx &amp;&amp; go74jive\"\nalias       74jive=\"cd $SQUEEZEPLAY/7.4/trunk/$SPAPPLETS\"\nalias         74up=\"cd $SP74PATH &amp;&amp; svk update -s &amp;&amp; 74jive\"\nalias     go74jive=\"cd $SP74PATH/build/osx/bin &amp;&amp; source ~/7.4rc\"\n\n# 7.5 trunk branch\nexport    SP75PATH=\"$SQUEEZEPLAY/7.5/trunk/squeezeplay\"\nalias   make75jive=\"cd $SP75PATH/src &amp;&amp; make -f Makefile.osx &amp;&amp; go75jive\"\nalias       75jive=\"cd $SQUEEZEPLAY/7.5/trunk/$SPAPPLETS\"\nalias       75test=\"cd $SQUEEZEPLAY/7.5/trunk/squeezeplay/src/squeezeplay_test/share/applets\"\nalias         75up=\"cd $SP75PATH &amp;&amp; svk update -s &amp;&amp; 75jive\"\nalias     go75jive=\"cd $SP75PATH/build/osx/bin &amp;&amp; source ~/7.5rc\"\nalias       75fab4=\"cd $SQUEEZEPLAY/7.5/trunk/squeezeplay/src/squeezeplay_fab4/share/applets\"\nalias  75squeezeos=\"cd $SQUEEZEPLAY/7.5/trunk/squeezeplay/src/squeezeplay_squeezeos/share/applets\"\nalias       75baby=\"cd $SQUEEZEPLAY/7.5/trunk/squeezeplay/src/squeezeplay_baby/share/applets\"\n\n# 7.4 SC\nalias         74scup=\"cd $SC74 &amp;&amp; svk update -s\"\nalias         74sc=\"cd $SC74/Slim\"\n\n# 7.5 SC\nalias         scup=\"cd $SC75 &amp;&amp; svk update -s\"\nalias         75sc=\"cd $SC75/Slim\"\n</code></pre> <p>You'll note in the above file there are a few alias directives to source rc files, which I manage separately. The purpose of these rc files is to set the LUA_PATH environmental variable so changes that I make in the subversion source area are reflected when running the build. Without these, only changes in the applet files of the build itself will be seen-- Or to put it another way, if you make a change in the source area without redefining LUA_PATH you need to rebuild before you see the change.</p> <p>Here's an example of an rc file for my 7.5 checkout:</p> <pre><code>export LUA_PATH='/Users/bklaas/svk/squeezeplay/7.5/trunk/squeezeplay/src/squeezeplay/share/?.lua'\nexport LUA_PATH=$LUA_PATH\\;/Users/bklaas/svk/squeezeplay/7.5/trunk/squeezeplay/src/squeezeplay_desktop/share/?.lua\nexport LUA_PATH=$LUA_PATH\\;/Users/bklaas/svk/squeezeplay/7.5/trunk/squeezeplay/src/squeezeplay_contrib/share/?.lua\nexport LUA_PATH=$LUA_PATH\\;/Users/bklaas/svk/squeezeplay/7.5/trunk/squeezeplay/src/squeezeplay_test/share/?.lua\n</code></pre>"},{"location":"reference/squeezeplay-applet/#testing-custom-changes-on-the-target-hardware","title":"Testing custom changes on the target hardware","text":"<p>For testing on the target device (e.g., Squeezebox Radio) use secure copy (scp) to transfer the appropiate files to the device. You can do this with scp on a console like</p> <pre><code>scp APPLETNAMEApplet.lua root@192.168.?.?:/usr/share/jive/applets/APPLETNAME/\n</code></pre> <p>the path for applets on the target device is /usr/share/jive/applets/</p> <p>On windows a program like WinSCP or Filezilla can copy the files, or alternatively use a windows shell environment that will give you a command-line, Cygwin.</p> <p>Remember to restart SqueezePlay after the changes. Rebooting is one way to accomplish this, but even faster the following line, issued directly from the SSH-console of your device:</p> <pre><code>/etc/init.d/squeezeplay stopwdog &amp;&amp; /etc/init.d/squeezeplay restart\n</code></pre> <p>If you do this often, its recommended to upload this as a little script to your device:</p> <pre><code>#!/bin/sh\n/etc/init.d/squeezeplay stopwdog &amp;&amp; /etc/init.d/squeezeplay restart\n</code></pre> <p>To watch the messages produced by your applet just follow the messages file</p> <pre><code>tail -f /var/log/messages\n</code></pre>"},{"location":"reference/using-the-cli/","title":"Using the command-line interface","text":"<p>The complete documentation of the CLI API can be found within your LMS installation (Help-&gt;Technical Information-&gt;Command Line Interface).</p>"},{"location":"reference/using-the-cli/#telnet","title":"Telnet","text":"<p>LMS provides a command-line interface to the players via TCP/IP. After starting the server, commands and queries may be sent by connecting to a specific TCP/IP port. The server will reply echoing the request (for commands) or by returning the requested data (for queries). By default, the server will listen for connections on TCP/IP port 9090. This format is designed for ease of integration into AMX, Crestron and other automation systems.</p> <p>The end of line separator is line feed (&lt;LF&gt; ASCII decimal 10, hexadecimal 0x0A). The server accepts LF, CR or 0x00 (or any combination thereof) as end of line, and replies with whatever was used for the command. For strings, Lyrion Music Server uses the UTF-8 character-set encoding.</p> <p>To use the command line interface interactively, use the telnet command from your system's command prompt: <code>telnet localhost 9090</code> and when it connects, you can start typing commands. Beware that the server expects parameters to be encoded using percent-style escaping (the same method as is used in URLs); <code>\"</code> and <code>\\\\</code> are not supported as in shell-like environments.</p> <p>For debugging purposes, CLI formatted commands can be sent using standard in and out. This support is only available on Unix platforms (MacOS X included), and must be enabled by launching the server with the <code>--stdio</code> command line option.</p>"},{"location":"reference/using-the-cli/#jsonrpcjs","title":"jsonrpc.js","text":"<p>You can alternatively use a JSON-RPC 1.0 API over HTTP to interact with the CLI. This employs POST requests sent to <code>http://&lt;server&gt;:&lt;port&gt;/jsonrpc.js</code>, where port is the normal 9000 http port instead of the 9090 CLI port.</p> <p>The Content-Type header should be \"application/json\" and the body of the request should include a JSON-encoded object which includes an array containing the extended query format parameters (see section Command format) as follows:</p> <p><code>{\"id\": 1, \"method\": \"slim.request\", \"params\": [ &lt;playerid&gt;, [&lt;command&gt;, &lt;start&gt;, &lt;itemsPerResponse&gt;, &lt;p3&gt;, ... &lt;pN&gt; ]]}</code></p> <p>The response will be a JSON-encoded object which echoes the params/id/method parameters from the request, with the requested data present in the \"result\" object.</p> <p>Example:</p> <p><code>curl -g -X POST -d '{\"id\":1,\"method\":\"slim.request\",\"params\":[\"00:04:20:ab:cd:ef\",[\"playlist\",\"name\",\"?\"]]}' http://192.168.1.1:9000/jsonrpc.js</code></p> <p>Response:</p> <p><code>{ \"params\":[\"00:04:20:ab:cd:ef\",[\"playlist\",\"name\",\"?\"]],\"result\":{\"_name\":\"Daily Mix\"},\"id\":\"1\",\"method\":\"slim.request\"}</code></p> <p>For commands that are global to the server and do not require a <code>&lt;playerid&gt;</code>, you can substitute 0. There is no error handling when malformed or invalid requests are attempted \u2014 there will either be an empty response {} or you'll observe an ECONNRESET error.</p> <p>Note that percent-style encoding of parameters is not needed when using jsonrpc.js.</p>"},{"location":"reference/using-the-cli/#examples","title":"Examples","text":""},{"location":"reference/using-the-cli/#mute-a-player","title":"Mute a player","text":"<p>The <code>mixer muting</code> command mutes or unmutes the player. Use <code>0</code> to unmute, <code>1</code> to mute, <code>?</code> to query and no parameter (or <code>toggle</code>) to toggle the muting state of the player.</p> <p>Mute player <code>00:04:20:ab:cd:ef</code>:</p> curlwgetnc / ncat <pre><code>curl -g -X POST -d '{\"id\":1,\"method\":\"slim.request\",\"params\":[\"00:04:20:ab:cd:ef\",[\"mixer\",\"muting\",\"1\"]]}' http://192.168.1.1:9000/jsonrpc.js\n</code></pre> <pre><code>wget -q -O- --post-data='{\"id\":1,\"method\":\"slim.request\",\"params\":[\"00:04:20:ab:cd:ef\",[\"mixer\",\"muting\",\"1\"]]}' http://192.168.1.1:9000/jsonrpc.js\n</code></pre> <pre><code>printf \"00:04:20:ab:cd:ef mixer muting 1\\n\" | nc 192.168.1.1 9090\n</code></pre> <p>The response you will get looks like <code>{\"id\":1,\"method\":\"slim.request\",\"result\":{\"_muting\":\"1\"},\"params\":[\"00:04:20:ab:cd:ef\",[\"mixer\",\"muting\",\"?\"]]}</code> in the case of curl or wget or <code>00:04:20:ab:cd:ef mixer muting 1</code> in the case of ncat.</p>"},{"location":"reference/using-the-cli/#skip-to-the-next-track","title":"Skip to the next track","text":"<p>The <code>playlist index</code> command sets or queries the song that is currently playing by index. When setting, a zero-based value may be used to indicate which song to play. An explicitly positive or negative number may be used to jump to a song relative to the currently playing song.</p> <p>Skip to the next track on player <code>00:04:20:ab:cd:ef</code>:</p> curlwgetnc / ncat <pre><code>curl -g -X POST -d '{\"id\":1,\"method\":\"slim.request\",\"params\":[\"00:04:20:ab:cd:ef\",[\"playlist\",\"index\",\"+1\"]]}' http://192.168.1.1:9000/jsonrpc.js\n</code></pre> <pre><code>wget -q -O- --post-data='{\"id\":1,\"method\":\"slim.request\",\"params\":[\"00:04:20:ab:cd:ef\",[\"playlist\",\"index\",\"+1\"]]}' http://192.168.1.1:9000/jsonrpc.js\n</code></pre> <pre><code>printf \"00:04:20:ab:cd:ef playlist index +1\\n\" | nc 192.168.1.1 9090\n</code></pre>"},{"location":"reference/winscp/","title":"How to transfer files using WinSCP","text":""},{"location":"reference/winscp/#install-winscp","title":"Install WinSCP","text":"<p>Download the latest version of WinSCP and install according to their instructions.</p>"},{"location":"reference/winscp/#transfer-a-file","title":"Transfer a file","text":"<p>This is the method to transfer a opml file but it demonstrates the general procedure to transfer any file or folder e.g. music folders, if one does not use SMB.</p> <p>Note</p> <p>This tutorial is written with a piCorePlayer (or short pCP) as the remote machine. The same principles apply to any SSH server. Change machine- and/or username as needed.</p> <ul> <li> <p>Both the Windows computer and the Raspberry Pi have to be on the same network.</p> </li> <li> <p>On the Windows computer make a new folder on the desktop and paste the favourites.opml inside</p> </li> </ul> <p>Tip</p> <p>When one starts WinSCP for the first time one is given the option to start in two different modes; we recommend the one that gives two panes side by side.</p> <ul> <li> <p>Stop LMS from running (on pCP you find the button on the LMS tab page)</p> </li> <li> <p>Leave the File Profile at SFTP (Note; this setting can be changed, but for pCP it seems to work without a problem)</p> </li> <li> <p>Then Log in to the Raspberry Pi, you need the IP address (or use its host name, like eg. pcp.local)</p> </li> <li> <p>Leave the port # at 22</p> </li> <li> <p>Enter the user name (which on pCP is <code>tc</code> by default)</p> </li> <li> <p>Enter the user password (pCP: <code>piCore</code> by default)</p> </li> <li> <p>Click on Login</p> </li> </ul> <p></p> <ul> <li>When the Warning Box appears click on Update</li> </ul> <p></p> <p>You are presented with two screens:</p> <p></p> <p>The one on the left is the Windows computer you are using and the one on the right the remote machine (a Raspberry Pi with pCP).</p> <ul> <li> <p>In the Left Pane, select the location from the dropdown and then double click on the rewuired folder to open it.</p> </li> <li> <p>In the right pane select <code>&lt;root&gt;</code> from the dropdown</p> </li> <li> <p>From the list that appears below, navigate to <code>/usr/local/slimserver/prefs</code></p> </li> </ul> <p></p> <p>And this is where we go; one can either overwrite or rename the existing <code>favourite.opml</code> to <code>oldfavourite.opml</code> (I choose the latter; right click on the folder and click on rename from the dropdown).</p> <p></p> <ul> <li>Then in the left pane right click on the folder and choose upload from the dropdown.</li> </ul> <p></p> <ul> <li>Then click on OK in the box that appears</li> </ul> <p></p> <p>The file is uploaded.</p> <p></p> <p>Close WinSCP (click yes on the Termination warning box) and reboot the Pi.</p> <p></p>"},{"location":"reference/winscp/#transfer-a-file-as-user-root","title":"Transfer a file as user <code>root</code>","text":"<p>Normally I use SFTP or SCP as File Protocal but sometimes one is denied permission to perform the task and one needs to utilise the user <code>root</code>.</p> <ul> <li>Fill in the login detail as required and then click on Advanced</li> </ul> <p></p> <ul> <li>In the window that opens click on the following areas in sequence: \"Shell\"</li> </ul> <p></p> <ul> <li>then \"<code>sudo su</code>\" from the dropdown</li> </ul> <p></p> <ul> <li>then on OK</li> </ul> <p></p> <ul> <li>The window will close and then click on Login</li> </ul> <p>This is a rpi 4B with LMS installed on the Raspberry Pi OS Bookworm Lite 64 bit:</p> <p></p>"}]}